// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/dymns/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterName defines the message used for user to register or extends ownership duration of a Dym-Name.
type MsgRegisterName struct {
	// name is the Dym-Name to be registered.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// owner is the bech32-encoded address of the account which owns the order.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// duration is the number of years the Dym-Name will be registered for.
	Duration int64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// confirm_payment is used to ensure user acknowledge of the amount coin that the user must pay.
	// If the amount mis-match with the actual payment, the transaction will be rejected.
	ConfirmPayment types.Coin `protobuf:"bytes,4,opt,name=confirm_payment,json=confirmPayment,proto3" json:"confirm_payment"`
	// contact defines an optional contact information for the Dym-Name.
	Contact string `protobuf:"bytes,5,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (m *MsgRegisterName) Reset()         { *m = MsgRegisterName{} }
func (m *MsgRegisterName) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterName) ProtoMessage()    {}
func (*MsgRegisterName) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{0}
}
func (m *MsgRegisterName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterName.Merge(m, src)
}
func (m *MsgRegisterName) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterName) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterName.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterName proto.InternalMessageInfo

func (m *MsgRegisterName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgRegisterName) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgRegisterName) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *MsgRegisterName) GetConfirmPayment() types.Coin {
	if m != nil {
		return m.ConfirmPayment
	}
	return types.Coin{}
}

func (m *MsgRegisterName) GetContact() string {
	if m != nil {
		return m.Contact
	}
	return ""
}

// MsgRegisterNameResponse defines the response for the name registration.
type MsgRegisterNameResponse struct {
}

func (m *MsgRegisterNameResponse) Reset()         { *m = MsgRegisterNameResponse{} }
func (m *MsgRegisterNameResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterNameResponse) ProtoMessage()    {}
func (*MsgRegisterNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{1}
}
func (m *MsgRegisterNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterNameResponse.Merge(m, src)
}
func (m *MsgRegisterNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterNameResponse proto.InternalMessageInfo

// MsgTransferOwnership defines the message used for user to transfer ownership of a Dym-Name.
type MsgTransferOwnership struct {
	// name is the Dym-Name to be transferred ownership.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// owner is the bech32-encoded address of the account which is currently owner of the Dym-Name.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// new_owner is the bech32-encoded address of the next account which will own the Dym-Name.
	NewOwner string `protobuf:"bytes,3,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty"`
}

func (m *MsgTransferOwnership) Reset()         { *m = MsgTransferOwnership{} }
func (m *MsgTransferOwnership) String() string { return proto.CompactTextString(m) }
func (*MsgTransferOwnership) ProtoMessage()    {}
func (*MsgTransferOwnership) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{2}
}
func (m *MsgTransferOwnership) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferOwnership) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferOwnership.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferOwnership) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferOwnership.Merge(m, src)
}
func (m *MsgTransferOwnership) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferOwnership) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferOwnership.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferOwnership proto.InternalMessageInfo

func (m *MsgTransferOwnership) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgTransferOwnership) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgTransferOwnership) GetNewOwner() string {
	if m != nil {
		return m.NewOwner
	}
	return ""
}

// MsgTransferOwnershipResponse defines the response for the name transfer.
type MsgTransferOwnershipResponse struct {
}

func (m *MsgTransferOwnershipResponse) Reset()         { *m = MsgTransferOwnershipResponse{} }
func (m *MsgTransferOwnershipResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferOwnershipResponse) ProtoMessage()    {}
func (*MsgTransferOwnershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{3}
}
func (m *MsgTransferOwnershipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferOwnershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferOwnershipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferOwnershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferOwnershipResponse.Merge(m, src)
}
func (m *MsgTransferOwnershipResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferOwnershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferOwnershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferOwnershipResponse proto.InternalMessageInfo

// MsgSetController defines the message used for user to set a controller for a Dym-Name.
type MsgSetController struct {
	// name is the Dym-Name to be updated controller.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// owner is the bech32-encoded address of the account which is currently owner of the Dym-Name.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// controller is the bech32-encoded address of the account which will be the new controller of the Dym-Name.
	Controller string `protobuf:"bytes,3,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (m *MsgSetController) Reset()         { *m = MsgSetController{} }
func (m *MsgSetController) String() string { return proto.CompactTextString(m) }
func (*MsgSetController) ProtoMessage()    {}
func (*MsgSetController) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{4}
}
func (m *MsgSetController) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetController) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetController.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetController) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetController.Merge(m, src)
}
func (m *MsgSetController) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetController) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetController.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetController proto.InternalMessageInfo

func (m *MsgSetController) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgSetController) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgSetController) GetController() string {
	if m != nil {
		return m.Controller
	}
	return ""
}

// MsgSetControllerResponse defines the response for the name controller setting.
type MsgSetControllerResponse struct {
}

func (m *MsgSetControllerResponse) Reset()         { *m = MsgSetControllerResponse{} }
func (m *MsgSetControllerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetControllerResponse) ProtoMessage()    {}
func (*MsgSetControllerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{5}
}
func (m *MsgSetControllerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetControllerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetControllerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetControllerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetControllerResponse.Merge(m, src)
}
func (m *MsgSetControllerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetControllerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetControllerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetControllerResponse proto.InternalMessageInfo

// MsgUpdateResolveAddress defines the message used for user to update the resolve address of a Dym-Name.
type MsgUpdateResolveAddress struct {
	// name is the Dym-Name to be updated controller.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// controller is the bech32-encoded address of the account which has permission to update configure of the Dym-Name.
	Controller string `protobuf:"bytes,2,opt,name=controller,proto3" json:"controller,omitempty"`
	// chain_id is an optional field, chain-based mapping
	ChainId string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// sub_name is an optional field, sub-domain-like mapping
	SubName string `protobuf:"bytes,4,opt,name=sub_name,json=subName,proto3" json:"sub_name,omitempty"`
	// resolve_to is the address that this config will resolve to.
	// Leave it empty to remove the resolve address.
	ResolveTo string `protobuf:"bytes,5,opt,name=resolve_to,json=resolveTo,proto3" json:"resolve_to,omitempty"`
}

func (m *MsgUpdateResolveAddress) Reset()         { *m = MsgUpdateResolveAddress{} }
func (m *MsgUpdateResolveAddress) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateResolveAddress) ProtoMessage()    {}
func (*MsgUpdateResolveAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{6}
}
func (m *MsgUpdateResolveAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateResolveAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateResolveAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateResolveAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateResolveAddress.Merge(m, src)
}
func (m *MsgUpdateResolveAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateResolveAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateResolveAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateResolveAddress proto.InternalMessageInfo

func (m *MsgUpdateResolveAddress) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateResolveAddress) GetController() string {
	if m != nil {
		return m.Controller
	}
	return ""
}

func (m *MsgUpdateResolveAddress) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MsgUpdateResolveAddress) GetSubName() string {
	if m != nil {
		return m.SubName
	}
	return ""
}

func (m *MsgUpdateResolveAddress) GetResolveTo() string {
	if m != nil {
		return m.ResolveTo
	}
	return ""
}

// MsgUpdateResolveAddressResponse defines the response for the name resolve address update.
type MsgUpdateResolveAddressResponse struct {
}

func (m *MsgUpdateResolveAddressResponse) Reset()         { *m = MsgUpdateResolveAddressResponse{} }
func (m *MsgUpdateResolveAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateResolveAddressResponse) ProtoMessage()    {}
func (*MsgUpdateResolveAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{7}
}
func (m *MsgUpdateResolveAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateResolveAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateResolveAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateResolveAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateResolveAddressResponse.Merge(m, src)
}
func (m *MsgUpdateResolveAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateResolveAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateResolveAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateResolveAddressResponse proto.InternalMessageInfo

// MsgUpdateDetails defines the message used for user to update the details of a Dym-Name.
type MsgUpdateDetails struct {
	// name is the Dym-Name to be updated details.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// controller is the bech32-encoded address of the account which has permission to update details of the Dym-Name.
	Controller string `protobuf:"bytes,2,opt,name=controller,proto3" json:"controller,omitempty"`
	// contact is an optional field, contact information of the Dym-Name.
	Contact string `protobuf:"bytes,3,opt,name=contact,proto3" json:"contact,omitempty"`
	// clear_configs is an optional field, set to true to clear the current configuration.
	ClearConfigs bool `protobuf:"varint,4,opt,name=clear_configs,json=clearConfigs,proto3" json:"clear_configs,omitempty"`
}

func (m *MsgUpdateDetails) Reset()         { *m = MsgUpdateDetails{} }
func (m *MsgUpdateDetails) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDetails) ProtoMessage()    {}
func (*MsgUpdateDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{8}
}
func (m *MsgUpdateDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDetails.Merge(m, src)
}
func (m *MsgUpdateDetails) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDetails.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDetails proto.InternalMessageInfo

func (m *MsgUpdateDetails) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateDetails) GetController() string {
	if m != nil {
		return m.Controller
	}
	return ""
}

func (m *MsgUpdateDetails) GetContact() string {
	if m != nil {
		return m.Contact
	}
	return ""
}

func (m *MsgUpdateDetails) GetClearConfigs() bool {
	if m != nil {
		return m.ClearConfigs
	}
	return false
}

// MsgUpdateDetailsResponse defines the response for the name details update.
type MsgUpdateDetailsResponse struct {
}

func (m *MsgUpdateDetailsResponse) Reset()         { *m = MsgUpdateDetailsResponse{} }
func (m *MsgUpdateDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDetailsResponse) ProtoMessage()    {}
func (*MsgUpdateDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{9}
}
func (m *MsgUpdateDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDetailsResponse.Merge(m, src)
}
func (m *MsgUpdateDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDetailsResponse proto.InternalMessageInfo

// MsgPutAdsSellName defines the message used for user to put a Dym-Name for sale.
type MsgPutAdsSellName struct {
	// name is the Dym-Name to be opened for sell.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// owner is the bech32-encoded address of the account which owns the order.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// min_price is the minimum price that buyer must pay for the Dym-Name.
	// Note: even tho only DYM is allowed for payment, the min_price is still a Coin type to be able for future expansion.
	MinPrice types.Coin `protobuf:"bytes,3,opt,name=min_price,json=minPrice,proto3" json:"min_price"`
	// sell_price is the price that buyer must pay for the Dym-Name to immediately own it.
	// Setting this field to nil means the Dym-Name is not for immediate purchase and must wait until the order expired.
	SellPrice *types.Coin `protobuf:"bytes,4,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
}

func (m *MsgPutAdsSellName) Reset()         { *m = MsgPutAdsSellName{} }
func (m *MsgPutAdsSellName) String() string { return proto.CompactTextString(m) }
func (*MsgPutAdsSellName) ProtoMessage()    {}
func (*MsgPutAdsSellName) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{10}
}
func (m *MsgPutAdsSellName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPutAdsSellName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPutAdsSellName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPutAdsSellName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPutAdsSellName.Merge(m, src)
}
func (m *MsgPutAdsSellName) XXX_Size() int {
	return m.Size()
}
func (m *MsgPutAdsSellName) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPutAdsSellName.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPutAdsSellName proto.InternalMessageInfo

func (m *MsgPutAdsSellName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgPutAdsSellName) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgPutAdsSellName) GetMinPrice() types.Coin {
	if m != nil {
		return m.MinPrice
	}
	return types.Coin{}
}

func (m *MsgPutAdsSellName) GetSellPrice() *types.Coin {
	if m != nil {
		return m.SellPrice
	}
	return nil
}

// MsgPutAdsSellNameResponse defines the response for the name sell advertisement.
type MsgPutAdsSellNameResponse struct {
}

func (m *MsgPutAdsSellNameResponse) Reset()         { *m = MsgPutAdsSellNameResponse{} }
func (m *MsgPutAdsSellNameResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPutAdsSellNameResponse) ProtoMessage()    {}
func (*MsgPutAdsSellNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{11}
}
func (m *MsgPutAdsSellNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPutAdsSellNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPutAdsSellNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPutAdsSellNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPutAdsSellNameResponse.Merge(m, src)
}
func (m *MsgPutAdsSellNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPutAdsSellNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPutAdsSellNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPutAdsSellNameResponse proto.InternalMessageInfo

// MsgCancelAdsSellName defines the message used for user to cancel a Dym-Name sell advertisement.
type MsgCancelAdsSellName struct {
	// name is the Dym-Name to be stopped selling.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// owner is the bech32-encoded address of the account which owns the Dym-Name as well as the order.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgCancelAdsSellName) Reset()         { *m = MsgCancelAdsSellName{} }
func (m *MsgCancelAdsSellName) String() string { return proto.CompactTextString(m) }
func (*MsgCancelAdsSellName) ProtoMessage()    {}
func (*MsgCancelAdsSellName) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{12}
}
func (m *MsgCancelAdsSellName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelAdsSellName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelAdsSellName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelAdsSellName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelAdsSellName.Merge(m, src)
}
func (m *MsgCancelAdsSellName) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelAdsSellName) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelAdsSellName.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelAdsSellName proto.InternalMessageInfo

func (m *MsgCancelAdsSellName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCancelAdsSellName) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// MsgCancelAdsSellNameResponse defines the response for the name sell advertisement cancellation.
type MsgCancelAdsSellNameResponse struct {
}

func (m *MsgCancelAdsSellNameResponse) Reset()         { *m = MsgCancelAdsSellNameResponse{} }
func (m *MsgCancelAdsSellNameResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelAdsSellNameResponse) ProtoMessage()    {}
func (*MsgCancelAdsSellNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{13}
}
func (m *MsgCancelAdsSellNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelAdsSellNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelAdsSellNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelAdsSellNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelAdsSellNameResponse.Merge(m, src)
}
func (m *MsgCancelAdsSellNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelAdsSellNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelAdsSellNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelAdsSellNameResponse proto.InternalMessageInfo

// MsgPurchaseName defines the message used for user to bid/purchase a Dym-Name.
type MsgPurchaseName struct {
	// name is the Dym-Name to be purchased.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// buyer is the bech32-encoded address of the account which is purchasing the Dym-Name.
	Buyer string `protobuf:"bytes,2,opt,name=buyer,proto3" json:"buyer,omitempty"`
	// offer is the price that buyer is willing to pay for the Dym-Name.
	Offer types.Coin `protobuf:"bytes,3,opt,name=offer,proto3" json:"offer"`
}

func (m *MsgPurchaseName) Reset()         { *m = MsgPurchaseName{} }
func (m *MsgPurchaseName) String() string { return proto.CompactTextString(m) }
func (*MsgPurchaseName) ProtoMessage()    {}
func (*MsgPurchaseName) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{14}
}
func (m *MsgPurchaseName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPurchaseName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPurchaseName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPurchaseName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPurchaseName.Merge(m, src)
}
func (m *MsgPurchaseName) XXX_Size() int {
	return m.Size()
}
func (m *MsgPurchaseName) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPurchaseName.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPurchaseName proto.InternalMessageInfo

func (m *MsgPurchaseName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgPurchaseName) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgPurchaseName) GetOffer() types.Coin {
	if m != nil {
		return m.Offer
	}
	return types.Coin{}
}

// MsgPurchaseNameResponse defines the response for the name purchase.
type MsgPurchaseNameResponse struct {
}

func (m *MsgPurchaseNameResponse) Reset()         { *m = MsgPurchaseNameResponse{} }
func (m *MsgPurchaseNameResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPurchaseNameResponse) ProtoMessage()    {}
func (*MsgPurchaseNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{15}
}
func (m *MsgPurchaseNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPurchaseNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPurchaseNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPurchaseNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPurchaseNameResponse.Merge(m, src)
}
func (m *MsgPurchaseNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPurchaseNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPurchaseNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPurchaseNameResponse proto.InternalMessageInfo

// MsgOfferBuyName defines the message used for user to offer to buy a Dym-Name.
type MsgOfferBuyName struct {
	// name is the Dym-Name wishing to buy.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// buyer is the bech32-encoded address of the account which is purchasing the Dym-Name.
	Buyer string `protobuf:"bytes,2,opt,name=buyer,proto3" json:"buyer,omitempty"`
	// continue_offer_id is the optional field, if the buyer wants to extends an existing offer.
	ContinueOfferId string `protobuf:"bytes,3,opt,name=continue_offer_id,json=continueOfferId,proto3" json:"continue_offer_id,omitempty"`
	// offer is the price that buyer is willing to pay for the Dym-Name.
	Offer types.Coin `protobuf:"bytes,4,opt,name=offer,proto3" json:"offer"`
}

func (m *MsgOfferBuyName) Reset()         { *m = MsgOfferBuyName{} }
func (m *MsgOfferBuyName) String() string { return proto.CompactTextString(m) }
func (*MsgOfferBuyName) ProtoMessage()    {}
func (*MsgOfferBuyName) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{16}
}
func (m *MsgOfferBuyName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOfferBuyName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOfferBuyName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOfferBuyName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOfferBuyName.Merge(m, src)
}
func (m *MsgOfferBuyName) XXX_Size() int {
	return m.Size()
}
func (m *MsgOfferBuyName) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOfferBuyName.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOfferBuyName proto.InternalMessageInfo

func (m *MsgOfferBuyName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgOfferBuyName) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgOfferBuyName) GetContinueOfferId() string {
	if m != nil {
		return m.ContinueOfferId
	}
	return ""
}

func (m *MsgOfferBuyName) GetOffer() types.Coin {
	if m != nil {
		return m.Offer
	}
	return types.Coin{}
}

// MsgOfferBuyNameResponse defines the response for the name buy offer.
type MsgOfferBuyNameResponse struct {
	// offer_id is the unique identifier of the offer.
	OfferId string `protobuf:"bytes,1,opt,name=offer_id,json=offerId,proto3" json:"offer_id,omitempty"`
}

func (m *MsgOfferBuyNameResponse) Reset()         { *m = MsgOfferBuyNameResponse{} }
func (m *MsgOfferBuyNameResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOfferBuyNameResponse) ProtoMessage()    {}
func (*MsgOfferBuyNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{17}
}
func (m *MsgOfferBuyNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOfferBuyNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOfferBuyNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOfferBuyNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOfferBuyNameResponse.Merge(m, src)
}
func (m *MsgOfferBuyNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOfferBuyNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOfferBuyNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOfferBuyNameResponse proto.InternalMessageInfo

func (m *MsgOfferBuyNameResponse) GetOfferId() string {
	if m != nil {
		return m.OfferId
	}
	return ""
}

// MsgCancelOfferBuyName defines the message used for user to cancel an offer to buy a Dym-Name.
type MsgCancelOfferBuyName struct {
	// offer_id is the unique identifier of the offer.
	OfferId string `protobuf:"bytes,1,opt,name=offer_id,json=offerId,proto3" json:"offer_id,omitempty"`
	// buyer is the bech32-encoded address of the account which is purchasing the Dym-Name.
	Buyer string `protobuf:"bytes,2,opt,name=buyer,proto3" json:"buyer,omitempty"`
}

func (m *MsgCancelOfferBuyName) Reset()         { *m = MsgCancelOfferBuyName{} }
func (m *MsgCancelOfferBuyName) String() string { return proto.CompactTextString(m) }
func (*MsgCancelOfferBuyName) ProtoMessage()    {}
func (*MsgCancelOfferBuyName) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{18}
}
func (m *MsgCancelOfferBuyName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelOfferBuyName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelOfferBuyName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelOfferBuyName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelOfferBuyName.Merge(m, src)
}
func (m *MsgCancelOfferBuyName) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelOfferBuyName) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelOfferBuyName.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelOfferBuyName proto.InternalMessageInfo

func (m *MsgCancelOfferBuyName) GetOfferId() string {
	if m != nil {
		return m.OfferId
	}
	return ""
}

func (m *MsgCancelOfferBuyName) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

// MsgCancelOfferBuyNameResponse defines the response for the name buy offer cancellation.
type MsgCancelOfferBuyNameResponse struct {
}

func (m *MsgCancelOfferBuyNameResponse) Reset()         { *m = MsgCancelOfferBuyNameResponse{} }
func (m *MsgCancelOfferBuyNameResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelOfferBuyNameResponse) ProtoMessage()    {}
func (*MsgCancelOfferBuyNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{19}
}
func (m *MsgCancelOfferBuyNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelOfferBuyNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelOfferBuyNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelOfferBuyNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelOfferBuyNameResponse.Merge(m, src)
}
func (m *MsgCancelOfferBuyNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelOfferBuyNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelOfferBuyNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelOfferBuyNameResponse proto.InternalMessageInfo

// MsgAcceptOfferBuyName defines the message used for Dym-Name owner to accept an offer to buy a Dym-Name.
type MsgAcceptOfferBuyName struct {
	// offer_id is the unique identifier of the offer.
	OfferId string `protobuf:"bytes,1,opt,name=offer_id,json=offerId,proto3" json:"offer_id,omitempty"`
	// owner is the bech32-encoded address of the account which owns the Dym-Name.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// min_accept is the minimum price that the owner is willing to accept for the Dym-Name.
	// If this amount matches the offer, the Dym-Name will be transferred to the buyer.
	// If the offer is lower than this amount, this information will be updated into offer record to inform the buyer.
	MinAccept types.Coin `protobuf:"bytes,3,opt,name=min_accept,json=minAccept,proto3" json:"min_accept"`
}

func (m *MsgAcceptOfferBuyName) Reset()         { *m = MsgAcceptOfferBuyName{} }
func (m *MsgAcceptOfferBuyName) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptOfferBuyName) ProtoMessage()    {}
func (*MsgAcceptOfferBuyName) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{20}
}
func (m *MsgAcceptOfferBuyName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptOfferBuyName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptOfferBuyName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptOfferBuyName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptOfferBuyName.Merge(m, src)
}
func (m *MsgAcceptOfferBuyName) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptOfferBuyName) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptOfferBuyName.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptOfferBuyName proto.InternalMessageInfo

func (m *MsgAcceptOfferBuyName) GetOfferId() string {
	if m != nil {
		return m.OfferId
	}
	return ""
}

func (m *MsgAcceptOfferBuyName) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgAcceptOfferBuyName) GetMinAccept() types.Coin {
	if m != nil {
		return m.MinAccept
	}
	return types.Coin{}
}

// MsgAcceptOfferBuyNameResponse defines the response for the name buy offer acceptance.
type MsgAcceptOfferBuyNameResponse struct {
	// accepted is the flag to indicate if the offer is accepted (price matched).
	Accepted bool `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
}

func (m *MsgAcceptOfferBuyNameResponse) Reset()         { *m = MsgAcceptOfferBuyNameResponse{} }
func (m *MsgAcceptOfferBuyNameResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptOfferBuyNameResponse) ProtoMessage()    {}
func (*MsgAcceptOfferBuyNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88dd2f81468013c2, []int{21}
}
func (m *MsgAcceptOfferBuyNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptOfferBuyNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptOfferBuyNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptOfferBuyNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptOfferBuyNameResponse.Merge(m, src)
}
func (m *MsgAcceptOfferBuyNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptOfferBuyNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptOfferBuyNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptOfferBuyNameResponse proto.InternalMessageInfo

func (m *MsgAcceptOfferBuyNameResponse) GetAccepted() bool {
	if m != nil {
		return m.Accepted
	}
	return false
}

func init() {
	proto.RegisterType((*MsgRegisterName)(nil), "dymensionxyz.dymension.dymns.MsgRegisterName")
	proto.RegisterType((*MsgRegisterNameResponse)(nil), "dymensionxyz.dymension.dymns.MsgRegisterNameResponse")
	proto.RegisterType((*MsgTransferOwnership)(nil), "dymensionxyz.dymension.dymns.MsgTransferOwnership")
	proto.RegisterType((*MsgTransferOwnershipResponse)(nil), "dymensionxyz.dymension.dymns.MsgTransferOwnershipResponse")
	proto.RegisterType((*MsgSetController)(nil), "dymensionxyz.dymension.dymns.MsgSetController")
	proto.RegisterType((*MsgSetControllerResponse)(nil), "dymensionxyz.dymension.dymns.MsgSetControllerResponse")
	proto.RegisterType((*MsgUpdateResolveAddress)(nil), "dymensionxyz.dymension.dymns.MsgUpdateResolveAddress")
	proto.RegisterType((*MsgUpdateResolveAddressResponse)(nil), "dymensionxyz.dymension.dymns.MsgUpdateResolveAddressResponse")
	proto.RegisterType((*MsgUpdateDetails)(nil), "dymensionxyz.dymension.dymns.MsgUpdateDetails")
	proto.RegisterType((*MsgUpdateDetailsResponse)(nil), "dymensionxyz.dymension.dymns.MsgUpdateDetailsResponse")
	proto.RegisterType((*MsgPutAdsSellName)(nil), "dymensionxyz.dymension.dymns.MsgPutAdsSellName")
	proto.RegisterType((*MsgPutAdsSellNameResponse)(nil), "dymensionxyz.dymension.dymns.MsgPutAdsSellNameResponse")
	proto.RegisterType((*MsgCancelAdsSellName)(nil), "dymensionxyz.dymension.dymns.MsgCancelAdsSellName")
	proto.RegisterType((*MsgCancelAdsSellNameResponse)(nil), "dymensionxyz.dymension.dymns.MsgCancelAdsSellNameResponse")
	proto.RegisterType((*MsgPurchaseName)(nil), "dymensionxyz.dymension.dymns.MsgPurchaseName")
	proto.RegisterType((*MsgPurchaseNameResponse)(nil), "dymensionxyz.dymension.dymns.MsgPurchaseNameResponse")
	proto.RegisterType((*MsgOfferBuyName)(nil), "dymensionxyz.dymension.dymns.MsgOfferBuyName")
	proto.RegisterType((*MsgOfferBuyNameResponse)(nil), "dymensionxyz.dymension.dymns.MsgOfferBuyNameResponse")
	proto.RegisterType((*MsgCancelOfferBuyName)(nil), "dymensionxyz.dymension.dymns.MsgCancelOfferBuyName")
	proto.RegisterType((*MsgCancelOfferBuyNameResponse)(nil), "dymensionxyz.dymension.dymns.MsgCancelOfferBuyNameResponse")
	proto.RegisterType((*MsgAcceptOfferBuyName)(nil), "dymensionxyz.dymension.dymns.MsgAcceptOfferBuyName")
	proto.RegisterType((*MsgAcceptOfferBuyNameResponse)(nil), "dymensionxyz.dymension.dymns.MsgAcceptOfferBuyNameResponse")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/dymns/tx.proto", fileDescriptor_88dd2f81468013c2)
}

var fileDescriptor_88dd2f81468013c2 = []byte{
	// 1003 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xb7, 0xb7, 0x29, 0x4d, 0xde, 0xfe, 0x29, 0xb5, 0x8a, 0x36, 0xf5, 0xee, 0xba, 0x25, 0x08,
	0xa9, 0x5a, 0x69, 0x6d, 0xb5, 0x65, 0x01, 0x75, 0x01, 0xa9, 0x2d, 0x07, 0x56, 0xda, 0xb0, 0x55,
	0xb6, 0x5c, 0xb8, 0x44, 0x8e, 0x3d, 0x75, 0x2c, 0xd9, 0x33, 0x91, 0xc7, 0x4e, 0x1b, 0x84, 0x38,
	0x20, 0x21, 0x71, 0x42, 0x1c, 0x10, 0xe2, 0x33, 0x70, 0x42, 0xe2, 0x13, 0x70, 0x62, 0x8f, 0x7b,
	0xe4, 0x84, 0x50, 0x7b, 0xe0, 0x6b, 0xac, 0x3c, 0xe3, 0x4e, 0x3d, 0xb1, 0xb3, 0xb1, 0x73, 0x8a,
	0x67, 0xe6, 0xfd, 0xde, 0xef, 0xf7, 0x9e, 0xdf, 0x9b, 0x17, 0xc3, 0xfb, 0xee, 0x24, 0x44, 0x98,
	0xfa, 0x04, 0x9f, 0x4f, 0xbe, 0xb1, 0xc4, 0x22, 0x7d, 0xc2, 0xd4, 0x8a, 0xcf, 0xcd, 0x51, 0x44,
	0x62, 0xa2, 0xdd, 0xcf, 0x9b, 0x99, 0x62, 0x61, 0x32, 0x33, 0x7d, 0xdd, 0x23, 0x1e, 0x61, 0x86,
	0x56, 0xfa, 0xc4, 0x31, 0xba, 0xe1, 0x10, 0x1a, 0x12, 0x6a, 0x0d, 0x6c, 0x8a, 0xac, 0xf1, 0xce,
	0x00, 0xc5, 0xf6, 0x8e, 0xe5, 0x10, 0x1f, 0x67, 0xe7, 0x77, 0xb3, 0xf3, 0x90, 0x7a, 0xd6, 0x78,
	0x27, 0xfd, 0xe1, 0x07, 0x9d, 0xbf, 0x55, 0x58, 0xed, 0x52, 0xaf, 0x87, 0x3c, 0x9f, 0xc6, 0x28,
	0xfa, 0xd2, 0x0e, 0x91, 0xa6, 0x41, 0x03, 0xdb, 0x21, 0x6a, 0xab, 0x5b, 0xea, 0x76, 0xab, 0xc7,
	0x9e, 0xb5, 0x75, 0x58, 0x26, 0x67, 0x18, 0x45, 0xed, 0x1b, 0x6c, 0x93, 0x2f, 0x34, 0x1d, 0x9a,
	0x6e, 0x12, 0xd9, 0xb1, 0x4f, 0x70, 0x7b, 0x69, 0x4b, 0xdd, 0x5e, 0xea, 0x89, 0xb5, 0xf6, 0x05,
	0xac, 0x3a, 0x04, 0x9f, 0xfa, 0x51, 0xd8, 0x1f, 0xd9, 0x69, 0x10, 0x71, 0xbb, 0xb1, 0xa5, 0x6e,
	0xdf, 0xdc, 0xdd, 0x30, 0xb9, 0x18, 0x33, 0x15, 0x6b, 0x66, 0x62, 0xcd, 0x23, 0xe2, 0xe3, 0xc3,
	0xc6, 0xcb, 0x7f, 0x37, 0x95, 0xde, 0x9d, 0x0c, 0x77, 0xcc, 0x61, 0x5a, 0x1b, 0x56, 0x1c, 0x82,
	0x63, 0xdb, 0x89, 0xdb, 0xcb, 0x8c, 0xfd, 0x6a, 0xb9, 0x0f, 0xdf, 0xff, 0xff, 0xc7, 0x43, 0xae,
	0xa5, 0xb3, 0x01, 0x77, 0xa7, 0x02, 0xe9, 0x21, 0x3a, 0x22, 0x98, 0xa2, 0x8e, 0x0f, 0xeb, 0x5d,
	0xea, 0x9d, 0x44, 0x36, 0xa6, 0xa7, 0x28, 0x7a, 0x9e, 0x9a, 0xd3, 0xa1, 0x3f, 0xaa, 0x11, 0xe8,
	0x3d, 0x68, 0x61, 0x74, 0xd6, 0xe7, 0x27, 0x4b, 0xec, 0xa4, 0x89, 0xd1, 0x19, 0x73, 0x25, 0xa9,
	0x30, 0xe0, 0x7e, 0x19, 0x95, 0x90, 0x32, 0x84, 0xb7, 0xbb, 0xd4, 0x7b, 0x81, 0xe2, 0x23, 0x82,
	0xe3, 0x88, 0x04, 0x01, 0x8a, 0x6a, 0xc8, 0x30, 0x00, 0x1c, 0x81, 0xcb, 0x74, 0xe4, 0x76, 0x24,
	0x25, 0x3a, 0xb4, 0xa7, 0x99, 0x84, 0x8a, 0x3f, 0x55, 0x96, 0xac, 0xaf, 0x46, 0xae, 0x1d, 0xa7,
	0x69, 0x22, 0xc1, 0x18, 0x1d, 0xb8, 0x6e, 0x84, 0x28, 0x2d, 0x55, 0x23, 0xf3, 0xde, 0x98, 0xe6,
	0xd5, 0x36, 0xa0, 0xe9, 0x0c, 0x6d, 0x1f, 0xf7, 0x7d, 0x37, 0x53, 0xb5, 0xc2, 0xd6, 0x4f, 0xdd,
	0xf4, 0x88, 0x26, 0x83, 0x3e, 0x73, 0xd9, 0xe0, 0x47, 0x34, 0x19, 0xb0, 0x3a, 0x7b, 0x00, 0x10,
	0x71, 0xee, 0x7e, 0x4c, 0xb2, 0x57, 0xdb, 0xca, 0x76, 0x4e, 0xc8, 0xfe, 0x6a, 0x1a, 0x4c, 0x8e,
	0xa5, 0xf3, 0x2e, 0x6c, 0xce, 0x10, 0x2d, 0x02, 0xfb, 0x55, 0x65, 0xf9, 0xe5, 0x36, 0x9f, 0xa3,
	0xd8, 0xf6, 0x83, 0xc5, 0x22, 0xca, 0xd5, 0xdc, 0x92, 0x54, 0x73, 0xda, 0x7b, 0x70, 0xdb, 0x09,
	0x90, 0x1d, 0xf5, 0x59, 0x95, 0x7a, 0x94, 0x45, 0xd5, 0xec, 0xdd, 0x62, 0x9b, 0x47, 0x7c, 0xaf,
	0xa8, 0x9d, 0xbf, 0x0d, 0x49, 0x97, 0x10, 0xfd, 0x97, 0x0a, 0x6b, 0x5d, 0xea, 0x1d, 0x27, 0xf1,
	0x81, 0x4b, 0x5f, 0xa0, 0x20, 0xa8, 0xd9, 0x85, 0x9f, 0x40, 0x2b, 0xf4, 0x71, 0x7f, 0x14, 0xf9,
	0x0e, 0x62, 0x6a, 0x2b, 0xf4, 0x58, 0x33, 0xf4, 0xf1, 0x71, 0x0a, 0xd0, 0x3e, 0x06, 0xa0, 0x28,
	0x08, 0x32, 0xf8, 0xbc, 0x16, 0xed, 0xb5, 0x52, 0x63, 0x86, 0x94, 0xaa, 0xed, 0x1e, 0x6c, 0x14,
	0x42, 0x10, 0x01, 0x3e, 0x63, 0xfd, 0x77, 0x64, 0x63, 0x07, 0x05, 0x0b, 0x85, 0x58, 0xd2, 0x62,
	0x05, 0x6f, 0x82, 0xed, 0x3b, 0x76, 0xa3, 0x1d, 0x27, 0x91, 0x33, 0xb4, 0x29, 0x7a, 0x13, 0xd1,
	0x20, 0x99, 0x5c, 0x13, 0xb1, 0x85, 0xf6, 0x18, 0x96, 0xc9, 0xe9, 0x69, 0xd6, 0x5c, 0x15, 0xf2,
	0xc8, 0xad, 0x33, 0x7d, 0xcc, 0x45, 0x76, 0x11, 0xe5, 0xf9, 0x85, 0xb4, 0xdf, 0xf9, 0x6d, 0xfb,
	0x3c, 0xc5, 0x1c, 0x26, 0x93, 0x9a, 0xda, 0x1e, 0xc2, 0x5a, 0x5a, 0x51, 0x3e, 0x4e, 0x50, 0x9f,
	0xd1, 0x5e, 0xb7, 0xdb, 0xea, 0xd5, 0x01, 0x73, 0xfd, 0xd4, 0xbd, 0x8e, 0xa3, 0xb1, 0x70, 0x1c,
	0x1f, 0xb0, 0x38, 0xf2, 0x5a, 0xaf, 0xe2, 0x48, 0x9b, 0x5a, 0x08, 0xe0, 0xba, 0x57, 0x08, 0x27,
	0xee, 0x9c, 0xc0, 0x3b, 0xe2, 0xed, 0x48, 0x71, 0xce, 0xc6, 0x94, 0x87, 0x2b, 0x69, 0xd9, 0x84,
	0x07, 0xa5, 0x5e, 0x45, 0x66, 0x7f, 0x51, 0x19, 0xef, 0x81, 0xe3, 0xa0, 0x51, 0x5c, 0x83, 0xb7,
	0xa4, 0x9d, 0x3e, 0x03, 0x48, 0xdb, 0xc9, 0x66, 0xae, 0xaa, 0xd6, 0x41, 0xda, 0x81, 0x9c, 0x5c,
	0xaa, 0xd5, 0x27, 0x4c, 0x77, 0x51, 0x95, 0xc8, 0xa4, 0x0e, 0x4d, 0x4e, 0x84, 0xb8, 0xba, 0x66,
	0x4f, 0xac, 0x77, 0x7f, 0xbb, 0x09, 0x4b, 0x5d, 0xea, 0x69, 0x63, 0xb8, 0x25, 0xcd, 0xe7, 0x47,
	0xe6, 0x9b, 0xfe, 0x21, 0x98, 0x53, 0x53, 0x50, 0x7f, 0x5c, 0xcb, 0x5c, 0x64, 0x54, 0xd1, 0x7e,
	0x50, 0x61, 0xad, 0x38, 0x34, 0x77, 0xe7, 0xba, 0x2b, 0x60, 0xf4, 0xfd, 0xfa, 0x98, 0x9c, 0x8e,
	0x09, 0xdc, 0x96, 0x07, 0xa6, 0x39, 0xd7, 0x9d, 0x64, 0xaf, 0x7f, 0x58, 0xcf, 0x3e, 0x47, 0xfd,
	0x93, 0x0a, 0xeb, 0xa5, 0x53, 0x72, 0x7e, 0x52, 0xcb, 0x60, 0xfa, 0xa7, 0x0b, 0xc1, 0xe4, 0x5c,
	0xc8, 0xc3, 0xcd, 0xac, 0xe8, 0x31, 0xb3, 0xaf, 0x90, 0x8b, 0xf2, 0x21, 0xa5, 0x68, 0xdf, 0xc2,
	0x9d, 0xa9, 0x11, 0x65, 0xcd, 0xf5, 0x25, 0x03, 0xf4, 0x8f, 0x6a, 0x02, 0xa6, 0x8a, 0xb1, 0x38,
	0x41, 0xe6, 0x17, 0x63, 0x01, 0x53, 0xa1, 0x18, 0x67, 0xcf, 0x16, 0x25, 0x6d, 0x46, 0x69, 0xb4,
	0x3c, 0xaa, 0x10, 0xd2, 0xb5, 0x79, 0x85, 0x66, 0x2c, 0x1d, 0x1c, 0x8c, 0x57, 0xba, 0xd6, 0xe6,
	0xf3, 0xe6, 0xcd, 0x2b, 0xf0, 0x96, 0x5e, 0xab, 0x8a, 0xf6, 0xa3, 0x0a, 0x5a, 0xc9, 0x6d, 0xbe,
	0x57, 0x31, 0x89, 0x92, 0x88, 0x27, 0x0b, 0x80, 0xa6, 0xa4, 0x94, 0x5c, 0xf0, 0xf3, 0xa5, 0x14,
	0x41, 0x15, 0xa4, 0xcc, 0xbe, 0xb4, 0x3b, 0xca, 0xe1, 0xb3, 0x97, 0x17, 0x86, 0xfa, 0xea, 0xc2,
	0x50, 0xff, 0xbb, 0x30, 0xd4, 0x9f, 0x2f, 0x0d, 0xe5, 0xd5, 0xa5, 0xa1, 0xfc, 0x73, 0x69, 0x28,
	0x5f, 0xef, 0x7a, 0x7e, 0x3c, 0x4c, 0x06, 0xa6, 0x43, 0x42, 0x6b, 0xc6, 0xf7, 0xde, 0x78, 0xcf,
	0x3a, 0xbf, 0xfa, 0xe8, 0x9b, 0x8c, 0x10, 0x1d, 0xbc, 0xc5, 0xbe, 0xc5, 0xf6, 0x5e, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x9e, 0xda, 0x90, 0xc5, 0x21, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	RegisterName(ctx context.Context, in *MsgRegisterName, opts ...grpc.CallOption) (*MsgRegisterNameResponse, error)
	TransferOwnership(ctx context.Context, in *MsgTransferOwnership, opts ...grpc.CallOption) (*MsgTransferOwnershipResponse, error)
	SetController(ctx context.Context, in *MsgSetController, opts ...grpc.CallOption) (*MsgSetControllerResponse, error)
	UpdateResolveAddress(ctx context.Context, in *MsgUpdateResolveAddress, opts ...grpc.CallOption) (*MsgUpdateResolveAddressResponse, error)
	UpdateDetails(ctx context.Context, in *MsgUpdateDetails, opts ...grpc.CallOption) (*MsgUpdateDetailsResponse, error)
	PutAdsSellName(ctx context.Context, in *MsgPutAdsSellName, opts ...grpc.CallOption) (*MsgPutAdsSellNameResponse, error)
	CancelAdsSellName(ctx context.Context, in *MsgCancelAdsSellName, opts ...grpc.CallOption) (*MsgCancelAdsSellNameResponse, error)
	PurchaseName(ctx context.Context, in *MsgPurchaseName, opts ...grpc.CallOption) (*MsgPurchaseNameResponse, error)
	OfferBuyName(ctx context.Context, in *MsgOfferBuyName, opts ...grpc.CallOption) (*MsgOfferBuyNameResponse, error)
	CancelOfferBuyName(ctx context.Context, in *MsgCancelOfferBuyName, opts ...grpc.CallOption) (*MsgCancelOfferBuyNameResponse, error)
	AcceptOfferBuyName(ctx context.Context, in *MsgAcceptOfferBuyName, opts ...grpc.CallOption) (*MsgAcceptOfferBuyNameResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterName(ctx context.Context, in *MsgRegisterName, opts ...grpc.CallOption) (*MsgRegisterNameResponse, error) {
	out := new(MsgRegisterNameResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/RegisterName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferOwnership(ctx context.Context, in *MsgTransferOwnership, opts ...grpc.CallOption) (*MsgTransferOwnershipResponse, error) {
	out := new(MsgTransferOwnershipResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/TransferOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetController(ctx context.Context, in *MsgSetController, opts ...grpc.CallOption) (*MsgSetControllerResponse, error) {
	out := new(MsgSetControllerResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/SetController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateResolveAddress(ctx context.Context, in *MsgUpdateResolveAddress, opts ...grpc.CallOption) (*MsgUpdateResolveAddressResponse, error) {
	out := new(MsgUpdateResolveAddressResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/UpdateResolveAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDetails(ctx context.Context, in *MsgUpdateDetails, opts ...grpc.CallOption) (*MsgUpdateDetailsResponse, error) {
	out := new(MsgUpdateDetailsResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/UpdateDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PutAdsSellName(ctx context.Context, in *MsgPutAdsSellName, opts ...grpc.CallOption) (*MsgPutAdsSellNameResponse, error) {
	out := new(MsgPutAdsSellNameResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/PutAdsSellName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelAdsSellName(ctx context.Context, in *MsgCancelAdsSellName, opts ...grpc.CallOption) (*MsgCancelAdsSellNameResponse, error) {
	out := new(MsgCancelAdsSellNameResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/CancelAdsSellName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PurchaseName(ctx context.Context, in *MsgPurchaseName, opts ...grpc.CallOption) (*MsgPurchaseNameResponse, error) {
	out := new(MsgPurchaseNameResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/PurchaseName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OfferBuyName(ctx context.Context, in *MsgOfferBuyName, opts ...grpc.CallOption) (*MsgOfferBuyNameResponse, error) {
	out := new(MsgOfferBuyNameResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/OfferBuyName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelOfferBuyName(ctx context.Context, in *MsgCancelOfferBuyName, opts ...grpc.CallOption) (*MsgCancelOfferBuyNameResponse, error) {
	out := new(MsgCancelOfferBuyNameResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/CancelOfferBuyName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AcceptOfferBuyName(ctx context.Context, in *MsgAcceptOfferBuyName, opts ...grpc.CallOption) (*MsgAcceptOfferBuyNameResponse, error) {
	out := new(MsgAcceptOfferBuyNameResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Msg/AcceptOfferBuyName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	RegisterName(context.Context, *MsgRegisterName) (*MsgRegisterNameResponse, error)
	TransferOwnership(context.Context, *MsgTransferOwnership) (*MsgTransferOwnershipResponse, error)
	SetController(context.Context, *MsgSetController) (*MsgSetControllerResponse, error)
	UpdateResolveAddress(context.Context, *MsgUpdateResolveAddress) (*MsgUpdateResolveAddressResponse, error)
	UpdateDetails(context.Context, *MsgUpdateDetails) (*MsgUpdateDetailsResponse, error)
	PutAdsSellName(context.Context, *MsgPutAdsSellName) (*MsgPutAdsSellNameResponse, error)
	CancelAdsSellName(context.Context, *MsgCancelAdsSellName) (*MsgCancelAdsSellNameResponse, error)
	PurchaseName(context.Context, *MsgPurchaseName) (*MsgPurchaseNameResponse, error)
	OfferBuyName(context.Context, *MsgOfferBuyName) (*MsgOfferBuyNameResponse, error)
	CancelOfferBuyName(context.Context, *MsgCancelOfferBuyName) (*MsgCancelOfferBuyNameResponse, error)
	AcceptOfferBuyName(context.Context, *MsgAcceptOfferBuyName) (*MsgAcceptOfferBuyNameResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterName(ctx context.Context, req *MsgRegisterName) (*MsgRegisterNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterName not implemented")
}
func (*UnimplementedMsgServer) TransferOwnership(ctx context.Context, req *MsgTransferOwnership) (*MsgTransferOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnership not implemented")
}
func (*UnimplementedMsgServer) SetController(ctx context.Context, req *MsgSetController) (*MsgSetControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetController not implemented")
}
func (*UnimplementedMsgServer) UpdateResolveAddress(ctx context.Context, req *MsgUpdateResolveAddress) (*MsgUpdateResolveAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResolveAddress not implemented")
}
func (*UnimplementedMsgServer) UpdateDetails(ctx context.Context, req *MsgUpdateDetails) (*MsgUpdateDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDetails not implemented")
}
func (*UnimplementedMsgServer) PutAdsSellName(ctx context.Context, req *MsgPutAdsSellName) (*MsgPutAdsSellNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAdsSellName not implemented")
}
func (*UnimplementedMsgServer) CancelAdsSellName(ctx context.Context, req *MsgCancelAdsSellName) (*MsgCancelAdsSellNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAdsSellName not implemented")
}
func (*UnimplementedMsgServer) PurchaseName(ctx context.Context, req *MsgPurchaseName) (*MsgPurchaseNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseName not implemented")
}
func (*UnimplementedMsgServer) OfferBuyName(ctx context.Context, req *MsgOfferBuyName) (*MsgOfferBuyNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfferBuyName not implemented")
}
func (*UnimplementedMsgServer) CancelOfferBuyName(ctx context.Context, req *MsgCancelOfferBuyName) (*MsgCancelOfferBuyNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOfferBuyName not implemented")
}
func (*UnimplementedMsgServer) AcceptOfferBuyName(ctx context.Context, req *MsgAcceptOfferBuyName) (*MsgAcceptOfferBuyNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOfferBuyName not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/RegisterName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterName(ctx, req.(*MsgRegisterName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferOwnership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/TransferOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferOwnership(ctx, req.(*MsgTransferOwnership))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetController)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/SetController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetController(ctx, req.(*MsgSetController))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateResolveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateResolveAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateResolveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/UpdateResolveAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateResolveAddress(ctx, req.(*MsgUpdateResolveAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/UpdateDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDetails(ctx, req.(*MsgUpdateDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PutAdsSellName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPutAdsSellName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PutAdsSellName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/PutAdsSellName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PutAdsSellName(ctx, req.(*MsgPutAdsSellName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelAdsSellName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelAdsSellName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelAdsSellName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/CancelAdsSellName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelAdsSellName(ctx, req.(*MsgCancelAdsSellName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PurchaseName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPurchaseName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PurchaseName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/PurchaseName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PurchaseName(ctx, req.(*MsgPurchaseName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OfferBuyName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOfferBuyName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OfferBuyName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/OfferBuyName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OfferBuyName(ctx, req.(*MsgOfferBuyName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelOfferBuyName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelOfferBuyName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelOfferBuyName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/CancelOfferBuyName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelOfferBuyName(ctx, req.(*MsgCancelOfferBuyName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AcceptOfferBuyName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAcceptOfferBuyName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AcceptOfferBuyName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Msg/AcceptOfferBuyName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AcceptOfferBuyName(ctx, req.(*MsgAcceptOfferBuyName))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dymensionxyz.dymension.dymns.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterName",
			Handler:    _Msg_RegisterName_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _Msg_TransferOwnership_Handler,
		},
		{
			MethodName: "SetController",
			Handler:    _Msg_SetController_Handler,
		},
		{
			MethodName: "UpdateResolveAddress",
			Handler:    _Msg_UpdateResolveAddress_Handler,
		},
		{
			MethodName: "UpdateDetails",
			Handler:    _Msg_UpdateDetails_Handler,
		},
		{
			MethodName: "PutAdsSellName",
			Handler:    _Msg_PutAdsSellName_Handler,
		},
		{
			MethodName: "CancelAdsSellName",
			Handler:    _Msg_CancelAdsSellName_Handler,
		},
		{
			MethodName: "PurchaseName",
			Handler:    _Msg_PurchaseName_Handler,
		},
		{
			MethodName: "OfferBuyName",
			Handler:    _Msg_OfferBuyName_Handler,
		},
		{
			MethodName: "CancelOfferBuyName",
			Handler:    _Msg_CancelOfferBuyName_Handler,
		},
		{
			MethodName: "AcceptOfferBuyName",
			Handler:    _Msg_AcceptOfferBuyName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dymensionxyz/dymension/dymns/tx.proto",
}

func (m *MsgRegisterName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contact) > 0 {
		i -= len(m.Contact)
		copy(dAtA[i:], m.Contact)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contact)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.ConfirmPayment.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Duration != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferOwnership) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferOwnership) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferOwnership) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewOwner) > 0 {
		i -= len(m.NewOwner)
		copy(dAtA[i:], m.NewOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewOwner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferOwnershipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferOwnershipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferOwnershipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetController) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetController) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetController) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Controller) > 0 {
		i -= len(m.Controller)
		copy(dAtA[i:], m.Controller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Controller)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetControllerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetControllerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetControllerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateResolveAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateResolveAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateResolveAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResolveTo) > 0 {
		i -= len(m.ResolveTo)
		copy(dAtA[i:], m.ResolveTo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ResolveTo)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SubName) > 0 {
		i -= len(m.SubName)
		copy(dAtA[i:], m.SubName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Controller) > 0 {
		i -= len(m.Controller)
		copy(dAtA[i:], m.Controller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Controller)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateResolveAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateResolveAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateResolveAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClearConfigs {
		i--
		if m.ClearConfigs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Contact) > 0 {
		i -= len(m.Contact)
		copy(dAtA[i:], m.Contact)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contact)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Controller) > 0 {
		i -= len(m.Controller)
		copy(dAtA[i:], m.Controller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Controller)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPutAdsSellName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPutAdsSellName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPutAdsSellName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SellPrice != nil {
		{
			size, err := m.SellPrice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.MinPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPutAdsSellNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPutAdsSellNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPutAdsSellNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelAdsSellName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelAdsSellName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelAdsSellName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelAdsSellNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelAdsSellNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelAdsSellNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPurchaseName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPurchaseName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPurchaseName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Offer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPurchaseNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPurchaseNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPurchaseNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgOfferBuyName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOfferBuyName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOfferBuyName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Offer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ContinueOfferId) > 0 {
		i -= len(m.ContinueOfferId)
		copy(dAtA[i:], m.ContinueOfferId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContinueOfferId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOfferBuyNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOfferBuyNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOfferBuyNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OfferId) > 0 {
		i -= len(m.OfferId)
		copy(dAtA[i:], m.OfferId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OfferId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelOfferBuyName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelOfferBuyName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelOfferBuyName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OfferId) > 0 {
		i -= len(m.OfferId)
		copy(dAtA[i:], m.OfferId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OfferId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelOfferBuyNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelOfferBuyNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelOfferBuyNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAcceptOfferBuyName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptOfferBuyName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptOfferBuyName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MinAccept.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OfferId) > 0 {
		i -= len(m.OfferId)
		copy(dAtA[i:], m.OfferId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OfferId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAcceptOfferBuyNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptOfferBuyNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptOfferBuyNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Accepted {
		i--
		if m.Accepted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovTx(uint64(m.Duration))
	}
	l = m.ConfirmPayment.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Contact)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferOwnership) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransferOwnershipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetController) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Controller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetControllerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateResolveAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Controller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ResolveTo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateResolveAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Controller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Contact)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ClearConfigs {
		n += 2
	}
	return n
}

func (m *MsgUpdateDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPutAdsSellName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MinPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.SellPrice != nil {
		l = m.SellPrice.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPutAdsSellNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelAdsSellName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelAdsSellNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPurchaseName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Offer.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgPurchaseNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgOfferBuyName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContinueOfferId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Offer.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgOfferBuyNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OfferId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelOfferBuyName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OfferId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelOfferBuyNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAcceptOfferBuyName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OfferId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MinAccept.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAcceptOfferBuyNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Accepted {
		n += 2
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmPayment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConfirmPayment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferOwnership) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferOwnership: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferOwnership: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferOwnershipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferOwnershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferOwnershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetController) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetController: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetController: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetControllerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetControllerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetControllerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateResolveAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateResolveAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateResolveAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResolveTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateResolveAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateResolveAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateResolveAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearConfigs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearConfigs = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPutAdsSellName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPutAdsSellName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPutAdsSellName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SellPrice == nil {
				m.SellPrice = &types.Coin{}
			}
			if err := m.SellPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPutAdsSellNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPutAdsSellNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPutAdsSellNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelAdsSellName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelAdsSellName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelAdsSellName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelAdsSellNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelAdsSellNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelAdsSellNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPurchaseName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPurchaseName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPurchaseName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Offer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPurchaseNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPurchaseNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPurchaseNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOfferBuyName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOfferBuyName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOfferBuyName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinueOfferId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContinueOfferId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Offer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOfferBuyNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOfferBuyNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOfferBuyNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfferId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelOfferBuyName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelOfferBuyName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelOfferBuyName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfferId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelOfferBuyNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelOfferBuyNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelOfferBuyNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptOfferBuyName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptOfferBuyName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptOfferBuyName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfferId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAccept", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinAccept.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptOfferBuyNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptOfferBuyNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptOfferBuyNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accepted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Accepted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
