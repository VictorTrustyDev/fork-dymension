// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/dymns/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	Price  PriceParams  `protobuf:"bytes,1,opt,name=price,proto3" json:"price" yaml:"price"`
	Chains ChainsParams `protobuf:"bytes,2,opt,name=chains,proto3" json:"chains" yaml:"chains"`
	Misc   MiscParams   `protobuf:"bytes,3,opt,name=misc,proto3" json:"misc" yaml:"misc"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_6097ac65688a2490, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetPrice() PriceParams {
	if m != nil {
		return m.Price
	}
	return PriceParams{}
}

func (m *Params) GetChains() ChainsParams {
	if m != nil {
		return m.Chains
	}
	return ChainsParams{}
}

func (m *Params) GetMisc() MiscParams {
	if m != nil {
		return m.Misc
	}
	return MiscParams{}
}

type PriceParams struct {
	// Price of 1 letter Dym-Name, apply to first year
	Price_1Letter github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=price_1_letter,json=price1Letter,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"price_1_letter" yaml:"price_1_letter"`
	// Price of 2 letters Dym-Name, apply to first year
	Price_2Letters github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=price_2_letters,json=price2Letters,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"price_2_letters" yaml:"price_2_letters"`
	// Price of 3 letters Dym-Name, apply to first year
	Price_3Letters github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=price_3_letters,json=price3Letters,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"price_3_letters" yaml:"price_3_letters"`
	// Price of 4 letters Dym-Name, apply to first year
	Price_4Letters github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=price_4_letters,json=price4Letters,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"price_4_letters" yaml:"price_4_letters"`
	// Price of 5+ letters Dym-Name, apply to first year
	Price_5PlusLetters github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=price_5plus_letters,json=price5plusLetters,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"price_5plus_letters" yaml:"price_5plus_letters"`
	// Price extends yearly, after first year
	PriceExtends github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=price_extends,json=priceExtends,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"price_extends" yaml:"price_extends"`
	// Denom of the price setup
	PriceDenom string `protobuf:"bytes,7,opt,name=price_denom,json=priceDenom,proto3" json:"price_denom,omitempty" yaml:"price_denom"`
}

func (m *PriceParams) Reset()         { *m = PriceParams{} }
func (m *PriceParams) String() string { return proto.CompactTextString(m) }
func (*PriceParams) ProtoMessage()    {}
func (*PriceParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6097ac65688a2490, []int{1}
}
func (m *PriceParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceParams.Merge(m, src)
}
func (m *PriceParams) XXX_Size() int {
	return m.Size()
}
func (m *PriceParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceParams.DiscardUnknown(m)
}

var xxx_messageInfo_PriceParams proto.InternalMessageInfo

func (m *PriceParams) GetPriceDenom() string {
	if m != nil {
		return m.PriceDenom
	}
	return ""
}

type ChainsParams struct {
	AliasesByChainId   map[string]AliasesOfChainId `protobuf:"bytes,1,rep,name=aliases_by_chain_id,json=aliasesByChainId,proto3" json:"aliases_by_chain_id" yaml:"aliases_by_chain_id" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CoinType60ChainIds []string                    `protobuf:"bytes,2,rep,name=coin_type_60_chain_ids,json=coinType60ChainIds,proto3" json:"coin_type_60_chain_ids,omitempty" yaml:"coin_type_60_chain_ids"`
}

func (m *ChainsParams) Reset()         { *m = ChainsParams{} }
func (m *ChainsParams) String() string { return proto.CompactTextString(m) }
func (*ChainsParams) ProtoMessage()    {}
func (*ChainsParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6097ac65688a2490, []int{2}
}
func (m *ChainsParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainsParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainsParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainsParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainsParams.Merge(m, src)
}
func (m *ChainsParams) XXX_Size() int {
	return m.Size()
}
func (m *ChainsParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainsParams.DiscardUnknown(m)
}

var xxx_messageInfo_ChainsParams proto.InternalMessageInfo

func (m *ChainsParams) GetAliasesByChainId() map[string]AliasesOfChainId {
	if m != nil {
		return m.AliasesByChainId
	}
	return nil
}

func (m *ChainsParams) GetCoinType60ChainIds() []string {
	if m != nil {
		return m.CoinType60ChainIds
	}
	return nil
}

// AliasesOfChainId defines the multiple-aliases of a chain id.
type AliasesOfChainId struct {
	Aliases []string `protobuf:"bytes,1,rep,name=aliases,proto3" json:"aliases,omitempty" yaml:"aliases"`
}

func (m *AliasesOfChainId) Reset()         { *m = AliasesOfChainId{} }
func (m *AliasesOfChainId) String() string { return proto.CompactTextString(m) }
func (*AliasesOfChainId) ProtoMessage()    {}
func (*AliasesOfChainId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6097ac65688a2490, []int{3}
}
func (m *AliasesOfChainId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AliasesOfChainId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AliasesOfChainId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AliasesOfChainId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliasesOfChainId.Merge(m, src)
}
func (m *AliasesOfChainId) XXX_Size() int {
	return m.Size()
}
func (m *AliasesOfChainId) XXX_DiscardUnknown() {
	xxx_messageInfo_AliasesOfChainId.DiscardUnknown(m)
}

var xxx_messageInfo_AliasesOfChainId proto.InternalMessageInfo

func (m *AliasesOfChainId) GetAliases() []string {
	if m != nil {
		return m.Aliases
	}
	return nil
}

type MiscParams struct {
	BeginEpochHookIdentifier string `protobuf:"bytes,1,opt,name=begin_epoch_hook_identifier,json=beginEpochHookIdentifier,proto3" json:"begin_epoch_hook_identifier,omitempty" yaml:"begin_epoch_hook_identifier"`
	EndEpochHookIdentifier   string `protobuf:"bytes,2,opt,name=end_epoch_hook_identifier,json=endEpochHookIdentifier,proto3" json:"end_epoch_hook_identifier,omitempty" yaml:"end_epoch_hook_identifier"`
	// Number of days that the former owner of an expired Dym-Name can renew it before completely lost.
	DaysGracePeriod int32 `protobuf:"varint,3,opt,name=days_grace_period,json=daysGracePeriod,proto3" json:"days_grace_period,omitempty" yaml:"days_grace_period"`
	// Number of days of an SO from created to expired.
	DaysSellOrderDuration int32 `protobuf:"varint,4,opt,name=days_sell_order_duration,json=daysSellOrderDuration,proto3" json:"days_sell_order_duration,omitempty" yaml:"days_sell_order_duration"`
	// Number of days to keep history version of closed SO before it is deleted,
	// based on expiry date and block time.
	DaysPreservedClosedSellOrder int32 `protobuf:"varint,5,opt,name=days_preserved_closed_sell_order,json=daysPreservedClosedSellOrder,proto3" json:"days_preserved_closed_sell_order,omitempty" yaml:"days_preserved_closed_sell_order"`
	// Number of days, if the SO expiry date enter the range before expiry of Dym-Name, the SO can not be placed.
	// This help reduce the risk of new owner of Dym-Name not able to renew it on time.
	DaysProhibitSell int32 `protobuf:"varint,6,opt,name=days_prohibit_sell,json=daysProhibitSell,proto3" json:"days_prohibit_sell,omitempty" yaml:"days_prohibit_sell"`
}

func (m *MiscParams) Reset()         { *m = MiscParams{} }
func (m *MiscParams) String() string { return proto.CompactTextString(m) }
func (*MiscParams) ProtoMessage()    {}
func (*MiscParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6097ac65688a2490, []int{4}
}
func (m *MiscParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MiscParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MiscParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MiscParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiscParams.Merge(m, src)
}
func (m *MiscParams) XXX_Size() int {
	return m.Size()
}
func (m *MiscParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MiscParams.DiscardUnknown(m)
}

var xxx_messageInfo_MiscParams proto.InternalMessageInfo

func (m *MiscParams) GetBeginEpochHookIdentifier() string {
	if m != nil {
		return m.BeginEpochHookIdentifier
	}
	return ""
}

func (m *MiscParams) GetEndEpochHookIdentifier() string {
	if m != nil {
		return m.EndEpochHookIdentifier
	}
	return ""
}

func (m *MiscParams) GetDaysGracePeriod() int32 {
	if m != nil {
		return m.DaysGracePeriod
	}
	return 0
}

func (m *MiscParams) GetDaysSellOrderDuration() int32 {
	if m != nil {
		return m.DaysSellOrderDuration
	}
	return 0
}

func (m *MiscParams) GetDaysPreservedClosedSellOrder() int32 {
	if m != nil {
		return m.DaysPreservedClosedSellOrder
	}
	return 0
}

func (m *MiscParams) GetDaysProhibitSell() int32 {
	if m != nil {
		return m.DaysProhibitSell
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "dymensionxyz.dymension.dymns.Params")
	proto.RegisterType((*PriceParams)(nil), "dymensionxyz.dymension.dymns.PriceParams")
	proto.RegisterType((*ChainsParams)(nil), "dymensionxyz.dymension.dymns.ChainsParams")
	proto.RegisterMapType((map[string]AliasesOfChainId)(nil), "dymensionxyz.dymension.dymns.ChainsParams.AliasesByChainIdEntry")
	proto.RegisterType((*AliasesOfChainId)(nil), "dymensionxyz.dymension.dymns.AliasesOfChainId")
	proto.RegisterType((*MiscParams)(nil), "dymensionxyz.dymension.dymns.MiscParams")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/dymns/params.proto", fileDescriptor_6097ac65688a2490)
}

var fileDescriptor_6097ac65688a2490 = []byte{
	// 919 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcf, 0x4f, 0xdc, 0x46,
	0x14, 0xc7, 0x59, 0x96, 0x25, 0x62, 0x20, 0x09, 0x19, 0x7e, 0x68, 0x43, 0xc9, 0x1a, 0x4d, 0xab,
	0x94, 0xf4, 0x87, 0x1d, 0x76, 0x69, 0x52, 0xe5, 0x94, 0x1a, 0x68, 0x40, 0xa5, 0x0a, 0x9d, 0xb6,
	0x87, 0x56, 0x95, 0x2c, 0xaf, 0x3d, 0xd9, 0x1d, 0xad, 0xd7, 0x63, 0x79, 0x0c, 0xc2, 0x55, 0xcf,
	0xbd, 0x55, 0xaa, 0xd4, 0xff, 0xa7, 0xe7, 0x1c, 0x73, 0xac, 0x7a, 0xb0, 0x2a, 0xf8, 0x0f, 0x7c,
	0xe8, 0xb9, 0xf2, 0x9b, 0x59, 0xc7, 0xc0, 0xb2, 0x2a, 0x52, 0x4e, 0x78, 0xde, 0xfb, 0xbe, 0xcf,
	0x77, 0xfd, 0xc4, 0x7c, 0x65, 0xf4, 0xc8, 0x4f, 0x87, 0x2c, 0x94, 0x5c, 0x84, 0xa7, 0xe9, 0xcf,
	0x56, 0x79, 0x28, 0x9e, 0x42, 0x69, 0x45, 0x6e, 0xec, 0x0e, 0xa5, 0x19, 0xc5, 0x22, 0x11, 0x78,
	0xbd, 0x2a, 0x35, 0xcb, 0x83, 0x09, 0xd2, 0xb5, 0xe5, 0x9e, 0xe8, 0x09, 0x10, 0x5a, 0xc5, 0x93,
	0x9a, 0x59, 0x6b, 0x79, 0x42, 0x0e, 0x85, 0xb4, 0xba, 0xae, 0x64, 0xd6, 0xc9, 0x56, 0x97, 0x25,
	0xee, 0x96, 0xe5, 0x09, 0x1e, 0xaa, 0x3e, 0xf9, 0x6d, 0x1a, 0xcd, 0x1e, 0x81, 0x09, 0xfe, 0x1e,
	0x35, 0xa2, 0x98, 0x7b, 0xac, 0x59, 0xdb, 0xa8, 0x6d, 0xce, 0xb7, 0x1f, 0x99, 0x93, 0xec, 0xcc,
	0xa3, 0x42, 0xaa, 0x26, 0xed, 0xe5, 0xd7, 0x99, 0x31, 0x95, 0x67, 0xc6, 0x42, 0xea, 0x0e, 0x83,
	0x67, 0x04, 0x28, 0x84, 0x2a, 0x1a, 0xfe, 0x01, 0xcd, 0x7a, 0x7d, 0x97, 0x87, 0xb2, 0x39, 0x0d,
	0xdc, 0x8f, 0x26, 0x73, 0x77, 0x40, 0xab, 0xc1, 0x2b, 0x1a, 0x7c, 0x5b, 0x81, 0x15, 0x87, 0x50,
	0x0d, 0xc4, 0xdf, 0xa0, 0x99, 0x21, 0x97, 0x5e, 0xb3, 0x0e, 0xe0, 0xcd, 0xc9, 0xe0, 0xaf, 0xb9,
	0xf4, 0x34, 0x76, 0x49, 0x63, 0xe7, 0x15, 0xb6, 0x60, 0x10, 0x0a, 0x28, 0xf2, 0x6f, 0x03, 0xcd,
	0x57, 0x5e, 0x0d, 0x0f, 0xd1, 0x1d, 0x78, 0x0d, 0x67, 0xcb, 0x09, 0x58, 0x92, 0xb0, 0x18, 0xb6,
	0x33, 0x67, 0xbf, 0x28, 0x10, 0x7f, 0x67, 0xc6, 0xc3, 0x1e, 0x4f, 0xfa, 0xc7, 0x5d, 0xd3, 0x13,
	0x43, 0x4b, 0xaf, 0x5a, 0xfd, 0xf9, 0x54, 0xfa, 0x03, 0x2b, 0x49, 0x23, 0x26, 0xcd, 0x83, 0x30,
	0xc9, 0x33, 0x63, 0xa5, 0xb2, 0x9c, 0x92, 0x46, 0xe8, 0x02, 0x14, 0xb6, 0x0e, 0xe1, 0x88, 0x23,
	0x74, 0x57, 0x09, 0xda, 0x5a, 0xa0, 0xb6, 0x36, 0x67, 0xef, 0xdf, 0xd8, 0x6f, 0xb5, 0xea, 0x57,
	0xe2, 0x08, 0xbd, 0x0d, 0x95, 0xb6, 0x32, 0x94, 0x6f, 0x1d, 0x3b, 0xa5, 0x63, 0xfd, 0x5d, 0x38,
	0x76, 0x2e, 0x3b, 0x76, 0xae, 0x38, 0x6e, 0x97, 0x8e, 0x33, 0xef, 0xc2, 0x71, 0xfb, 0xb2, 0xe3,
	0xf6, 0xc8, 0xf1, 0x17, 0xb4, 0xa4, 0x24, 0x9f, 0x45, 0xc1, 0xb1, 0x2c, 0x5d, 0x1b, 0xe0, 0x7a,
	0x78, 0x63, 0xd7, 0xb5, 0xaa, 0xeb, 0x05, 0x24, 0xa1, 0xf7, 0xa0, 0x0a, 0xc5, 0x91, 0xfb, 0x00,
	0xa9, 0x9f, 0xe3, 0xb0, 0xd3, 0x84, 0x85, 0xbe, 0x6c, 0xce, 0x82, 0xef, 0x97, 0x37, 0xf6, 0x5d,
	0xae, 0xfa, 0x6a, 0xd8, 0xe8, 0x1f, 0x68, 0x4f, 0x1d, 0xf1, 0x53, 0x34, 0xaf, 0xfa, 0x3e, 0x0b,
	0xc5, 0xb0, 0x79, 0x0b, 0xac, 0x56, 0xf3, 0xcc, 0xc0, 0xd5, 0x61, 0x68, 0x12, 0x8a, 0xe0, 0xb4,
	0x0b, 0x87, 0x5f, 0xeb, 0x68, 0xa1, 0x7a, 0xf7, 0xf0, 0x1f, 0x35, 0xb4, 0xe4, 0x06, 0xdc, 0x95,
	0x4c, 0x3a, 0xdd, 0xd4, 0x81, 0x2b, 0xe7, 0x70, 0xbf, 0x59, 0xdb, 0xa8, 0x6f, 0xce, 0xb7, 0x9f,
	0xff, 0xff, 0x5b, 0x6c, 0x7e, 0xa1, 0x28, 0x76, 0x0a, 0xd5, 0x03, 0x7f, 0x2f, 0x4c, 0xe2, 0xd4,
	0x26, 0xfa, 0x12, 0xea, 0x6d, 0x8e, 0xb1, 0x22, 0x74, 0xd1, 0xbd, 0x34, 0x8a, 0x07, 0x68, 0xb5,
	0x48, 0x2f, 0xa7, 0xd8, 0x8b, 0xf3, 0xe4, 0x71, 0xa9, 0x2d, 0xee, 0x49, 0x7d, 0x73, 0xce, 0x7e,
	0x7a, 0x96, 0x19, 0x78, 0x47, 0xf0, 0xf0, 0xbb, 0x34, 0x62, 0x4f, 0x1e, 0xeb, 0x31, 0x99, 0x67,
	0xc6, 0x03, 0x9d, 0x21, 0x63, 0xa7, 0x09, 0xc5, 0xde, 0x95, 0xa1, 0x35, 0x89, 0x56, 0xc6, 0xfe,
	0x76, 0xbc, 0x88, 0xea, 0x03, 0x96, 0xaa, 0x28, 0xa0, 0xc5, 0x23, 0xde, 0x45, 0x8d, 0x13, 0x37,
	0x38, 0x66, 0x3a, 0xe4, 0xcc, 0xc9, 0xeb, 0xd1, 0xd4, 0x97, 0xaf, 0x34, 0x95, 0xaa, 0xe1, 0x67,
	0xd3, 0x9f, 0xd7, 0xc8, 0x73, 0xb4, 0x78, 0xb9, 0x8d, 0x3f, 0x41, 0xb7, 0xf4, 0x26, 0x60, 0xfd,
	0x73, 0x36, 0xce, 0x33, 0xe3, 0xce, 0x85, 0xc5, 0x11, 0x3a, 0x92, 0x90, 0x3f, 0x67, 0x10, 0x7a,
	0x9b, 0x76, 0x98, 0xa1, 0xf7, 0xba, 0xac, 0xc7, 0x43, 0x87, 0x45, 0xc2, 0xeb, 0x3b, 0x7d, 0x21,
	0x06, 0x0e, 0xf7, 0x59, 0x98, 0xf0, 0x57, 0xbc, 0xcc, 0xb3, 0x87, 0x79, 0x66, 0x10, 0x05, 0x9c,
	0x20, 0x26, 0xb4, 0x09, 0xdd, 0xbd, 0xa2, 0xb9, 0x2f, 0xc4, 0xe0, 0xa0, 0x6c, 0x61, 0x07, 0xdd,
	0x67, 0xa1, 0x7f, 0x8d, 0x89, 0x0a, 0xb1, 0x0f, 0xf2, 0xcc, 0xd8, 0x50, 0x26, 0xd7, 0x4a, 0x09,
	0x5d, 0x65, 0xa1, 0x3f, 0xce, 0x60, 0x1f, 0xdd, 0xf3, 0xdd, 0x54, 0x3a, 0xbd, 0xd8, 0xf5, 0x98,
	0x13, 0xb1, 0x98, 0x0b, 0x1f, 0xb2, 0xaa, 0x61, 0xaf, 0xe7, 0x99, 0xd1, 0x54, 0xe0, 0x2b, 0x12,
	0x42, 0xef, 0x16, 0xb5, 0x17, 0x45, 0xe9, 0x08, 0x2a, 0xf8, 0x27, 0xd4, 0x04, 0x99, 0x64, 0x41,
	0xe0, 0x88, 0xd8, 0x67, 0xb1, 0xe3, 0x1f, 0xc7, 0x6e, 0xc2, 0x45, 0x08, 0x51, 0xd4, 0xb0, 0xdf,
	0xcf, 0x33, 0xc3, 0xa8, 0x00, 0xc7, 0x28, 0x09, 0x5d, 0x29, 0x5a, 0xdf, 0xb2, 0x20, 0x78, 0x59,
	0x34, 0x76, 0x75, 0x1d, 0x4b, 0xb4, 0x01, 0x33, 0x51, 0xcc, 0x24, 0x8b, 0x4f, 0x98, 0xef, 0x78,
	0x81, 0x90, 0xcc, 0xaf, 0x40, 0x20, 0x7a, 0x1a, 0xf6, 0xc7, 0x79, 0x66, 0x7c, 0x58, 0x71, 0x99,
	0x30, 0x41, 0xe8, 0x7a, 0x21, 0x39, 0x1a, 0x29, 0x76, 0x40, 0x50, 0x9a, 0xe3, 0xaf, 0x10, 0xd6,
	0x08, 0xd1, 0xe7, 0x5d, 0x9e, 0xc0, 0x28, 0x24, 0x4d, 0xc3, 0x7e, 0x90, 0x67, 0xc6, 0xfd, 0x0b,
	0x36, 0x15, 0x0d, 0xa1, 0x8b, 0x0a, 0xac, 0x6a, 0x05, 0xd1, 0x3e, 0x7c, 0x7d, 0xd6, 0xaa, 0xbd,
	0x39, 0x6b, 0xd5, 0xfe, 0x39, 0x6b, 0xd5, 0x7e, 0x3f, 0x6f, 0x4d, 0xbd, 0x39, 0x6f, 0x4d, 0xfd,
	0x75, 0xde, 0x9a, 0xfa, 0xb1, 0x5d, 0x09, 0xab, 0x6b, 0x3e, 0x5c, 0x4e, 0x3a, 0xd6, 0xa9, 0xfe,
	0x7a, 0x81, 0xf0, 0xea, 0xce, 0xc2, 0x97, 0x46, 0xe7, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80,
	0x21, 0xc3, 0x05, 0xea, 0x08, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Misc.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Chains.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PriceParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceDenom) > 0 {
		i -= len(m.PriceDenom)
		copy(dAtA[i:], m.PriceDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.PriceDenom)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.PriceExtends.Size()
		i -= size
		if _, err := m.PriceExtends.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Price_5PlusLetters.Size()
		i -= size
		if _, err := m.Price_5PlusLetters.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Price_4Letters.Size()
		i -= size
		if _, err := m.Price_4Letters.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Price_3Letters.Size()
		i -= size
		if _, err := m.Price_3Letters.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Price_2Letters.Size()
		i -= size
		if _, err := m.Price_2Letters.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Price_1Letter.Size()
		i -= size
		if _, err := m.Price_1Letter.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ChainsParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainsParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainsParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoinType60ChainIds) > 0 {
		for iNdEx := len(m.CoinType60ChainIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CoinType60ChainIds[iNdEx])
			copy(dAtA[i:], m.CoinType60ChainIds[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.CoinType60ChainIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AliasesByChainId) > 0 {
		for k := range m.AliasesByChainId {
			v := m.AliasesByChainId[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintParams(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintParams(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AliasesOfChainId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AliasesOfChainId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AliasesOfChainId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Aliases) > 0 {
		for iNdEx := len(m.Aliases) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Aliases[iNdEx])
			copy(dAtA[i:], m.Aliases[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.Aliases[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MiscParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MiscParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MiscParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DaysProhibitSell != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DaysProhibitSell))
		i--
		dAtA[i] = 0x30
	}
	if m.DaysPreservedClosedSellOrder != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DaysPreservedClosedSellOrder))
		i--
		dAtA[i] = 0x28
	}
	if m.DaysSellOrderDuration != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DaysSellOrderDuration))
		i--
		dAtA[i] = 0x20
	}
	if m.DaysGracePeriod != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DaysGracePeriod))
		i--
		dAtA[i] = 0x18
	}
	if len(m.EndEpochHookIdentifier) > 0 {
		i -= len(m.EndEpochHookIdentifier)
		copy(dAtA[i:], m.EndEpochHookIdentifier)
		i = encodeVarintParams(dAtA, i, uint64(len(m.EndEpochHookIdentifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BeginEpochHookIdentifier) > 0 {
		i -= len(m.BeginEpochHookIdentifier)
		copy(dAtA[i:], m.BeginEpochHookIdentifier)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BeginEpochHookIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Chains.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Misc.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *PriceParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price_1Letter.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Price_2Letters.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Price_3Letters.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Price_4Letters.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Price_5PlusLetters.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.PriceExtends.Size()
	n += 1 + l + sovParams(uint64(l))
	l = len(m.PriceDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *ChainsParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AliasesByChainId) > 0 {
		for k, v := range m.AliasesByChainId {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovParams(uint64(len(k))) + 1 + l + sovParams(uint64(l))
			n += mapEntrySize + 1 + sovParams(uint64(mapEntrySize))
		}
	}
	if len(m.CoinType60ChainIds) > 0 {
		for _, s := range m.CoinType60ChainIds {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *AliasesOfChainId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Aliases) > 0 {
		for _, s := range m.Aliases {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *MiscParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BeginEpochHookIdentifier)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.EndEpochHookIdentifier)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.DaysGracePeriod != 0 {
		n += 1 + sovParams(uint64(m.DaysGracePeriod))
	}
	if m.DaysSellOrderDuration != 0 {
		n += 1 + sovParams(uint64(m.DaysSellOrderDuration))
	}
	if m.DaysPreservedClosedSellOrder != 0 {
		n += 1 + sovParams(uint64(m.DaysPreservedClosedSellOrder))
	}
	if m.DaysProhibitSell != 0 {
		n += 1 + sovParams(uint64(m.DaysProhibitSell))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Chains.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Misc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price_1Letter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price_1Letter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price_2Letters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price_2Letters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price_3Letters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price_3Letters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price_4Letters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price_4Letters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price_5PlusLetters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price_5PlusLetters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceExtends", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PriceExtends.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainsParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainsParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainsParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasesByChainId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AliasesByChainId == nil {
				m.AliasesByChainId = make(map[string]AliasesOfChainId)
			}
			var mapkey string
			mapvalue := &AliasesOfChainId{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthParams
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthParams
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthParams
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthParams
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AliasesOfChainId{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipParams(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthParams
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AliasesByChainId[mapkey] = *mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType60ChainIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinType60ChainIds = append(m.CoinType60ChainIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AliasesOfChainId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AliasesOfChainId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AliasesOfChainId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aliases", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aliases = append(m.Aliases, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MiscParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MiscParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MiscParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginEpochHookIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginEpochHookIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndEpochHookIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndEpochHookIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaysGracePeriod", wireType)
			}
			m.DaysGracePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DaysGracePeriod |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaysSellOrderDuration", wireType)
			}
			m.DaysSellOrderDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DaysSellOrderDuration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaysPreservedClosedSellOrder", wireType)
			}
			m.DaysPreservedClosedSellOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DaysPreservedClosedSellOrder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaysProhibitSell", wireType)
			}
			m.DaysProhibitSell = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DaysProhibitSell |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
