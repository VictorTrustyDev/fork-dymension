// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/dymns/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// price defines setting for pricing of Dym-Name and price-related parameters.
	Price PriceParams `protobuf:"bytes,1,opt,name=price,proto3" json:"price" yaml:"price"`
	// chains defines setting for prioritized aliases mapping.
	Chains ChainsParams `protobuf:"bytes,2,opt,name=chains,proto3" json:"chains" yaml:"chains"`
	// misc is group of miscellaneous parameters.
	Misc MiscParams `protobuf:"bytes,3,opt,name=misc,proto3" json:"misc" yaml:"misc"`
	// preserved_registration contains setting for preserved registration Dym-Names,
	// allow to be registered by specific account within a short period of time.
	// This list will be cleared after the expiration epoch to save space.
	// This is useful as when go-live, the team can reserve some Dym-Names for specific purpose
	// and for well-known entities, not to be registered/stolen by others.
	PreservedRegistration PreservedRegistrationParams `protobuf:"bytes,4,opt,name=preserved_registration,json=preservedRegistration,proto3" json:"preserved_registration" yaml:"preserved_registration"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_6097ac65688a2490, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetPrice() PriceParams {
	if m != nil {
		return m.Price
	}
	return PriceParams{}
}

func (m *Params) GetChains() ChainsParams {
	if m != nil {
		return m.Chains
	}
	return ChainsParams{}
}

func (m *Params) GetMisc() MiscParams {
	if m != nil {
		return m.Misc
	}
	return MiscParams{}
}

func (m *Params) GetPreservedRegistration() PreservedRegistrationParams {
	if m != nil {
		return m.PreservedRegistration
	}
	return PreservedRegistrationParams{}
}

// PriceParams defines the pricing of Dym-Name and price-related parameters.
type PriceParams struct {
	// name_price_steps holds the price steps configuration for Dym-Name registration, apply to the first year.
	// The price of Dym-Name is calculated based on the number of letters.
	// The first element is the price of 1 letter Dym-Name, the last element is the price of N+ letters Dym-Name.
	// Minimum steps count allowed is 4, for 1/2/3/4+ letters Dym-Name.
	NamePriceSteps []github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,rep,name=name_price_steps,json=namePriceSteps,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"name_price_steps" yaml:"name_price_steps"`
	// alias_price_steps holds the price steps configuration for Alias registration, one off payment.
	// The price of Alias is calculated based on the number of letters.
	// The first element is the price of 1 letter Alias, the last element is the price of N+ letters Alias.
	// Minimum steps count allowed is 4, for 1/2/3/4+ letters Alias.
	AliasPriceSteps []github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,rep,name=alias_price_steps,json=aliasPriceSteps,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"alias_price_steps" yaml:"alias_price_steps"`
	// price_extends is used to extends Dym-Name yearly, after the one-off payment for the first year.
	PriceExtends github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=price_extends,json=priceExtends,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"price_extends" yaml:"price_extends"`
	// price_denom is the required denomination of the pricing setup and trading policy.
	PriceDenom string `protobuf:"bytes,4,opt,name=price_denom,json=priceDenom,proto3" json:"price_denom,omitempty" yaml:"price_denom"`
	// min_offer_price is minimum price allowed to place an offer.
	// Mostly used to prevent spamming and abusing store with low price offers,
	// so the value should not be so low.
	MinOfferPrice github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=min_offer_price,json=minOfferPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_offer_price" yaml:"min_offer_price"`
}

func (m *PriceParams) Reset()         { *m = PriceParams{} }
func (m *PriceParams) String() string { return proto.CompactTextString(m) }
func (*PriceParams) ProtoMessage()    {}
func (*PriceParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6097ac65688a2490, []int{1}
}
func (m *PriceParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceParams.Merge(m, src)
}
func (m *PriceParams) XXX_Size() int {
	return m.Size()
}
func (m *PriceParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceParams.DiscardUnknown(m)
}

var xxx_messageInfo_PriceParams proto.InternalMessageInfo

func (m *PriceParams) GetPriceDenom() string {
	if m != nil {
		return m.PriceDenom
	}
	return ""
}

// ChainsParams defines setting for prioritized aliases mapping.
type ChainsParams struct {
	// aliases_of_chain_ids is set of chain-ids and their corresponding aliases,
	// used for UX improvement like we can do my-name@cosmos instead of my-name@cosmoshub-4.
	//
	// This list is prioritized over Roll-App aliases
	// the reason is to allow the community able to have control to fixes the potential problems with the aliases.
	AliasesOfChainIds []AliasesOfChainId `protobuf:"bytes,1,rep,name=aliases_of_chain_ids,json=aliasesOfChainIds,proto3" json:"aliases_of_chain_ids" yaml:"aliases_of_chain_ids"`
}

func (m *ChainsParams) Reset()         { *m = ChainsParams{} }
func (m *ChainsParams) String() string { return proto.CompactTextString(m) }
func (*ChainsParams) ProtoMessage()    {}
func (*ChainsParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6097ac65688a2490, []int{2}
}
func (m *ChainsParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainsParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainsParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainsParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainsParams.Merge(m, src)
}
func (m *ChainsParams) XXX_Size() int {
	return m.Size()
}
func (m *ChainsParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainsParams.DiscardUnknown(m)
}

var xxx_messageInfo_ChainsParams proto.InternalMessageInfo

func (m *ChainsParams) GetAliasesOfChainIds() []AliasesOfChainId {
	if m != nil {
		return m.AliasesOfChainIds
	}
	return nil
}

// AliasesOfChainId defines the multiple-aliases of a chain id.
type AliasesOfChainId struct {
	// chain_id which owned the aliases.
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	// aliases is a set of aliases of the chain id for UX improvement,
	// like we can do my-name@cosmos instead of my-name@cosmoshub-4
	Aliases []string `protobuf:"bytes,2,rep,name=aliases,proto3" json:"aliases,omitempty" yaml:"aliases"`
}

func (m *AliasesOfChainId) Reset()         { *m = AliasesOfChainId{} }
func (m *AliasesOfChainId) String() string { return proto.CompactTextString(m) }
func (*AliasesOfChainId) ProtoMessage()    {}
func (*AliasesOfChainId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6097ac65688a2490, []int{3}
}
func (m *AliasesOfChainId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AliasesOfChainId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AliasesOfChainId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AliasesOfChainId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliasesOfChainId.Merge(m, src)
}
func (m *AliasesOfChainId) XXX_Size() int {
	return m.Size()
}
func (m *AliasesOfChainId) XXX_DiscardUnknown() {
	xxx_messageInfo_AliasesOfChainId.DiscardUnknown(m)
}

var xxx_messageInfo_AliasesOfChainId proto.InternalMessageInfo

func (m *AliasesOfChainId) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *AliasesOfChainId) GetAliases() []string {
	if m != nil {
		return m.Aliases
	}
	return nil
}

// MiscParams defines group of miscellaneous parameters.
type MiscParams struct {
	// begin_epoch_hook_identifier is the identifier of the begin epoch hook.
	BeginEpochHookIdentifier string `protobuf:"bytes,1,opt,name=begin_epoch_hook_identifier,json=beginEpochHookIdentifier,proto3" json:"begin_epoch_hook_identifier,omitempty" yaml:"begin_epoch_hook_identifier"`
	// end_epoch_hook_identifier is the identifier of the end epoch hook.
	EndEpochHookIdentifier string `protobuf:"bytes,2,opt,name=end_epoch_hook_identifier,json=endEpochHookIdentifier,proto3" json:"end_epoch_hook_identifier,omitempty" yaml:"end_epoch_hook_identifier"`
	// grace_period_duration is the amount of time that the former owner of an expired Dym-Name
	// can renew it before completely lost.
	GracePeriodDuration time.Duration `protobuf:"bytes,3,opt,name=grace_period_duration,json=gracePeriodDuration,proto3,stdduration" json:"grace_period_duration" yaml:"grace_period_duration"`
	// sell_order_duration is the amount of time of a Sell-Order from created to expired.
	SellOrderDuration time.Duration `protobuf:"bytes,4,opt,name=sell_order_duration,json=sellOrderDuration,proto3,stdduration" json:"sell_order_duration" yaml:"sell_order_duration"`
	// preserved_closed_sell_order_duration is the amount of time
	// to keep closed Sell-Orders as historical records before it is deleted,
	// based on expiry date and block time.
	PreservedClosedSellOrderDuration time.Duration `protobuf:"bytes,5,opt,name=preserved_closed_sell_order_duration,json=preservedClosedSellOrderDuration,proto3,stdduration" json:"preserved_closed_sell_order_duration" yaml:"preserved_closed_sell_order_duration"`
	// prohibit_sell_duration is the amount of time,
	// if the Sell-Order expiration date enters the range before expiry of Dym-Name, the Sell-Order can not be placed.
	// The logic also applies when the owner accepts a Buy-Order, the Dym-Name can not be sold.
	// This is to prevent the new owner of Dym-Name to sell it before the Dym-Name expires,
	// therefore help reduce the risk of new owner of Dym-Name not able to renew it on time.
	//
	// For example:
	//
	//	Let say the configured Sell-Order duration is 7 days, the prohibit sell duration is 30 days and you owns a Dym-Name.
	//	We assume your Dym-Name expiration date is Mar 9th, 2024. then 30 days before, from Feb 9th, 2024,
	//	the Dym-Name is prohibited to be sold.
	//	We have some cases:
	//	- If the you places a Sell Order at Feb 2nd, 2024, the Sell-Order supposed to be expired at Feb 9th, 2024,
	//	which is within the prohibited range, so the Sell-Order can not be placed.
	//	- If the you places a Sell Order at Feb 1st, 2024, the Sell-Order supposed to be expired at Feb 8th, 2024,
	//	which is outside the prohibited range, so the Sell-Order can be placed.
	//	- If someone put an offer (Buy-Order) at Feb 1st, 2024, and you have some days to accept it,
	//	exactly from the moment order placed, until end of Feb 8th, 2024, which is outside the prohibited range.
	//	After that, from Feb 9th, it is prohibited to accept the Buy-Order.
	ProhibitSellDuration time.Duration `protobuf:"bytes,6,opt,name=prohibit_sell_duration,json=prohibitSellDuration,proto3,stdduration" json:"prohibit_sell_duration" yaml:"prohibit_sell_duration"`
	// enable_trading_name is the flag to enable trading of Dym-Name.
	// To be used to stop trading of Dym-Name when needed.
	EnableTradingName bool `protobuf:"varint,7,opt,name=enable_trading_name,json=enableTradingName,proto3" json:"enable_trading_name,omitempty"`
	// enable_trading_alias is the flag to enable trading of Alias.
	// To be used in the future when Alias trading implementation is ready
	// or disable trading of Alias when needed.
	EnableTradingAlias bool `protobuf:"varint,8,opt,name=enable_trading_alias,json=enableTradingAlias,proto3" json:"enable_trading_alias,omitempty"`
}

func (m *MiscParams) Reset()         { *m = MiscParams{} }
func (m *MiscParams) String() string { return proto.CompactTextString(m) }
func (*MiscParams) ProtoMessage()    {}
func (*MiscParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6097ac65688a2490, []int{4}
}
func (m *MiscParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MiscParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MiscParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MiscParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiscParams.Merge(m, src)
}
func (m *MiscParams) XXX_Size() int {
	return m.Size()
}
func (m *MiscParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MiscParams.DiscardUnknown(m)
}

var xxx_messageInfo_MiscParams proto.InternalMessageInfo

func (m *MiscParams) GetBeginEpochHookIdentifier() string {
	if m != nil {
		return m.BeginEpochHookIdentifier
	}
	return ""
}

func (m *MiscParams) GetEndEpochHookIdentifier() string {
	if m != nil {
		return m.EndEpochHookIdentifier
	}
	return ""
}

func (m *MiscParams) GetGracePeriodDuration() time.Duration {
	if m != nil {
		return m.GracePeriodDuration
	}
	return 0
}

func (m *MiscParams) GetSellOrderDuration() time.Duration {
	if m != nil {
		return m.SellOrderDuration
	}
	return 0
}

func (m *MiscParams) GetPreservedClosedSellOrderDuration() time.Duration {
	if m != nil {
		return m.PreservedClosedSellOrderDuration
	}
	return 0
}

func (m *MiscParams) GetProhibitSellDuration() time.Duration {
	if m != nil {
		return m.ProhibitSellDuration
	}
	return 0
}

func (m *MiscParams) GetEnableTradingName() bool {
	if m != nil {
		return m.EnableTradingName
	}
	return false
}

func (m *MiscParams) GetEnableTradingAlias() bool {
	if m != nil {
		return m.EnableTradingAlias
	}
	return false
}

// PreservedRegistrationParams contains setting for preserved registration Dym-Names,
// allow to be registered by specific account within a short period of time.
// This list will be cleared after the expiration epoch to save space.
// This is useful as when go-live, the team can preserved some Dym-Names for specific purpose
// and for well-known entities, not to be registered/stolen by others.
type PreservedRegistrationParams struct {
	// expiration_epoch is the epoch that the preserved registration period will be expired.
	ExpirationEpoch int64 `protobuf:"varint,1,opt,name=expiration_epoch,json=expirationEpoch,proto3" json:"expiration_epoch,omitempty" yaml:"expiration_epoch"`
	// preserved_dym_names is the list of preserved Dym-Names.
	// Each record defines the Dym-Name and the whitelisted address that can register the preserved Dym-Name.
	// It is allowed for one Dym-Name to have multiple whitelisted addresses and vice versa.
	// This list will be cleared after the expiration epoch to save space.
	PreservedDymNames []PreservedDymName `protobuf:"bytes,2,rep,name=preserved_dym_names,json=preservedDymNames,proto3" json:"preserved_dym_names" yaml:"preserved_dym_names"`
}

func (m *PreservedRegistrationParams) Reset()         { *m = PreservedRegistrationParams{} }
func (m *PreservedRegistrationParams) String() string { return proto.CompactTextString(m) }
func (*PreservedRegistrationParams) ProtoMessage()    {}
func (*PreservedRegistrationParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6097ac65688a2490, []int{5}
}
func (m *PreservedRegistrationParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreservedRegistrationParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreservedRegistrationParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreservedRegistrationParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreservedRegistrationParams.Merge(m, src)
}
func (m *PreservedRegistrationParams) XXX_Size() int {
	return m.Size()
}
func (m *PreservedRegistrationParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PreservedRegistrationParams.DiscardUnknown(m)
}

var xxx_messageInfo_PreservedRegistrationParams proto.InternalMessageInfo

func (m *PreservedRegistrationParams) GetExpirationEpoch() int64 {
	if m != nil {
		return m.ExpirationEpoch
	}
	return 0
}

func (m *PreservedRegistrationParams) GetPreservedDymNames() []PreservedDymName {
	if m != nil {
		return m.PreservedDymNames
	}
	return nil
}

// PreservedDymName defines one preserved Dym-Name and the whitelisted address that can register the preserved dym-name.
// If want to reserve a Dym-Name for multiple addresses, add multiple PreservedDymName with the same Dym-Name.
// If want to reserve multiple Dym-Names for one address, add multiple PreservedDymName with the same address.
type PreservedDymName struct {
	// dym_name is name of the preserved Dym-Name that enable whitelisted for.
	DymName string `protobuf:"bytes,1,opt,name=dym_name,json=dymName,proto3" json:"dym_name,omitempty" yaml:"dym_name"`
	// whitelisted_address is the only address that can register the preserved Dym-Name.
	WhitelistedAddress string `protobuf:"bytes,2,opt,name=whitelisted_address,json=whitelistedAddress,proto3" json:"whitelisted_address,omitempty" yaml:"whitelisted_address"`
}

func (m *PreservedDymName) Reset()         { *m = PreservedDymName{} }
func (m *PreservedDymName) String() string { return proto.CompactTextString(m) }
func (*PreservedDymName) ProtoMessage()    {}
func (*PreservedDymName) Descriptor() ([]byte, []int) {
	return fileDescriptor_6097ac65688a2490, []int{6}
}
func (m *PreservedDymName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreservedDymName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreservedDymName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreservedDymName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreservedDymName.Merge(m, src)
}
func (m *PreservedDymName) XXX_Size() int {
	return m.Size()
}
func (m *PreservedDymName) XXX_DiscardUnknown() {
	xxx_messageInfo_PreservedDymName.DiscardUnknown(m)
}

var xxx_messageInfo_PreservedDymName proto.InternalMessageInfo

func (m *PreservedDymName) GetDymName() string {
	if m != nil {
		return m.DymName
	}
	return ""
}

func (m *PreservedDymName) GetWhitelistedAddress() string {
	if m != nil {
		return m.WhitelistedAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "dymensionxyz.dymension.dymns.Params")
	proto.RegisterType((*PriceParams)(nil), "dymensionxyz.dymension.dymns.PriceParams")
	proto.RegisterType((*ChainsParams)(nil), "dymensionxyz.dymension.dymns.ChainsParams")
	proto.RegisterType((*AliasesOfChainId)(nil), "dymensionxyz.dymension.dymns.AliasesOfChainId")
	proto.RegisterType((*MiscParams)(nil), "dymensionxyz.dymension.dymns.MiscParams")
	proto.RegisterType((*PreservedRegistrationParams)(nil), "dymensionxyz.dymension.dymns.PreservedRegistrationParams")
	proto.RegisterType((*PreservedDymName)(nil), "dymensionxyz.dymension.dymns.PreservedDymName")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/dymns/params.proto", fileDescriptor_6097ac65688a2490)
}

var fileDescriptor_6097ac65688a2490 = []byte{
	// 1056 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xcf, 0x53, 0xe4, 0x44,
	0x14, 0xc7, 0x09, 0xbf, 0x69, 0x60, 0x81, 0x9e, 0x01, 0xb3, 0xb0, 0x4e, 0xa8, 0x76, 0xa5, 0xc0,
	0x1f, 0x89, 0xcb, 0x1e, 0xb6, 0xf4, 0xb6, 0x59, 0x76, 0x6b, 0xb1, 0x54, 0xb0, 0x57, 0x0f, 0x7a,
	0x49, 0x65, 0xd2, 0x3d, 0x33, 0x5d, 0x4c, 0xd2, 0x31, 0x1d, 0x58, 0x66, 0x8f, 0x96, 0x7f, 0x80,
	0xa5, 0x65, 0xe9, 0xd9, 0x8b, 0x7f, 0x88, 0x97, 0x3d, 0xee, 0xd1, 0xf2, 0x30, 0x5a, 0x70, 0xf3,
	0x38, 0x7f, 0x81, 0x95, 0xee, 0xce, 0x4c, 0x08, 0xc3, 0x4c, 0x71, 0x82, 0xee, 0xf7, 0xde, 0xe7,
	0xfb, 0xd2, 0xfd, 0xde, 0xeb, 0x01, 0x7b, 0xa4, 0x13, 0xd2, 0x48, 0x30, 0x1e, 0x9d, 0x77, 0x5e,
	0x39, 0xfd, 0x45, 0xf6, 0x5f, 0x24, 0x9c, 0xd8, 0x4f, 0xfc, 0x50, 0xd8, 0x71, 0xc2, 0x53, 0x0e,
	0xef, 0x15, 0x5d, 0xed, 0xfe, 0xc2, 0x96, 0xae, 0x9b, 0xd5, 0x26, 0x6f, 0x72, 0xe9, 0xe8, 0x64,
	0xff, 0xa9, 0x98, 0xcd, 0x5a, 0xc0, 0x45, 0xc8, 0x85, 0x53, 0xf7, 0x05, 0x75, 0xce, 0x1e, 0xd4,
	0x69, 0xea, 0x3f, 0x70, 0x02, 0xce, 0xa2, 0xdc, 0xde, 0xe4, 0xbc, 0xd9, 0xa6, 0x8e, 0x5c, 0xd5,
	0x4f, 0x1b, 0x0e, 0x39, 0x4d, 0xfc, 0x34, 0xa3, 0xca, 0x1d, 0xf4, 0xc7, 0x14, 0x98, 0x3d, 0x96,
	0x49, 0xc0, 0xaf, 0xc1, 0x4c, 0x9c, 0xb0, 0x80, 0x9a, 0xc6, 0xb6, 0xb1, 0xbb, 0xb8, 0xbf, 0x67,
	0x8f, 0x4a, 0xc7, 0x3e, 0xce, 0x5c, 0x55, 0xa4, 0x5b, 0x7d, 0xdd, 0xb5, 0x26, 0x7a, 0x5d, 0x6b,
	0xa9, 0xe3, 0x87, 0xed, 0x4f, 0x90, 0xa4, 0x20, 0xac, 0x68, 0xf0, 0x1b, 0x30, 0x1b, 0xb4, 0x7c,
	0x16, 0x09, 0x73, 0x52, 0x72, 0xdf, 0x1b, 0xcd, 0x7d, 0x22, 0x7d, 0x35, 0x78, 0x5d, 0x83, 0x97,
	0x15, 0x58, 0x71, 0x10, 0xd6, 0x40, 0xf8, 0x25, 0x98, 0x0e, 0x99, 0x08, 0xcc, 0x29, 0x09, 0xde,
	0x1d, 0x0d, 0xfe, 0x9c, 0x89, 0x40, 0x63, 0x2b, 0x1a, 0xbb, 0xa8, 0xb0, 0x19, 0x03, 0x61, 0x89,
	0x82, 0xbf, 0x1a, 0x60, 0x23, 0x4e, 0xa8, 0xa0, 0xc9, 0x19, 0x25, 0x5e, 0x42, 0x9b, 0x4c, 0xa4,
	0xea, 0xc0, 0xcc, 0x69, 0xa9, 0xf2, 0xf1, 0xb8, 0x63, 0xd1, 0xb1, 0xb8, 0x10, 0xaa, 0x65, 0xdf,
	0xd5, 0xb2, 0x6f, 0xe7, 0xc7, 0x34, 0x4c, 0x06, 0xe1, 0xf5, 0x78, 0x18, 0x03, 0xfd, 0x34, 0x0d,
	0x16, 0x0b, 0x87, 0x0e, 0x05, 0x58, 0x8d, 0xfc, 0x90, 0x7a, 0xf2, 0x94, 0x3d, 0x91, 0xd2, 0x58,
	0x98, 0xc6, 0xf6, 0xd4, 0xee, 0x82, 0x7b, 0x98, 0xe9, 0xfc, 0xdd, 0xb5, 0x76, 0x9a, 0x2c, 0x6d,
	0x9d, 0xd6, 0xed, 0x80, 0x87, 0x8e, 0x2e, 0x13, 0xf5, 0xe7, 0x43, 0x41, 0x4e, 0x9c, 0xb4, 0x13,
	0x53, 0x61, 0x1f, 0x46, 0x69, 0xaf, 0x6b, 0xbd, 0xa5, 0x32, 0x2a, 0xf3, 0x10, 0xbe, 0x93, 0x6d,
	0x49, 0xd5, 0x17, 0xd9, 0x06, 0x3c, 0x03, 0x6b, 0x7e, 0x9b, 0xf9, 0xe2, 0x8a, 0xea, 0xa4, 0x54,
	0xfd, 0xf4, 0xd6, 0xaa, 0xa6, 0x52, 0xbd, 0x06, 0x44, 0x78, 0x45, 0xee, 0x15, 0x74, 0x4f, 0xc0,
	0xb2, 0x72, 0xa0, 0xe7, 0x29, 0x8d, 0x88, 0x90, 0x57, 0xbe, 0xe0, 0x3e, 0xbb, 0xb5, 0x66, 0xb5,
	0x50, 0xa2, 0x39, 0x0c, 0xe1, 0x25, 0xb9, 0x7e, 0xaa, 0x96, 0xf0, 0x11, 0x58, 0x54, 0x76, 0x42,
	0x23, 0x1e, 0xca, 0x7b, 0x5f, 0x70, 0x37, 0x7a, 0x5d, 0x0b, 0x16, 0x83, 0xa5, 0x11, 0x61, 0x20,
	0x57, 0x07, 0xd9, 0x02, 0xc6, 0x60, 0x25, 0x64, 0x91, 0xc7, 0x1b, 0x0d, 0x9a, 0xa8, 0x0f, 0x32,
	0x67, 0x64, 0xf0, 0xf3, 0x5b, 0xe7, 0xb9, 0x91, 0x97, 0xe6, 0x15, 0x1c, 0xc2, 0xcb, 0x21, 0x8b,
	0x8e, 0xb2, 0x0d, 0x79, 0x38, 0xe8, 0x17, 0x03, 0x2c, 0x15, 0x3b, 0x06, 0xfe, 0x60, 0x80, 0xaa,
	0x3c, 0x3c, 0x2a, 0x3c, 0xde, 0xf0, 0x64, 0xa3, 0x78, 0x8c, 0xa8, 0xd2, 0x58, 0xdc, 0xb7, 0x47,
	0x57, 0xef, 0x63, 0x15, 0x79, 0xd4, 0x90, 0xcc, 0x43, 0xe2, 0xbe, 0xa3, 0x4b, 0x76, 0xab, 0x70,
	0x55, 0x25, 0x32, 0xc2, 0x6b, 0x7e, 0x29, 0x4c, 0xa0, 0x18, 0xac, 0x96, 0x59, 0xd0, 0x06, 0xf3,
	0x79, 0x90, 0x1c, 0x31, 0x0b, 0x6e, 0xa5, 0xd7, 0xb5, 0x56, 0x0a, 0xad, 0xed, 0x31, 0x82, 0xf0,
	0x5c, 0xa0, 0xfd, 0x3f, 0x00, 0x73, 0x1a, 0xac, 0x2b, 0x0c, 0xf6, 0xba, 0xd6, 0x9d, 0x2b, 0x89,
	0x20, 0x9c, 0xbb, 0xa0, 0x3f, 0x67, 0x01, 0x18, 0xb4, 0x38, 0xa4, 0x60, 0xab, 0x4e, 0x9b, 0x2c,
	0xf2, 0x68, 0xcc, 0x83, 0x96, 0xd7, 0xe2, 0xfc, 0xc4, 0x63, 0x84, 0x46, 0x29, 0x6b, 0x30, 0x9a,
	0x68, 0xfd, 0x9d, 0x5e, 0xd7, 0x42, 0x0a, 0x38, 0xc2, 0x19, 0x61, 0x53, 0x5a, 0x9f, 0x66, 0xc6,
	0xe7, 0x9c, 0x9f, 0x1c, 0xf6, 0x4d, 0xd0, 0x03, 0x77, 0x69, 0x44, 0x6e, 0x10, 0x99, 0x94, 0x22,
	0xf7, 0x7b, 0x5d, 0x6b, 0x5b, 0x89, 0xdc, 0xe8, 0x8a, 0xf0, 0x06, 0x8d, 0xc8, 0x30, 0x81, 0x97,
	0x60, 0xbd, 0x99, 0xf8, 0x01, 0xf5, 0x62, 0x9a, 0x30, 0x4e, 0xbc, 0x7c, 0x7c, 0xeb, 0x99, 0x77,
	0xd7, 0x56, 0xf3, 0xdd, 0xce, 0xe7, 0xbb, 0x7d, 0xa0, 0x1d, 0xdc, 0x5d, 0x7d, 0x75, 0xf7, 0x94,
	0xf6, 0x50, 0x0a, 0xfa, 0xed, 0x1f, 0xcb, 0xc0, 0x15, 0x69, 0x3b, 0x96, 0xa6, 0x3c, 0x1c, 0x7e,
	0x07, 0x2a, 0x82, 0xb6, 0xdb, 0x1e, 0x4f, 0x08, 0x4d, 0x06, 0xb2, 0xd3, 0xe3, 0x64, 0x77, 0xb4,
	0xec, 0xa6, 0x92, 0x1d, 0xc2, 0x50, 0xa2, 0x6b, 0x99, 0xe5, 0x28, 0x33, 0xf4, 0x25, 0x7f, 0x37,
	0xc0, 0xfd, 0xc1, 0x50, 0x0c, 0xda, 0x5c, 0x50, 0xe2, 0x0d, 0x4b, 0x62, 0x66, 0x5c, 0x12, 0x8f,
	0x74, 0x12, 0xef, 0x97, 0x27, 0xed, 0xcd, 0x50, 0x95, 0xd5, 0x76, 0xdf, 0xf5, 0x89, 0xf4, 0x7c,
	0x71, 0x2d, 0xc9, 0x57, 0xd9, 0xfb, 0xc0, 0x5b, 0xac, 0xce, 0x52, 0x85, 0xe9, 0x67, 0x35, 0x3b,
	0x2e, 0xab, 0xbd, 0xf2, 0xfc, 0x1f, 0x86, 0x51, 0x79, 0x54, 0x73, 0x63, 0x96, 0x40, 0x5f, 0xdb,
	0x06, 0x15, 0x1a, 0xf9, 0xf5, 0x36, 0xf5, 0xd2, 0xc4, 0x27, 0x2c, 0x6a, 0x7a, 0xd9, 0x78, 0x36,
	0xe7, 0xb6, 0x8d, 0xdd, 0x79, 0xbc, 0xa6, 0x4c, 0x5f, 0x29, 0xcb, 0x17, 0x7e, 0x48, 0xe1, 0x47,
	0xa0, 0x5a, 0xf2, 0x97, 0xdd, 0x62, 0xce, 0xcb, 0x00, 0x78, 0x25, 0x40, 0xb6, 0x2b, 0xfa, 0xcf,
	0x00, 0x5b, 0x23, 0x9e, 0x30, 0xf8, 0x0c, 0xac, 0xd2, 0xf3, 0x98, 0xa9, 0x3d, 0x55, 0xcb, 0xb2,
	0x97, 0xa6, 0xdc, 0xad, 0xc1, 0x33, 0x52, 0xf6, 0x40, 0x78, 0x65, 0xb0, 0x25, 0x8b, 0x1c, 0x7e,
	0x6f, 0x80, 0xca, 0xe0, 0x56, 0x48, 0x27, 0x94, 0x5f, 0xa2, 0x1a, 0x7d, 0xec, 0x94, 0xea, 0x27,
	0x78, 0xd0, 0x09, 0xb3, 0xef, 0x74, 0xd1, 0xd5, 0x9a, 0x1b, 0x02, 0x46, 0x78, 0x2d, 0x2e, 0x45,
	0x09, 0xf4, 0xb3, 0x01, 0x56, 0xcb, 0xac, 0x6c, 0x4a, 0xe5, 0x51, 0xd7, 0xa7, 0x54, 0x6e, 0x41,
	0x78, 0x8e, 0x68, 0xff, 0x23, 0x50, 0x79, 0xd9, 0x62, 0x29, 0x6d, 0x33, 0x91, 0x52, 0xe2, 0xf9,
	0x84, 0x24, 0x54, 0x08, 0xdd, 0xfb, 0xb5, 0x41, 0x52, 0x43, 0x9c, 0x10, 0x86, 0x85, 0xdd, 0xc7,
	0x6a, 0xd3, 0xfd, 0xec, 0xf5, 0x45, 0xcd, 0x78, 0x73, 0x51, 0x33, 0xfe, 0xbd, 0xa8, 0x19, 0x3f,
	0x5e, 0xd6, 0x26, 0xde, 0x5c, 0xd6, 0x26, 0xfe, 0xba, 0xac, 0x4d, 0x7c, 0xbb, 0x5f, 0x78, 0x3d,
	0x6e, 0xf8, 0x55, 0x79, 0xf6, 0xd0, 0x39, 0xd7, 0x3f, 0x2d, 0xe5, 0x6b, 0x52, 0x9f, 0x95, 0x65,
	0xf8, 0xf0, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x05, 0x6e, 0x42, 0x58, 0x87, 0x0a, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PreservedRegistration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Misc.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Chains.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PriceParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinOfferPrice.Size()
		i -= size
		if _, err := m.MinOfferPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.PriceDenom) > 0 {
		i -= len(m.PriceDenom)
		copy(dAtA[i:], m.PriceDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.PriceDenom)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.PriceExtends.Size()
		i -= size
		if _, err := m.PriceExtends.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.AliasPriceSteps) > 0 {
		for iNdEx := len(m.AliasPriceSteps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.AliasPriceSteps[iNdEx].Size()
				i -= size
				if _, err := m.AliasPriceSteps[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NamePriceSteps) > 0 {
		for iNdEx := len(m.NamePriceSteps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.NamePriceSteps[iNdEx].Size()
				i -= size
				if _, err := m.NamePriceSteps[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChainsParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainsParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainsParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AliasesOfChainIds) > 0 {
		for iNdEx := len(m.AliasesOfChainIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AliasesOfChainIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AliasesOfChainId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AliasesOfChainId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AliasesOfChainId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Aliases) > 0 {
		for iNdEx := len(m.Aliases) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Aliases[iNdEx])
			copy(dAtA[i:], m.Aliases[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.Aliases[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MiscParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MiscParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MiscParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableTradingAlias {
		i--
		if m.EnableTradingAlias {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.EnableTradingName {
		i--
		if m.EnableTradingName {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	n5, err5 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.ProhibitSellDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ProhibitSellDuration):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintParams(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x32
	n6, err6 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.PreservedClosedSellOrderDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.PreservedClosedSellOrderDuration):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintParams(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x2a
	n7, err7 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.SellOrderDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.SellOrderDuration):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintParams(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x22
	n8, err8 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.GracePeriodDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.GracePeriodDuration):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintParams(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x1a
	if len(m.EndEpochHookIdentifier) > 0 {
		i -= len(m.EndEpochHookIdentifier)
		copy(dAtA[i:], m.EndEpochHookIdentifier)
		i = encodeVarintParams(dAtA, i, uint64(len(m.EndEpochHookIdentifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BeginEpochHookIdentifier) > 0 {
		i -= len(m.BeginEpochHookIdentifier)
		copy(dAtA[i:], m.BeginEpochHookIdentifier)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BeginEpochHookIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PreservedRegistrationParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreservedRegistrationParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreservedRegistrationParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreservedDymNames) > 0 {
		for iNdEx := len(m.PreservedDymNames) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PreservedDymNames[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ExpirationEpoch != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ExpirationEpoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PreservedDymName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreservedDymName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreservedDymName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WhitelistedAddress) > 0 {
		i -= len(m.WhitelistedAddress)
		copy(dAtA[i:], m.WhitelistedAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.WhitelistedAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DymName) > 0 {
		i -= len(m.DymName)
		copy(dAtA[i:], m.DymName)
		i = encodeVarintParams(dAtA, i, uint64(len(m.DymName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Chains.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Misc.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.PreservedRegistration.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *PriceParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NamePriceSteps) > 0 {
		for _, e := range m.NamePriceSteps {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.AliasPriceSteps) > 0 {
		for _, e := range m.AliasPriceSteps {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.PriceExtends.Size()
	n += 1 + l + sovParams(uint64(l))
	l = len(m.PriceDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.MinOfferPrice.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *ChainsParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AliasesOfChainIds) > 0 {
		for _, e := range m.AliasesOfChainIds {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *AliasesOfChainId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if len(m.Aliases) > 0 {
		for _, s := range m.Aliases {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *MiscParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BeginEpochHookIdentifier)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.EndEpochHookIdentifier)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.GracePeriodDuration)
	n += 1 + l + sovParams(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.SellOrderDuration)
	n += 1 + l + sovParams(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.PreservedClosedSellOrderDuration)
	n += 1 + l + sovParams(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ProhibitSellDuration)
	n += 1 + l + sovParams(uint64(l))
	if m.EnableTradingName {
		n += 2
	}
	if m.EnableTradingAlias {
		n += 2
	}
	return n
}

func (m *PreservedRegistrationParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpirationEpoch != 0 {
		n += 1 + sovParams(uint64(m.ExpirationEpoch))
	}
	if len(m.PreservedDymNames) > 0 {
		for _, e := range m.PreservedDymNames {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *PreservedDymName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DymName)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.WhitelistedAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Chains.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Misc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreservedRegistration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PreservedRegistration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamePriceSteps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.NamePriceSteps = append(m.NamePriceSteps, v)
			if err := m.NamePriceSteps[len(m.NamePriceSteps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasPriceSteps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.AliasPriceSteps = append(m.AliasPriceSteps, v)
			if err := m.AliasPriceSteps[len(m.AliasPriceSteps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceExtends", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PriceExtends.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOfferPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinOfferPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainsParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainsParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainsParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasesOfChainIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliasesOfChainIds = append(m.AliasesOfChainIds, AliasesOfChainId{})
			if err := m.AliasesOfChainIds[len(m.AliasesOfChainIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AliasesOfChainId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AliasesOfChainId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AliasesOfChainId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aliases", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aliases = append(m.Aliases, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MiscParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MiscParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MiscParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginEpochHookIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginEpochHookIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndEpochHookIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndEpochHookIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GracePeriodDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.GracePeriodDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrderDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.SellOrderDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreservedClosedSellOrderDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.PreservedClosedSellOrderDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProhibitSellDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.ProhibitSellDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTradingName", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableTradingName = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTradingAlias", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableTradingAlias = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreservedRegistrationParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreservedRegistrationParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreservedRegistrationParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationEpoch", wireType)
			}
			m.ExpirationEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationEpoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreservedDymNames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreservedDymNames = append(m.PreservedDymNames, PreservedDymName{})
			if err := m.PreservedDymNames[len(m.PreservedDymNames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreservedDymName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreservedDymName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreservedDymName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DymName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DymName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
