// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/dymns/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// Price of Dym-Name and related parameters.
	Price PriceParams `protobuf:"bytes,1,opt,name=price,proto3" json:"price" yaml:"price"`
	// Chains related parameters.
	Chains ChainsParams `protobuf:"bytes,2,opt,name=chains,proto3" json:"chains" yaml:"chains"`
	// Misc parameters.
	Misc MiscParams `protobuf:"bytes,3,opt,name=misc,proto3" json:"misc" yaml:"misc"`
	// Preserved registration parameters.
	PreservedRegistration PreservedRegistrationParams `protobuf:"bytes,4,opt,name=preserved_registration,json=preservedRegistration,proto3" json:"preserved_registration" yaml:"preserved_registration"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_6097ac65688a2490, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetPrice() PriceParams {
	if m != nil {
		return m.Price
	}
	return PriceParams{}
}

func (m *Params) GetChains() ChainsParams {
	if m != nil {
		return m.Chains
	}
	return ChainsParams{}
}

func (m *Params) GetMisc() MiscParams {
	if m != nil {
		return m.Misc
	}
	return MiscParams{}
}

func (m *Params) GetPreservedRegistration() PreservedRegistrationParams {
	if m != nil {
		return m.PreservedRegistration
	}
	return PreservedRegistrationParams{}
}

type PriceParams struct {
	// Price of 1 letter Dym-Name, apply to first year
	Price_1Letter github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=price_1_letter,json=price1Letter,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"price_1_letter" yaml:"price_1_letter"`
	// Price of 2 letters Dym-Name, apply to first year
	Price_2Letters github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=price_2_letters,json=price2Letters,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"price_2_letters" yaml:"price_2_letters"`
	// Price of 3 letters Dym-Name, apply to first year
	Price_3Letters github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=price_3_letters,json=price3Letters,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"price_3_letters" yaml:"price_3_letters"`
	// Price of 4 letters Dym-Name, apply to first year
	Price_4Letters github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=price_4_letters,json=price4Letters,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"price_4_letters" yaml:"price_4_letters"`
	// Price of 5+ letters Dym-Name, apply to first year
	Price_5PlusLetters github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=price_5plus_letters,json=price5plusLetters,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"price_5plus_letters" yaml:"price_5plus_letters"`
	// Price extends yearly, after first year
	PriceExtends github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=price_extends,json=priceExtends,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"price_extends" yaml:"price_extends"`
	// Denom of the price setup
	PriceDenom string `protobuf:"bytes,7,opt,name=price_denom,json=priceDenom,proto3" json:"price_denom,omitempty" yaml:"price_denom"`
	// Minimum price of an offer.
	// Mostly used to prevent spamming and abusing store with low price offers,
	// so the value should not be so low.
	MinOfferPrice github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=min_offer_price,json=minOfferPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_offer_price" yaml:"min_offer_price"`
}

func (m *PriceParams) Reset()         { *m = PriceParams{} }
func (m *PriceParams) String() string { return proto.CompactTextString(m) }
func (*PriceParams) ProtoMessage()    {}
func (*PriceParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6097ac65688a2490, []int{1}
}
func (m *PriceParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceParams.Merge(m, src)
}
func (m *PriceParams) XXX_Size() int {
	return m.Size()
}
func (m *PriceParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceParams.DiscardUnknown(m)
}

var xxx_messageInfo_PriceParams proto.InternalMessageInfo

func (m *PriceParams) GetPriceDenom() string {
	if m != nil {
		return m.PriceDenom
	}
	return ""
}

type ChainsParams struct {
	// Chain-IDs and their aliases, used for UX improvement, used in front-end.
	AliasesOfChainIds []AliasesOfChainId `protobuf:"bytes,1,rep,name=aliases_of_chain_ids,json=aliasesOfChainIds,proto3" json:"aliases_of_chain_ids" yaml:"aliases_of_chain_ids"`
	// Chain-IDs that are using coin-type 60. Used to ensure address conversion.
	CoinType60ChainIds []string `protobuf:"bytes,2,rep,name=coin_type_60_chain_ids,json=coinType60ChainIds,proto3" json:"coin_type_60_chain_ids,omitempty" yaml:"coin_type_60_chain_ids"`
}

func (m *ChainsParams) Reset()         { *m = ChainsParams{} }
func (m *ChainsParams) String() string { return proto.CompactTextString(m) }
func (*ChainsParams) ProtoMessage()    {}
func (*ChainsParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6097ac65688a2490, []int{2}
}
func (m *ChainsParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainsParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainsParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainsParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainsParams.Merge(m, src)
}
func (m *ChainsParams) XXX_Size() int {
	return m.Size()
}
func (m *ChainsParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainsParams.DiscardUnknown(m)
}

var xxx_messageInfo_ChainsParams proto.InternalMessageInfo

func (m *ChainsParams) GetAliasesOfChainIds() []AliasesOfChainId {
	if m != nil {
		return m.AliasesOfChainIds
	}
	return nil
}

func (m *ChainsParams) GetCoinType60ChainIds() []string {
	if m != nil {
		return m.CoinType60ChainIds
	}
	return nil
}

// AliasesOfChainId defines the multiple-aliases of a chain id.
type AliasesOfChainId struct {
	// Chain-ID which owned the aliases.
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	// Multiple aliases of the chain id for UX improvement, used in front-end.
	Aliases []string `protobuf:"bytes,2,rep,name=aliases,proto3" json:"aliases,omitempty" yaml:"aliases"`
}

func (m *AliasesOfChainId) Reset()         { *m = AliasesOfChainId{} }
func (m *AliasesOfChainId) String() string { return proto.CompactTextString(m) }
func (*AliasesOfChainId) ProtoMessage()    {}
func (*AliasesOfChainId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6097ac65688a2490, []int{3}
}
func (m *AliasesOfChainId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AliasesOfChainId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AliasesOfChainId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AliasesOfChainId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliasesOfChainId.Merge(m, src)
}
func (m *AliasesOfChainId) XXX_Size() int {
	return m.Size()
}
func (m *AliasesOfChainId) XXX_DiscardUnknown() {
	xxx_messageInfo_AliasesOfChainId.DiscardUnknown(m)
}

var xxx_messageInfo_AliasesOfChainId proto.InternalMessageInfo

func (m *AliasesOfChainId) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *AliasesOfChainId) GetAliases() []string {
	if m != nil {
		return m.Aliases
	}
	return nil
}

type MiscParams struct {
	// Identifier of the begin epoch hook.
	BeginEpochHookIdentifier string `protobuf:"bytes,1,opt,name=begin_epoch_hook_identifier,json=beginEpochHookIdentifier,proto3" json:"begin_epoch_hook_identifier,omitempty" yaml:"begin_epoch_hook_identifier"`
	// Identifier of the end epoch hook.
	EndEpochHookIdentifier string `protobuf:"bytes,2,opt,name=end_epoch_hook_identifier,json=endEpochHookIdentifier,proto3" json:"end_epoch_hook_identifier,omitempty" yaml:"end_epoch_hook_identifier"`
	// Amount of time that the former owner of an expired Dym-Name can renew it before completely lost.
	GracePeriodDuration time.Duration `protobuf:"bytes,3,opt,name=grace_period_duration,json=gracePeriodDuration,proto3,stdduration" json:"grace_period_duration" yaml:"grace_period_duration"`
	// Amount of time of a Sell-Order from created to expired.
	SellOrderDuration time.Duration `protobuf:"bytes,4,opt,name=sell_order_duration,json=sellOrderDuration,proto3,stdduration" json:"sell_order_duration" yaml:"sell_order_duration"`
	// Amount of time to keep history version of closed SO before it is deleted,
	// based on expiry date and block time.
	PreservedClosedSellOrderDuration time.Duration `protobuf:"bytes,5,opt,name=preserved_closed_sell_order_duration,json=preservedClosedSellOrderDuration,proto3,stdduration" json:"preserved_closed_sell_order_duration" yaml:"preserved_closed_sell_order_duration"`
	// Amount of time, if the SO expiry date enter the range before expiry of Dym-Name, the SO can not be placed.
	// This help reduce the risk of new owner of Dym-Name not able to renew it on time.
	ProhibitSellDuration time.Duration `protobuf:"bytes,6,opt,name=prohibit_sell_duration,json=prohibitSellDuration,proto3,stdduration" json:"prohibit_sell_duration" yaml:"prohibit_sell_duration"`
}

func (m *MiscParams) Reset()         { *m = MiscParams{} }
func (m *MiscParams) String() string { return proto.CompactTextString(m) }
func (*MiscParams) ProtoMessage()    {}
func (*MiscParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6097ac65688a2490, []int{4}
}
func (m *MiscParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MiscParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MiscParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MiscParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiscParams.Merge(m, src)
}
func (m *MiscParams) XXX_Size() int {
	return m.Size()
}
func (m *MiscParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MiscParams.DiscardUnknown(m)
}

var xxx_messageInfo_MiscParams proto.InternalMessageInfo

func (m *MiscParams) GetBeginEpochHookIdentifier() string {
	if m != nil {
		return m.BeginEpochHookIdentifier
	}
	return ""
}

func (m *MiscParams) GetEndEpochHookIdentifier() string {
	if m != nil {
		return m.EndEpochHookIdentifier
	}
	return ""
}

func (m *MiscParams) GetGracePeriodDuration() time.Duration {
	if m != nil {
		return m.GracePeriodDuration
	}
	return 0
}

func (m *MiscParams) GetSellOrderDuration() time.Duration {
	if m != nil {
		return m.SellOrderDuration
	}
	return 0
}

func (m *MiscParams) GetPreservedClosedSellOrderDuration() time.Duration {
	if m != nil {
		return m.PreservedClosedSellOrderDuration
	}
	return 0
}

func (m *MiscParams) GetProhibitSellDuration() time.Duration {
	if m != nil {
		return m.ProhibitSellDuration
	}
	return 0
}

// PreservedRegistrationParams contains list of preserved registration Dym-Names,
// allow to be registered by specific account within a short period of time.
type PreservedRegistrationParams struct {
	// expiration_epoch is the epoch that the preserved registration will be expired.
	ExpirationEpoch int64 `protobuf:"varint,1,opt,name=expiration_epoch,json=expirationEpoch,proto3" json:"expiration_epoch,omitempty" yaml:"expiration_epoch"`
	// preserved_dym_names is the list of preserved dym-names.
	// This list will be cleared after the expiration epoch to save space.
	PreservedDymNames []PreservedDymName `protobuf:"bytes,2,rep,name=preserved_dym_names,json=preservedDymNames,proto3" json:"preserved_dym_names" yaml:"preserved_dym_names"`
}

func (m *PreservedRegistrationParams) Reset()         { *m = PreservedRegistrationParams{} }
func (m *PreservedRegistrationParams) String() string { return proto.CompactTextString(m) }
func (*PreservedRegistrationParams) ProtoMessage()    {}
func (*PreservedRegistrationParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6097ac65688a2490, []int{5}
}
func (m *PreservedRegistrationParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreservedRegistrationParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreservedRegistrationParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreservedRegistrationParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreservedRegistrationParams.Merge(m, src)
}
func (m *PreservedRegistrationParams) XXX_Size() int {
	return m.Size()
}
func (m *PreservedRegistrationParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PreservedRegistrationParams.DiscardUnknown(m)
}

var xxx_messageInfo_PreservedRegistrationParams proto.InternalMessageInfo

func (m *PreservedRegistrationParams) GetExpirationEpoch() int64 {
	if m != nil {
		return m.ExpirationEpoch
	}
	return 0
}

func (m *PreservedRegistrationParams) GetPreservedDymNames() []PreservedDymName {
	if m != nil {
		return m.PreservedDymNames
	}
	return nil
}

type PreservedDymName struct {
	// dym_name is the preserved dym-name.
	DymName string `protobuf:"bytes,1,opt,name=dym_name,json=dymName,proto3" json:"dym_name,omitempty" yaml:"dym_name"`
	// whitelisted_address is the only address that can register the preserved dym-name.
	WhitelistedAddress string `protobuf:"bytes,2,opt,name=whitelisted_address,json=whitelistedAddress,proto3" json:"whitelisted_address,omitempty" yaml:"whitelisted_address"`
}

func (m *PreservedDymName) Reset()         { *m = PreservedDymName{} }
func (m *PreservedDymName) String() string { return proto.CompactTextString(m) }
func (*PreservedDymName) ProtoMessage()    {}
func (*PreservedDymName) Descriptor() ([]byte, []int) {
	return fileDescriptor_6097ac65688a2490, []int{6}
}
func (m *PreservedDymName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreservedDymName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreservedDymName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreservedDymName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreservedDymName.Merge(m, src)
}
func (m *PreservedDymName) XXX_Size() int {
	return m.Size()
}
func (m *PreservedDymName) XXX_DiscardUnknown() {
	xxx_messageInfo_PreservedDymName.DiscardUnknown(m)
}

var xxx_messageInfo_PreservedDymName proto.InternalMessageInfo

func (m *PreservedDymName) GetDymName() string {
	if m != nil {
		return m.DymName
	}
	return ""
}

func (m *PreservedDymName) GetWhitelistedAddress() string {
	if m != nil {
		return m.WhitelistedAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "dymensionxyz.dymension.dymns.Params")
	proto.RegisterType((*PriceParams)(nil), "dymensionxyz.dymension.dymns.PriceParams")
	proto.RegisterType((*ChainsParams)(nil), "dymensionxyz.dymension.dymns.ChainsParams")
	proto.RegisterType((*AliasesOfChainId)(nil), "dymensionxyz.dymension.dymns.AliasesOfChainId")
	proto.RegisterType((*MiscParams)(nil), "dymensionxyz.dymension.dymns.MiscParams")
	proto.RegisterType((*PreservedRegistrationParams)(nil), "dymensionxyz.dymension.dymns.PreservedRegistrationParams")
	proto.RegisterType((*PreservedDymName)(nil), "dymensionxyz.dymension.dymns.PreservedDymName")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/dymns/params.proto", fileDescriptor_6097ac65688a2490)
}

var fileDescriptor_6097ac65688a2490 = []byte{
	// 1105 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x53, 0xdb, 0x46,
	0x14, 0x46, 0x18, 0x4c, 0x58, 0x20, 0x80, 0x0c, 0xd4, 0x81, 0xd4, 0x62, 0xb6, 0x29, 0x03, 0xfd,
	0x21, 0x05, 0x9b, 0x86, 0x69, 0x6f, 0x31, 0x24, 0x0d, 0x33, 0xb4, 0x50, 0xb5, 0x3d, 0xb4, 0x97,
	0x1d, 0x59, 0x5a, 0xdb, 0x3b, 0x58, 0x5a, 0x55, 0x2b, 0x08, 0xce, 0xf4, 0x94, 0xe9, 0x1f, 0xd0,
	0x99, 0x1e, 0xda, 0x73, 0x2f, 0xfd, 0x57, 0x72, 0xcc, 0xb1, 0xd3, 0x83, 0xda, 0xc2, 0xa5, 0xd3,
	0xa3, 0xff, 0x82, 0x8e, 0x76, 0x57, 0xb2, 0x30, 0xc2, 0x1e, 0xa6, 0x39, 0xd9, 0xfb, 0xde, 0xf7,
	0xbe, 0xef, 0xd3, 0xee, 0xea, 0x3d, 0x81, 0x2d, 0xa7, 0xeb, 0x62, 0x8f, 0x11, 0xea, 0x9d, 0x77,
	0x5f, 0x18, 0xe9, 0x22, 0xfe, 0xe7, 0x31, 0xc3, 0xb7, 0x02, 0xcb, 0x65, 0xba, 0x1f, 0xd0, 0x90,
	0xaa, 0xf7, 0xb3, 0x50, 0x3d, 0x5d, 0xe8, 0x1c, 0xba, 0xba, 0xd4, 0xa2, 0x2d, 0xca, 0x81, 0x46,
	0xfc, 0x4f, 0xd4, 0xac, 0x56, 0x6c, 0xca, 0x5c, 0xca, 0x8c, 0x86, 0xc5, 0xb0, 0x71, 0xb6, 0xdd,
	0xc0, 0xa1, 0xb5, 0x6d, 0xd8, 0x94, 0x78, 0x49, 0xbe, 0x45, 0x69, 0xab, 0x83, 0x0d, 0xbe, 0x6a,
	0x9c, 0x36, 0x0d, 0xe7, 0x34, 0xb0, 0xc2, 0x98, 0x95, 0x47, 0xe0, 0x6f, 0x05, 0x50, 0x3c, 0xe6,
	0x26, 0xd4, 0xaf, 0xc1, 0xa4, 0x1f, 0x10, 0x1b, 0x97, 0x95, 0x75, 0x65, 0x73, 0xa6, 0xba, 0xa5,
	0x0f, 0xb3, 0xa3, 0x1f, 0xc7, 0x50, 0x51, 0x59, 0x5f, 0x7a, 0x15, 0x69, 0x63, 0xbd, 0x48, 0x9b,
	0xed, 0x5a, 0x6e, 0xe7, 0x13, 0xc8, 0x59, 0xa0, 0x29, 0xd8, 0xd4, 0x6f, 0x40, 0xd1, 0x6e, 0x5b,
	0xc4, 0x63, 0xe5, 0x71, 0xce, 0xfb, 0xde, 0x70, 0xde, 0x3d, 0x8e, 0x95, 0xc4, 0xcb, 0x92, 0x78,
	0x4e, 0x10, 0x0b, 0x1e, 0x68, 0x4a, 0x42, 0xf5, 0x0b, 0x30, 0xe1, 0x12, 0x66, 0x97, 0x0b, 0x9c,
	0x78, 0x73, 0x38, 0xf1, 0x67, 0x84, 0xd9, 0x92, 0xb6, 0x24, 0x69, 0x67, 0x04, 0x6d, 0xcc, 0x01,
	0x4d, 0x4e, 0xa5, 0xfe, 0xac, 0x80, 0x15, 0x3f, 0xc0, 0x0c, 0x07, 0x67, 0xd8, 0x41, 0x01, 0x6e,
	0x11, 0x16, 0x8a, 0x0d, 0x2b, 0x4f, 0x70, 0x95, 0x8f, 0x47, 0x6d, 0x8b, 0xac, 0x35, 0x33, 0xa5,
	0x52, 0xf6, 0x5d, 0x29, 0xfb, 0x76, 0xb2, 0x4d, 0x79, 0x32, 0xd0, 0x5c, 0xf6, 0xf3, 0x38, 0xe0,
	0x3f, 0x45, 0x30, 0x93, 0xd9, 0x74, 0xd5, 0x05, 0x77, 0xf9, 0x06, 0xa3, 0x6d, 0xd4, 0xc1, 0x61,
	0x88, 0x03, 0x7e, 0x6e, 0xd3, 0xf5, 0x4f, 0x63, 0x95, 0x3f, 0x22, 0x6d, 0xa3, 0x45, 0xc2, 0xf6,
	0x69, 0x43, 0xb7, 0xa9, 0x6b, 0xc8, 0x4b, 0x22, 0x7e, 0x3e, 0x64, 0xce, 0x89, 0x11, 0x76, 0x7d,
	0xcc, 0xf4, 0x03, 0x2f, 0xec, 0x45, 0xda, 0x72, 0xe6, 0xd8, 0x52, 0x36, 0x68, 0xce, 0xf2, 0xc0,
	0xf6, 0x21, 0x5f, 0xaa, 0x3e, 0x98, 0x17, 0x80, 0xaa, 0x04, 0x88, 0xf3, 0x9c, 0xae, 0x3f, 0xbb,
	0xb5, 0xde, 0x4a, 0x56, 0x2f, 0xa5, 0x83, 0xe6, 0x1c, 0x8f, 0x54, 0x85, 0x20, 0xeb, 0x2b, 0xd6,
	0x52, 0xc5, 0xc2, 0x9b, 0x50, 0xac, 0x0d, 0x2a, 0xd6, 0xae, 0x29, 0xee, 0xa4, 0x8a, 0x13, 0x6f,
	0x42, 0x71, 0x67, 0x50, 0x71, 0x27, 0x51, 0xfc, 0x1e, 0x94, 0x04, 0xe4, 0x23, 0xbf, 0x73, 0xca,
	0x52, 0xd5, 0x49, 0xae, 0x7a, 0x78, 0x6b, 0xd5, 0xd5, 0xac, 0xea, 0x15, 0x4a, 0x68, 0x2e, 0xf2,
	0x28, 0x0f, 0x26, 0xea, 0x27, 0x40, 0xd8, 0x41, 0xf8, 0x3c, 0xc4, 0x9e, 0xc3, 0xca, 0x45, 0xae,
	0xfb, 0xf4, 0xd6, 0xba, 0x4b, 0x59, 0x5d, 0x49, 0x96, 0x5c, 0xa0, 0x27, 0x62, 0xa9, 0xee, 0x82,
	0x19, 0x91, 0x77, 0xb0, 0x47, 0xdd, 0xf2, 0x14, 0x97, 0x5a, 0xe9, 0x45, 0x9a, 0x9a, 0x2d, 0xe6,
	0x49, 0x68, 0x02, 0xbe, 0xda, 0x8f, 0x17, 0xf1, 0xa9, 0xb8, 0xc4, 0x43, 0xb4, 0xd9, 0xc4, 0x01,
	0x12, 0x1d, 0xea, 0xce, 0xff, 0x3b, 0x95, 0x01, 0x3a, 0x68, 0xce, 0xb9, 0xc4, 0x3b, 0x8a, 0x03,
	0xfc, 0x05, 0x83, 0x2f, 0xc7, 0xc1, 0x6c, 0xb6, 0x0f, 0xa9, 0x3f, 0x28, 0x60, 0xc9, 0xea, 0x10,
	0x8b, 0x61, 0x86, 0x68, 0x13, 0xf1, 0xf6, 0x83, 0x88, 0xc3, 0xca, 0xca, 0x7a, 0x61, 0x73, 0xa6,
	0xaa, 0x0f, 0xef, 0x09, 0x8f, 0x45, 0xe5, 0x51, 0x93, 0x73, 0x1e, 0x38, 0xf5, 0x77, 0x64, 0x23,
	0x58, 0x13, 0x76, 0xf2, 0x98, 0xa1, 0xb9, 0x68, 0x0d, 0x94, 0xc5, 0xe7, 0xb5, 0x12, 0xb7, 0x76,
	0x14, 0x3f, 0x12, 0x7a, 0xf4, 0x30, 0xe3, 0x63, 0x7c, 0xbd, 0xb0, 0x39, 0x5d, 0xdf, 0xbd, 0x88,
	0x34, 0x75, 0x8f, 0x12, 0xef, 0xab, 0xae, 0x8f, 0x1f, 0x3d, 0x4c, 0xea, 0xfa, 0x2d, 0x27, 0xbf,
	0x1a, 0x9a, 0xaa, 0x7d, 0xad, 0x08, 0xfa, 0x60, 0x61, 0xd0, 0xb8, 0xaa, 0x83, 0x3b, 0x49, 0x95,
	0xec, 0x36, 0xa5, 0x5e, 0xa4, 0xcd, 0x67, 0xba, 0x33, 0x22, 0x0e, 0x34, 0xa7, 0x6c, 0x89, 0xff,
	0x00, 0x4c, 0xc9, 0xa7, 0x90, 0x0e, 0xd5, 0x5e, 0xa4, 0xdd, 0xbd, 0xf2, 0xd4, 0xd0, 0x4c, 0x20,
	0xf0, 0xef, 0x49, 0x00, 0xfa, 0x5d, 0x5a, 0xc5, 0x60, 0xad, 0x81, 0x5b, 0xc4, 0x43, 0xd8, 0xa7,
	0x76, 0x1b, 0xb5, 0x29, 0x3d, 0x41, 0xc4, 0xc1, 0x5e, 0x48, 0x9a, 0x24, 0xed, 0x76, 0x1b, 0xbd,
	0x48, 0x83, 0x82, 0x70, 0x08, 0x18, 0x9a, 0x65, 0x9e, 0x7d, 0x12, 0x27, 0x9f, 0x51, 0x7a, 0x72,
	0x90, 0xa6, 0x54, 0x04, 0xee, 0x61, 0xcf, 0xb9, 0x41, 0x44, 0xb4, 0xb8, 0x07, 0xbd, 0x48, 0x5b,
	0x17, 0x22, 0x37, 0x42, 0xa1, 0xb9, 0x82, 0x3d, 0x27, 0x4f, 0xe0, 0x39, 0x58, 0x6e, 0x05, 0x96,
	0x8d, 0x91, 0x8f, 0x03, 0x42, 0x1d, 0x94, 0x4c, 0x60, 0x39, 0xb6, 0xee, 0xe9, 0x62, 0x44, 0xeb,
	0xc9, 0x88, 0xd6, 0xf7, 0x25, 0xa0, 0xbe, 0x29, 0xef, 0xc9, 0x7d, 0xa1, 0x9d, 0xcb, 0x02, 0x7f,
	0xf9, 0x53, 0x53, 0xcc, 0x12, 0xcf, 0x1d, 0xf3, 0x54, 0x52, 0xae, 0x7e, 0x07, 0x4a, 0x0c, 0x77,
	0x3a, 0x88, 0x06, 0x0e, 0x0e, 0xfa, 0xb2, 0x13, 0xa3, 0x64, 0x37, 0xa4, 0xac, 0xec, 0x26, 0x39,
	0x1c, 0x42, 0x74, 0x31, 0xce, 0x1c, 0xc5, 0x89, 0x54, 0xf2, 0x57, 0x05, 0x3c, 0xe8, 0xcf, 0x35,
	0xbb, 0x43, 0x19, 0x76, 0x50, 0x9e, 0x89, 0xc9, 0x51, 0x26, 0x76, 0xa5, 0x89, 0xf7, 0x07, 0x87,
	0xe5, 0xcd, 0xa4, 0xc2, 0xd5, 0x7a, 0x0a, 0xdd, 0xe3, 0xc8, 0x2f, 0xaf, 0x99, 0x7c, 0x11, 0x8f,
	0x78, 0xda, 0x26, 0x0d, 0x12, 0x0a, 0x9a, 0xd4, 0x55, 0x71, 0x94, 0xab, 0xad, 0xc1, 0x11, 0x9e,
	0x47, 0x23, 0x7c, 0x2c, 0x25, 0xc9, 0xd8, 0x40, 0x42, 0x00, 0xff, 0x55, 0xc0, 0xda, 0x90, 0x6f,
	0x04, 0xf5, 0x29, 0x58, 0xc0, 0xe7, 0x3e, 0x11, 0x31, 0x71, 0xd3, 0xf8, 0x4d, 0x2f, 0xd4, 0xd7,
	0x7a, 0x91, 0xf6, 0x96, 0xbc, 0x84, 0x03, 0x08, 0x68, 0xce, 0xf7, 0x43, 0xfc, 0x0a, 0xaa, 0x2f,
	0x95, 0x78, 0xb2, 0x24, 0x7b, 0xe6, 0x74, 0x5d, 0xe4, 0x59, 0xae, 0x7c, 0x0d, 0x47, 0x36, 0xac,
	0xd4, 0xe0, 0x7e, 0xd7, 0xfd, 0xdc, 0x72, 0x71, 0x1d, 0x5e, 0xbd, 0x11, 0x39, 0xc4, 0x7c, 0xbe,
	0x5c, 0xad, 0x62, 0xf0, 0x27, 0x05, 0x2c, 0x0c, 0x72, 0xc5, 0x3d, 0x24, 0xa9, 0xba, 0xde, 0x43,
	0x92, 0x0c, 0x34, 0xa7, 0x1c, 0x89, 0x3f, 0x02, 0xa5, 0xe7, 0x6d, 0x12, 0xe2, 0x0e, 0x61, 0x21,
	0x76, 0x90, 0xe5, 0x38, 0x01, 0x66, 0xc9, 0xc7, 0x47, 0xa5, 0x6f, 0x2a, 0x07, 0x04, 0x4d, 0x35,
	0x13, 0x7d, 0x2c, 0x82, 0xf5, 0xc3, 0x57, 0x17, 0x15, 0xe5, 0xf5, 0x45, 0x45, 0xf9, 0xeb, 0xa2,
	0xa2, 0xfc, 0x78, 0x59, 0x19, 0x7b, 0x7d, 0x59, 0x19, 0xfb, 0xfd, 0xb2, 0x32, 0xf6, 0x6d, 0x35,
	0x33, 0x48, 0x6e, 0xf8, 0x6c, 0x3f, 0xab, 0x19, 0xe7, 0xf2, 0xdb, 0x9d, 0x0f, 0x96, 0x46, 0x91,
	0x5f, 0x92, 0xda, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x43, 0x91, 0xf5, 0xe8, 0x0b, 0x00,
	0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PreservedRegistration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Misc.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Chains.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PriceParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinOfferPrice.Size()
		i -= size
		if _, err := m.MinOfferPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.PriceDenom) > 0 {
		i -= len(m.PriceDenom)
		copy(dAtA[i:], m.PriceDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.PriceDenom)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.PriceExtends.Size()
		i -= size
		if _, err := m.PriceExtends.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Price_5PlusLetters.Size()
		i -= size
		if _, err := m.Price_5PlusLetters.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Price_4Letters.Size()
		i -= size
		if _, err := m.Price_4Letters.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Price_3Letters.Size()
		i -= size
		if _, err := m.Price_3Letters.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Price_2Letters.Size()
		i -= size
		if _, err := m.Price_2Letters.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Price_1Letter.Size()
		i -= size
		if _, err := m.Price_1Letter.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ChainsParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainsParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainsParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoinType60ChainIds) > 0 {
		for iNdEx := len(m.CoinType60ChainIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CoinType60ChainIds[iNdEx])
			copy(dAtA[i:], m.CoinType60ChainIds[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.CoinType60ChainIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AliasesOfChainIds) > 0 {
		for iNdEx := len(m.AliasesOfChainIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AliasesOfChainIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AliasesOfChainId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AliasesOfChainId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AliasesOfChainId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Aliases) > 0 {
		for iNdEx := len(m.Aliases) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Aliases[iNdEx])
			copy(dAtA[i:], m.Aliases[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.Aliases[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MiscParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MiscParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MiscParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n5, err5 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.ProhibitSellDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ProhibitSellDuration):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintParams(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x32
	n6, err6 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.PreservedClosedSellOrderDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.PreservedClosedSellOrderDuration):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintParams(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x2a
	n7, err7 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.SellOrderDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.SellOrderDuration):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintParams(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x22
	n8, err8 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.GracePeriodDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.GracePeriodDuration):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintParams(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x1a
	if len(m.EndEpochHookIdentifier) > 0 {
		i -= len(m.EndEpochHookIdentifier)
		copy(dAtA[i:], m.EndEpochHookIdentifier)
		i = encodeVarintParams(dAtA, i, uint64(len(m.EndEpochHookIdentifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BeginEpochHookIdentifier) > 0 {
		i -= len(m.BeginEpochHookIdentifier)
		copy(dAtA[i:], m.BeginEpochHookIdentifier)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BeginEpochHookIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PreservedRegistrationParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreservedRegistrationParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreservedRegistrationParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreservedDymNames) > 0 {
		for iNdEx := len(m.PreservedDymNames) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PreservedDymNames[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ExpirationEpoch != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ExpirationEpoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PreservedDymName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreservedDymName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreservedDymName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WhitelistedAddress) > 0 {
		i -= len(m.WhitelistedAddress)
		copy(dAtA[i:], m.WhitelistedAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.WhitelistedAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DymName) > 0 {
		i -= len(m.DymName)
		copy(dAtA[i:], m.DymName)
		i = encodeVarintParams(dAtA, i, uint64(len(m.DymName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Chains.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Misc.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.PreservedRegistration.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *PriceParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price_1Letter.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Price_2Letters.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Price_3Letters.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Price_4Letters.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Price_5PlusLetters.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.PriceExtends.Size()
	n += 1 + l + sovParams(uint64(l))
	l = len(m.PriceDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.MinOfferPrice.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *ChainsParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AliasesOfChainIds) > 0 {
		for _, e := range m.AliasesOfChainIds {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.CoinType60ChainIds) > 0 {
		for _, s := range m.CoinType60ChainIds {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *AliasesOfChainId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if len(m.Aliases) > 0 {
		for _, s := range m.Aliases {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *MiscParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BeginEpochHookIdentifier)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.EndEpochHookIdentifier)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.GracePeriodDuration)
	n += 1 + l + sovParams(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.SellOrderDuration)
	n += 1 + l + sovParams(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.PreservedClosedSellOrderDuration)
	n += 1 + l + sovParams(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ProhibitSellDuration)
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *PreservedRegistrationParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpirationEpoch != 0 {
		n += 1 + sovParams(uint64(m.ExpirationEpoch))
	}
	if len(m.PreservedDymNames) > 0 {
		for _, e := range m.PreservedDymNames {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *PreservedDymName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DymName)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.WhitelistedAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Chains.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Misc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreservedRegistration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PreservedRegistration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price_1Letter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price_1Letter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price_2Letters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price_2Letters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price_3Letters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price_3Letters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price_4Letters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price_4Letters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price_5PlusLetters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price_5PlusLetters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceExtends", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PriceExtends.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOfferPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinOfferPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainsParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainsParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainsParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasesOfChainIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliasesOfChainIds = append(m.AliasesOfChainIds, AliasesOfChainId{})
			if err := m.AliasesOfChainIds[len(m.AliasesOfChainIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType60ChainIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinType60ChainIds = append(m.CoinType60ChainIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AliasesOfChainId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AliasesOfChainId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AliasesOfChainId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aliases", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aliases = append(m.Aliases, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MiscParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MiscParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MiscParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginEpochHookIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginEpochHookIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndEpochHookIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndEpochHookIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GracePeriodDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.GracePeriodDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrderDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.SellOrderDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreservedClosedSellOrderDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.PreservedClosedSellOrderDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProhibitSellDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.ProhibitSellDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreservedRegistrationParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreservedRegistrationParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreservedRegistrationParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationEpoch", wireType)
			}
			m.ExpirationEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationEpoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreservedDymNames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreservedDymNames = append(m.PreservedDymNames, PreservedDymName{})
			if err := m.PreservedDymNames[len(m.PreservedDymNames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreservedDymName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreservedDymName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreservedDymName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DymName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DymName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
