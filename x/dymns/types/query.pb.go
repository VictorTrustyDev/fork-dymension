// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/dymns/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryDymNameRequest is the request type for the Query/DymName RPC method.
type QueryDymNameRequest struct {
	DymName string `protobuf:"bytes,1,opt,name=dym_name,json=dymName,proto3" json:"dym_name,omitempty"`
}

func (m *QueryDymNameRequest) Reset()         { *m = QueryDymNameRequest{} }
func (m *QueryDymNameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDymNameRequest) ProtoMessage()    {}
func (*QueryDymNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{2}
}
func (m *QueryDymNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDymNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDymNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDymNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDymNameRequest.Merge(m, src)
}
func (m *QueryDymNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDymNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDymNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDymNameRequest proto.InternalMessageInfo

func (m *QueryDymNameRequest) GetDymName() string {
	if m != nil {
		return m.DymName
	}
	return ""
}

// QueryDymNameResponse is the response type for the Query/DymName RPC method.
type QueryDymNameResponse struct {
	DymName *DymName `protobuf:"bytes,1,opt,name=dym_name,json=dymName,proto3" json:"dym_name,omitempty"`
}

func (m *QueryDymNameResponse) Reset()         { *m = QueryDymNameResponse{} }
func (m *QueryDymNameResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDymNameResponse) ProtoMessage()    {}
func (*QueryDymNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{3}
}
func (m *QueryDymNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDymNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDymNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDymNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDymNameResponse.Merge(m, src)
}
func (m *QueryDymNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDymNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDymNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDymNameResponse proto.InternalMessageInfo

func (m *QueryDymNameResponse) GetDymName() *DymName {
	if m != nil {
		return m.DymName
	}
	return nil
}

// QueryResolveDymNameAddressesRequest is the request type for the Query/ResolveDymNameAddresses RPC method.
type QueryResolveDymNameAddressesRequest struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *QueryResolveDymNameAddressesRequest) Reset()         { *m = QueryResolveDymNameAddressesRequest{} }
func (m *QueryResolveDymNameAddressesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryResolveDymNameAddressesRequest) ProtoMessage()    {}
func (*QueryResolveDymNameAddressesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{4}
}
func (m *QueryResolveDymNameAddressesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResolveDymNameAddressesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResolveDymNameAddressesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResolveDymNameAddressesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResolveDymNameAddressesRequest.Merge(m, src)
}
func (m *QueryResolveDymNameAddressesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryResolveDymNameAddressesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResolveDymNameAddressesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResolveDymNameAddressesRequest proto.InternalMessageInfo

func (m *QueryResolveDymNameAddressesRequest) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type ResultDymNameAddress struct {
	Address         string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	ResolvedAddress string `protobuf:"bytes,2,opt,name=resolved_address,json=resolvedAddress,proto3" json:"resolved_address,omitempty"`
	Error           string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ResultDymNameAddress) Reset()         { *m = ResultDymNameAddress{} }
func (m *ResultDymNameAddress) String() string { return proto.CompactTextString(m) }
func (*ResultDymNameAddress) ProtoMessage()    {}
func (*ResultDymNameAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{5}
}
func (m *ResultDymNameAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResultDymNameAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResultDymNameAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResultDymNameAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultDymNameAddress.Merge(m, src)
}
func (m *ResultDymNameAddress) XXX_Size() int {
	return m.Size()
}
func (m *ResultDymNameAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultDymNameAddress.DiscardUnknown(m)
}

var xxx_messageInfo_ResultDymNameAddress proto.InternalMessageInfo

func (m *ResultDymNameAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ResultDymNameAddress) GetResolvedAddress() string {
	if m != nil {
		return m.ResolvedAddress
	}
	return ""
}

func (m *ResultDymNameAddress) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// QueryResolveDymNameAddressesResponse is the response type for the Query/ResolveDymNameAddresses RPC method.
type QueryResolveDymNameAddressesResponse struct {
	ResolvedAddresses []ResultDymNameAddress `protobuf:"bytes,1,rep,name=resolved_addresses,json=resolvedAddresses,proto3" json:"resolved_addresses"`
}

func (m *QueryResolveDymNameAddressesResponse) Reset()         { *m = QueryResolveDymNameAddressesResponse{} }
func (m *QueryResolveDymNameAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResolveDymNameAddressesResponse) ProtoMessage()    {}
func (*QueryResolveDymNameAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{6}
}
func (m *QueryResolveDymNameAddressesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResolveDymNameAddressesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResolveDymNameAddressesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResolveDymNameAddressesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResolveDymNameAddressesResponse.Merge(m, src)
}
func (m *QueryResolveDymNameAddressesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryResolveDymNameAddressesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResolveDymNameAddressesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResolveDymNameAddressesResponse proto.InternalMessageInfo

func (m *QueryResolveDymNameAddressesResponse) GetResolvedAddresses() []ResultDymNameAddress {
	if m != nil {
		return m.ResolvedAddresses
	}
	return nil
}

// QueryDymNamesOwnedByAccountRequest is the request type for the Query/DymNamesOwnedByAccount RPC method.
type QueryDymNamesOwnedByAccountRequest struct {
	// owner defines the address of the owner of the Dym-Names to query for.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryDymNamesOwnedByAccountRequest) Reset()         { *m = QueryDymNamesOwnedByAccountRequest{} }
func (m *QueryDymNamesOwnedByAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDymNamesOwnedByAccountRequest) ProtoMessage()    {}
func (*QueryDymNamesOwnedByAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{7}
}
func (m *QueryDymNamesOwnedByAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDymNamesOwnedByAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDymNamesOwnedByAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDymNamesOwnedByAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDymNamesOwnedByAccountRequest.Merge(m, src)
}
func (m *QueryDymNamesOwnedByAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDymNamesOwnedByAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDymNamesOwnedByAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDymNamesOwnedByAccountRequest proto.InternalMessageInfo

func (m *QueryDymNamesOwnedByAccountRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// QueryDymNamesOwnedByAccountResponse is the response type for the Query/DymNamesOwnedByAccount RPC method.
type QueryDymNamesOwnedByAccountResponse struct {
	// dym_names defines the Dym-Names owned by the account.
	DymNames []DymName `protobuf:"bytes,1,rep,name=dym_names,json=dymNames,proto3" json:"dym_names"`
}

func (m *QueryDymNamesOwnedByAccountResponse) Reset()         { *m = QueryDymNamesOwnedByAccountResponse{} }
func (m *QueryDymNamesOwnedByAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDymNamesOwnedByAccountResponse) ProtoMessage()    {}
func (*QueryDymNamesOwnedByAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{8}
}
func (m *QueryDymNamesOwnedByAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDymNamesOwnedByAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDymNamesOwnedByAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDymNamesOwnedByAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDymNamesOwnedByAccountResponse.Merge(m, src)
}
func (m *QueryDymNamesOwnedByAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDymNamesOwnedByAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDymNamesOwnedByAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDymNamesOwnedByAccountResponse proto.InternalMessageInfo

func (m *QueryDymNamesOwnedByAccountResponse) GetDymNames() []DymName {
	if m != nil {
		return m.DymNames
	}
	return nil
}

// QuerySellOrderRequest is the request type for the Query/SellOrder RPC method.
type QuerySellOrderRequest struct {
	// dym_name is the Dym-Name to query the active SO for.
	DymName string `protobuf:"bytes,1,opt,name=dym_name,json=dymName,proto3" json:"dym_name,omitempty"`
}

func (m *QuerySellOrderRequest) Reset()         { *m = QuerySellOrderRequest{} }
func (m *QuerySellOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySellOrderRequest) ProtoMessage()    {}
func (*QuerySellOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{9}
}
func (m *QuerySellOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySellOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySellOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySellOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySellOrderRequest.Merge(m, src)
}
func (m *QuerySellOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySellOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySellOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySellOrderRequest proto.InternalMessageInfo

func (m *QuerySellOrderRequest) GetDymName() string {
	if m != nil {
		return m.DymName
	}
	return ""
}

// QuerySellOrderResponse is the response type for the Query/SellOrder RPC method.
type QuerySellOrderResponse struct {
	// result is the active SO for the Dym-Name.
	Result SellOrder `protobuf:"bytes,1,opt,name=result,proto3" json:"result"`
}

func (m *QuerySellOrderResponse) Reset()         { *m = QuerySellOrderResponse{} }
func (m *QuerySellOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySellOrderResponse) ProtoMessage()    {}
func (*QuerySellOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{10}
}
func (m *QuerySellOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySellOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySellOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySellOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySellOrderResponse.Merge(m, src)
}
func (m *QuerySellOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySellOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySellOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySellOrderResponse proto.InternalMessageInfo

func (m *QuerySellOrderResponse) GetResult() SellOrder {
	if m != nil {
		return m.Result
	}
	return SellOrder{}
}

// QueryHistoricalSellOrderRequest is the request type for the Query/HistoricalSellOrder RPC method.
type QueryHistoricalSellOrderRequest struct {
	// dym_name is the Dym-Name to query the historical SO for.
	DymName string `protobuf:"bytes,1,opt,name=dym_name,json=dymName,proto3" json:"dym_name,omitempty"`
}

func (m *QueryHistoricalSellOrderRequest) Reset()         { *m = QueryHistoricalSellOrderRequest{} }
func (m *QueryHistoricalSellOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHistoricalSellOrderRequest) ProtoMessage()    {}
func (*QueryHistoricalSellOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{11}
}
func (m *QueryHistoricalSellOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHistoricalSellOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHistoricalSellOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHistoricalSellOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHistoricalSellOrderRequest.Merge(m, src)
}
func (m *QueryHistoricalSellOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHistoricalSellOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHistoricalSellOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHistoricalSellOrderRequest proto.InternalMessageInfo

func (m *QueryHistoricalSellOrderRequest) GetDymName() string {
	if m != nil {
		return m.DymName
	}
	return ""
}

// QueryHistoricalSellOrderResponse is the response type for the Query/HistoricalSellOrder RPC method.
type QueryHistoricalSellOrderResponse struct {
	// result defines the historical SOs of the Dym-Name.
	Result []SellOrder `protobuf:"bytes,1,rep,name=result,proto3" json:"result"`
}

func (m *QueryHistoricalSellOrderResponse) Reset()         { *m = QueryHistoricalSellOrderResponse{} }
func (m *QueryHistoricalSellOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHistoricalSellOrderResponse) ProtoMessage()    {}
func (*QueryHistoricalSellOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{12}
}
func (m *QueryHistoricalSellOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHistoricalSellOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHistoricalSellOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHistoricalSellOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHistoricalSellOrderResponse.Merge(m, src)
}
func (m *QueryHistoricalSellOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHistoricalSellOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHistoricalSellOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHistoricalSellOrderResponse proto.InternalMessageInfo

func (m *QueryHistoricalSellOrderResponse) GetResult() []SellOrder {
	if m != nil {
		return m.Result
	}
	return nil
}

// QueryEstimateRegisterNameRequest is the request type for the Query/EstimateRegisterName RPC method.
type QueryEstimateRegisterNameRequest struct {
	// name is the Dym-Name to be registered.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// duration is the number of years the Dym-Name will be registered for.
	Duration int64 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	// owner is the bech32-encoded address of the account which owns the order.
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryEstimateRegisterNameRequest) Reset()         { *m = QueryEstimateRegisterNameRequest{} }
func (m *QueryEstimateRegisterNameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateRegisterNameRequest) ProtoMessage()    {}
func (*QueryEstimateRegisterNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{13}
}
func (m *QueryEstimateRegisterNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateRegisterNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateRegisterNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateRegisterNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateRegisterNameRequest.Merge(m, src)
}
func (m *QueryEstimateRegisterNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateRegisterNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateRegisterNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateRegisterNameRequest proto.InternalMessageInfo

func (m *QueryEstimateRegisterNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryEstimateRegisterNameRequest) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *QueryEstimateRegisterNameRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// QueryEstimateRegisterNameResponse is the response type for the Query/EstimateRegisterName RPC method.
type QueryEstimateRegisterNameResponse struct {
	// first_year_price is the price to register the Dym-Name for the first year.
	FirstYearPrice types.Coin `protobuf:"bytes,1,opt,name=first_year_price,json=firstYearPrice,proto3" json:"first_year_price"`
	// extend_price is the price to extend the Dym-Name registration for another year.
	ExtendPrice types.Coin `protobuf:"bytes,2,opt,name=extend_price,json=extendPrice,proto3" json:"extend_price"`
	// total_price is the total price to register the Dym-Name for the specified duration.
	TotalPrice types.Coin `protobuf:"bytes,3,opt,name=total_price,json=totalPrice,proto3" json:"total_price"`
}

func (m *QueryEstimateRegisterNameResponse) Reset()         { *m = QueryEstimateRegisterNameResponse{} }
func (m *QueryEstimateRegisterNameResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateRegisterNameResponse) ProtoMessage()    {}
func (*QueryEstimateRegisterNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{14}
}
func (m *QueryEstimateRegisterNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateRegisterNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateRegisterNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateRegisterNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateRegisterNameResponse.Merge(m, src)
}
func (m *QueryEstimateRegisterNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateRegisterNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateRegisterNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateRegisterNameResponse proto.InternalMessageInfo

func (m *QueryEstimateRegisterNameResponse) GetFirstYearPrice() types.Coin {
	if m != nil {
		return m.FirstYearPrice
	}
	return types.Coin{}
}

func (m *QueryEstimateRegisterNameResponse) GetExtendPrice() types.Coin {
	if m != nil {
		return m.ExtendPrice
	}
	return types.Coin{}
}

func (m *QueryEstimateRegisterNameResponse) GetTotalPrice() types.Coin {
	if m != nil {
		return m.TotalPrice
	}
	return types.Coin{}
}

// QueryReverseResolveAddressRequest is the request type for the Query/ReverseResolveAddress RPC method.
type QueryReverseResolveAddressRequest struct {
	// addresses defines the addresses to reverse resolve. Can be both bech32 and hex addresses.
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *QueryReverseResolveAddressRequest) Reset()         { *m = QueryReverseResolveAddressRequest{} }
func (m *QueryReverseResolveAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReverseResolveAddressRequest) ProtoMessage()    {}
func (*QueryReverseResolveAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{15}
}
func (m *QueryReverseResolveAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReverseResolveAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReverseResolveAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReverseResolveAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReverseResolveAddressRequest.Merge(m, src)
}
func (m *QueryReverseResolveAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReverseResolveAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReverseResolveAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReverseResolveAddressRequest proto.InternalMessageInfo

func (m *QueryReverseResolveAddressRequest) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// QueryReverseResolveAddressResponse is the response type for the Query/ReverseResolveAddress RPC method.
type QueryReverseResolveAddressResponse struct {
	// resolved_addresses defines the resolved addresses.
	Result map[string]ReverseResolveAddressResult `protobuf:"bytes,1,rep,name=result,proto3" json:"result" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryReverseResolveAddressResponse) Reset()         { *m = QueryReverseResolveAddressResponse{} }
func (m *QueryReverseResolveAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReverseResolveAddressResponse) ProtoMessage()    {}
func (*QueryReverseResolveAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{16}
}
func (m *QueryReverseResolveAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReverseResolveAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReverseResolveAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReverseResolveAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReverseResolveAddressResponse.Merge(m, src)
}
func (m *QueryReverseResolveAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReverseResolveAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReverseResolveAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReverseResolveAddressResponse proto.InternalMessageInfo

func (m *QueryReverseResolveAddressResponse) GetResult() map[string]ReverseResolveAddressResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReverseResolveAddressResult struct {
	Candidates []string `protobuf:"bytes,1,rep,name=candidates,proto3" json:"candidates,omitempty"`
	Error      string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReverseResolveAddressResult) Reset()         { *m = ReverseResolveAddressResult{} }
func (m *ReverseResolveAddressResult) String() string { return proto.CompactTextString(m) }
func (*ReverseResolveAddressResult) ProtoMessage()    {}
func (*ReverseResolveAddressResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{17}
}
func (m *ReverseResolveAddressResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReverseResolveAddressResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReverseResolveAddressResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReverseResolveAddressResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReverseResolveAddressResult.Merge(m, src)
}
func (m *ReverseResolveAddressResult) XXX_Size() int {
	return m.Size()
}
func (m *ReverseResolveAddressResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ReverseResolveAddressResult.DiscardUnknown(m)
}

var xxx_messageInfo_ReverseResolveAddressResult proto.InternalMessageInfo

func (m *ReverseResolveAddressResult) GetCandidates() []string {
	if m != nil {
		return m.Candidates
	}
	return nil
}

func (m *ReverseResolveAddressResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "dymensionxyz.dymension.dymns.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "dymensionxyz.dymension.dymns.QueryParamsResponse")
	proto.RegisterType((*QueryDymNameRequest)(nil), "dymensionxyz.dymension.dymns.QueryDymNameRequest")
	proto.RegisterType((*QueryDymNameResponse)(nil), "dymensionxyz.dymension.dymns.QueryDymNameResponse")
	proto.RegisterType((*QueryResolveDymNameAddressesRequest)(nil), "dymensionxyz.dymension.dymns.QueryResolveDymNameAddressesRequest")
	proto.RegisterType((*ResultDymNameAddress)(nil), "dymensionxyz.dymension.dymns.ResultDymNameAddress")
	proto.RegisterType((*QueryResolveDymNameAddressesResponse)(nil), "dymensionxyz.dymension.dymns.QueryResolveDymNameAddressesResponse")
	proto.RegisterType((*QueryDymNamesOwnedByAccountRequest)(nil), "dymensionxyz.dymension.dymns.QueryDymNamesOwnedByAccountRequest")
	proto.RegisterType((*QueryDymNamesOwnedByAccountResponse)(nil), "dymensionxyz.dymension.dymns.QueryDymNamesOwnedByAccountResponse")
	proto.RegisterType((*QuerySellOrderRequest)(nil), "dymensionxyz.dymension.dymns.QuerySellOrderRequest")
	proto.RegisterType((*QuerySellOrderResponse)(nil), "dymensionxyz.dymension.dymns.QuerySellOrderResponse")
	proto.RegisterType((*QueryHistoricalSellOrderRequest)(nil), "dymensionxyz.dymension.dymns.QueryHistoricalSellOrderRequest")
	proto.RegisterType((*QueryHistoricalSellOrderResponse)(nil), "dymensionxyz.dymension.dymns.QueryHistoricalSellOrderResponse")
	proto.RegisterType((*QueryEstimateRegisterNameRequest)(nil), "dymensionxyz.dymension.dymns.QueryEstimateRegisterNameRequest")
	proto.RegisterType((*QueryEstimateRegisterNameResponse)(nil), "dymensionxyz.dymension.dymns.QueryEstimateRegisterNameResponse")
	proto.RegisterType((*QueryReverseResolveAddressRequest)(nil), "dymensionxyz.dymension.dymns.QueryReverseResolveAddressRequest")
	proto.RegisterType((*QueryReverseResolveAddressResponse)(nil), "dymensionxyz.dymension.dymns.QueryReverseResolveAddressResponse")
	proto.RegisterMapType((map[string]ReverseResolveAddressResult)(nil), "dymensionxyz.dymension.dymns.QueryReverseResolveAddressResponse.ResultEntry")
	proto.RegisterType((*ReverseResolveAddressResult)(nil), "dymensionxyz.dymension.dymns.ReverseResolveAddressResult")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/dymns/query.proto", fileDescriptor_c9fbab881fb7aa6c)
}

var fileDescriptor_c9fbab881fb7aa6c = []byte{
	// 1107 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xcf, 0xda, 0xf9, 0xf9, 0x5c, 0x7d, 0xbf, 0x61, 0xea, 0x96, 0x74, 0x89, 0x9c, 0xb0, 0xa4,
	0x34, 0x15, 0x64, 0xb7, 0x71, 0x68, 0xd5, 0x16, 0xd1, 0x3a, 0x86, 0x54, 0xa9, 0x54, 0x35, 0x65,
	0x7b, 0xa1, 0x5c, 0x56, 0x1b, 0xef, 0xe0, 0x2e, 0xac, 0x77, 0x9c, 0x99, 0xb1, 0x9b, 0x25, 0xca,
	0x85, 0x03, 0x57, 0x90, 0x38, 0x72, 0xe1, 0xce, 0x91, 0x7f, 0xa2, 0x37, 0x82, 0x10, 0x12, 0x07,
	0x84, 0x50, 0x82, 0x04, 0x7f, 0x00, 0x7f, 0x00, 0xf2, 0xec, 0x5b, 0xc7, 0x36, 0xf6, 0x66, 0x93,
	0xdc, 0xe6, 0xc7, 0x7b, 0x9f, 0xf9, 0x7c, 0xde, 0xbc, 0x79, 0x6f, 0x17, 0x96, 0xbd, 0xa8, 0x41,
	0x43, 0xe1, 0xb3, 0x70, 0x37, 0xfa, 0xdc, 0xea, 0x4e, 0x3a, 0xa3, 0x50, 0x58, 0x3b, 0x2d, 0xca,
	0x23, 0xb3, 0xc9, 0x99, 0x64, 0x64, 0xbe, 0xd7, 0xd2, 0xec, 0x4e, 0x4c, 0x65, 0xa9, 0x17, 0xeb,
	0xac, 0xce, 0x94, 0xa1, 0xd5, 0x19, 0xc5, 0x3e, 0xfa, 0x7c, 0x9d, 0xb1, 0x7a, 0x40, 0x2d, 0xb7,
	0xe9, 0x5b, 0x6e, 0x18, 0x32, 0xe9, 0x4a, 0x9f, 0x85, 0x02, 0x77, 0xaf, 0xa7, 0x9e, 0xdd, 0x74,
	0xb9, 0xdb, 0x48, 0x4c, 0xdf, 0x4a, 0x35, 0xf5, 0xa2, 0x86, 0x13, 0xba, 0x0d, 0x8a, 0xc6, 0x2b,
	0xa9, 0xc6, 0x82, 0x06, 0x81, 0xc3, 0xb8, 0x47, 0x39, 0x9a, 0x97, 0x6a, 0x4c, 0x34, 0x98, 0xb0,
	0xb6, 0x5d, 0x41, 0xad, 0xf6, 0xea, 0x36, 0x95, 0xee, 0xaa, 0x55, 0x63, 0x7e, 0x18, 0xef, 0x1b,
	0x45, 0x20, 0x1f, 0x76, 0xe2, 0xf0, 0x44, 0x11, 0xb2, 0xe9, 0x4e, 0x8b, 0x0a, 0x69, 0x3c, 0x83,
	0x8b, 0x7d, 0xab, 0xa2, 0xc9, 0x42, 0x41, 0x49, 0x15, 0x26, 0x63, 0xe2, 0x73, 0xda, 0xa2, 0xb6,
	0x5c, 0x28, 0x2f, 0x99, 0x69, 0x61, 0x33, 0x63, 0xef, 0xea, 0xf8, 0xcb, 0xdf, 0x17, 0xc6, 0x6c,
	0xf4, 0x34, 0x6e, 0x21, 0xf4, 0x07, 0x51, 0xe3, 0xb1, 0xdb, 0xa0, 0x78, 0x22, 0xb9, 0x02, 0xd3,
	0x89, 0x50, 0x05, 0x3e, 0x63, 0x4f, 0x79, 0xb1, 0xc5, 0xdd, 0xf1, 0xbf, 0xbf, 0x5b, 0x18, 0x33,
	0x3e, 0x82, 0x62, 0xbf, 0x1f, 0x72, 0xaa, 0x0c, 0x38, 0x16, 0xca, 0x57, 0xd3, 0x59, 0x25, 0x00,
	0x09, 0xbe, 0xf1, 0x10, 0xde, 0x50, 0xc8, 0x36, 0x15, 0x2c, 0x68, 0x53, 0xdc, 0x5f, 0xf7, 0x3c,
	0x4e, 0x85, 0xa0, 0x49, 0x4c, 0xc8, 0x3c, 0xcc, 0xb8, 0xc9, 0xda, 0x9c, 0xb6, 0x98, 0x5f, 0x9e,
	0xb1, 0x8f, 0x17, 0x90, 0xe4, 0x0e, 0x14, 0x6d, 0x2a, 0x5a, 0x81, 0xec, 0x07, 0x21, 0x73, 0x30,
	0x85, 0xa6, 0x89, 0x38, 0x9c, 0x92, 0xeb, 0x30, 0xcb, 0xe3, 0x73, 0x3d, 0x27, 0x31, 0xc9, 0x29,
	0x93, 0xff, 0x27, 0xeb, 0x09, 0x48, 0x11, 0x26, 0x28, 0xe7, 0x8c, 0xcf, 0xe5, 0xd5, 0x7e, 0x3c,
	0x31, 0xbe, 0xd2, 0x60, 0x29, 0x9d, 0x3e, 0x06, 0xaa, 0x0e, 0x64, 0xf0, 0x24, 0x14, 0x52, 0x28,
	0x97, 0xd3, 0x43, 0x36, 0x4c, 0x13, 0x5e, 0xeb, 0x2b, 0x03, 0x2c, 0xa9, 0x30, 0x2a, 0x60, 0xf4,
	0xde, 0x94, 0xd8, 0x7a, 0x11, 0x52, 0xaf, 0x1a, 0xad, 0xd7, 0x6a, 0xac, 0x15, 0xca, 0x24, 0x9c,
	0x45, 0x98, 0x60, 0x2f, 0x42, 0xca, 0x31, 0x20, 0xf1, 0x04, 0xc3, 0xc8, 0xf0, 0x46, 0x46, 0x21,
	0xa0, 0xa2, 0x4d, 0x98, 0x49, 0xae, 0x3e, 0x11, 0x92, 0xed, 0xee, 0x91, 0xfb, 0x34, 0x66, 0x80,
	0x30, 0x6e, 0xc3, 0x25, 0x75, 0xe0, 0x53, 0x1a, 0x04, 0x5b, 0x9d, 0xd7, 0x93, 0x39, 0x2d, 0x1d,
	0xb8, 0x3c, 0xe8, 0x89, 0xec, 0x36, 0x60, 0x92, 0xab, 0xb8, 0x61, 0x5a, 0x5e, 0x4b, 0xa7, 0xd6,
	0x05, 0x48, 0xde, 0x4b, 0xec, 0x6c, 0x54, 0x61, 0x41, 0x1d, 0xb0, 0xe9, 0x0b, 0xc9, 0xb8, 0x5f,
	0x73, 0x83, 0xd3, 0x93, 0xf4, 0x61, 0x71, 0x34, 0xc6, 0x10, 0xba, 0xf9, 0xb3, 0xd3, 0x0d, 0xf1,
	0xa8, 0x0d, 0x21, 0xfd, 0x86, 0x2b, 0xa9, 0x4d, 0xeb, 0xbe, 0x90, 0x94, 0xf7, 0xbe, 0x75, 0x02,
	0xe3, 0x3d, 0x5c, 0xd5, 0x98, 0xe8, 0x30, 0xed, 0xb5, 0xb8, 0xaa, 0xa0, 0x2a, 0xff, 0xf3, 0x76,
	0x77, 0x7e, 0x9c, 0x2a, 0xf9, 0xff, 0xa6, 0xca, 0x3f, 0x1a, 0xbc, 0x9e, 0x72, 0x20, 0x8a, 0x7b,
	0x08, 0xb3, 0x9f, 0xf8, 0x5c, 0x48, 0x27, 0xa2, 0x2e, 0x77, 0x9a, 0xdc, 0xaf, 0x25, 0xc5, 0xe2,
	0x8a, 0x19, 0x17, 0x48, 0xb3, 0x53, 0x20, 0x4d, 0x2c, 0x90, 0xe6, 0xfb, 0xcc, 0x0f, 0x51, 0xd8,
	0xff, 0x94, 0xe3, 0x33, 0xea, 0xf2, 0x27, 0x1d, 0x37, 0x52, 0x85, 0x0b, 0x74, 0x57, 0xd2, 0xd0,
	0x43, 0x98, 0x5c, 0x36, 0x98, 0x42, 0xec, 0x14, 0x63, 0x54, 0xa0, 0x20, 0x99, 0x74, 0x03, 0x84,
	0xc8, 0x67, 0x83, 0x00, 0xe5, 0xa3, 0x10, 0x8c, 0x75, 0x54, 0x6d, 0xd3, 0x36, 0xe5, 0x82, 0xe2,
	0xdb, 0xc7, 0x37, 0x98, 0xa9, 0x62, 0x19, 0x5f, 0xe6, 0xf0, 0x9d, 0x8e, 0xc0, 0xc0, 0xd0, 0x7d,
	0x3a, 0x90, 0x17, 0x8f, 0xd2, 0xf3, 0xe2, 0x64, 0x44, 0xac, 0x26, 0x1b, 0xa1, 0xe4, 0x51, 0x7f,
	0xf2, 0xe8, 0x12, 0x0a, 0x3d, 0x9b, 0x64, 0x16, 0xf2, 0x9f, 0xd1, 0x08, 0xd3, 0xa4, 0x33, 0x24,
	0x5b, 0x30, 0xd1, 0x76, 0x83, 0x56, 0x12, 0xf5, 0x3b, 0x27, 0x95, 0xad, 0xe1, 0x34, 0x5a, 0x81,
	0xb4, 0x63, 0x9c, 0xbb, 0xb9, 0xdb, 0x9a, 0xf1, 0x14, 0x5e, 0x4b, 0xb1, 0x24, 0x25, 0x80, 0x9a,
	0x1b, 0x7a, 0xbe, 0xe7, 0xca, 0x6e, 0x18, 0x7b, 0x56, 0x8e, 0xcb, 0x72, 0xae, 0xa7, 0x2c, 0x97,
	0x0f, 0x2e, 0xc0, 0x84, 0x8a, 0x05, 0xf9, 0x56, 0x83, 0xc9, 0xb8, 0x13, 0x92, 0x1b, 0x19, 0x62,
	0xd7, 0xd7, 0x88, 0xf5, 0xd5, 0x53, 0x78, 0xc4, 0xe1, 0x35, 0xde, 0xfe, 0xe2, 0xe7, 0x3f, 0xbf,
	0xc9, 0xbd, 0x49, 0x96, 0xac, 0x0c, 0x5f, 0x20, 0xe4, 0x7b, 0x0d, 0xa6, 0xb0, 0x2a, 0x92, 0x2c,
	0x87, 0xf5, 0xb7, 0x6d, 0xbd, 0x7c, 0x1a, 0x17, 0x24, 0x78, 0x47, 0x11, 0x5c, 0x23, 0xab, 0x56,
	0xa6, 0xef, 0x1e, 0x6b, 0x2f, 0x19, 0xed, 0x93, 0x1f, 0x35, 0x78, 0x75, 0x44, 0x9f, 0x23, 0xeb,
	0x99, 0x12, 0x33, 0xad, 0xc5, 0xeb, 0xd5, 0xf3, 0x40, 0xa0, 0xba, 0x15, 0xa5, 0xee, 0x1a, 0xb9,
	0x9a, 0xae, 0x0e, 0xdb, 0x26, 0xf9, 0x45, 0x83, 0xcb, 0xc3, 0xdb, 0x1c, 0xa9, 0x64, 0x8f, 0xed,
	0xf0, 0x1e, 0xab, 0xaf, 0x9f, 0x03, 0x01, 0xe5, 0xdc, 0x52, 0x72, 0x6e, 0x10, 0x33, 0x5d, 0x4e,
	0xa7, 0x24, 0x7b, 0xce, 0x76, 0x64, 0xed, 0xa9, 0xe2, 0xbc, 0x4f, 0x7e, 0xd0, 0x60, 0xa6, 0xdb,
	0x23, 0xc8, 0x5a, 0x06, 0x22, 0x83, 0x6d, 0x4d, 0x7f, 0xe7, 0x74, 0x4e, 0x48, 0xf8, 0x5d, 0x45,
	0xf8, 0x26, 0x59, 0xb3, 0x32, 0x7e, 0x28, 0xf7, 0xe6, 0xd7, 0x6f, 0x1a, 0x5c, 0x1c, 0xd2, 0x24,
	0xc9, 0x7b, 0x19, 0xa8, 0x8c, 0x6e, 0xd0, 0xfa, 0xbd, 0xb3, 0xba, 0xa3, 0xa6, 0x07, 0x4a, 0x53,
	0x85, 0xdc, 0x4b, 0xd7, 0xf4, 0xbc, 0x0b, 0xe1, 0x0c, 0x97, 0xf7, 0x97, 0x06, 0xc5, 0x61, 0x7d,
	0x92, 0x64, 0x21, 0x98, 0xd2, 0xd1, 0xf5, 0xfb, 0x67, 0xf6, 0x47, 0x85, 0x8f, 0x95, 0xc2, 0x4d,
	0xf2, 0x20, 0x5d, 0x21, 0x45, 0x0c, 0x87, 0x23, 0x08, 0x56, 0x08, 0x25, 0xcf, 0xda, 0x4b, 0xbe,
	0x18, 0xf6, 0xc9, 0x4f, 0x1a, 0x5c, 0x1a, 0x5a, 0xd4, 0xc9, 0xfd, 0xb3, 0xf7, 0xaf, 0x58, 0x6b,
	0xe5, 0xbc, 0x0d, 0xd0, 0xb8, 0xa9, 0xc4, 0x5a, 0x64, 0xe5, 0xa4, 0x12, 0xa1, 0x40, 0x1c, 0x2c,
	0x15, 0xd5, 0x47, 0x2f, 0x0f, 0x4b, 0xda, 0xc1, 0x61, 0x49, 0xfb, 0xe3, 0xb0, 0xa4, 0x7d, 0x7d,
	0x54, 0x1a, 0x3b, 0x38, 0x2a, 0x8d, 0xfd, 0x7a, 0x54, 0x1a, 0xfb, 0xb8, 0x5c, 0xf7, 0xe5, 0xf3,
	0xd6, 0xb6, 0x59, 0x63, 0x8d, 0x51, 0x90, 0xed, 0x35, 0x6b, 0x17, 0x71, 0x65, 0xd4, 0xa4, 0x62,
	0x7b, 0x52, 0xfd, 0xff, 0xad, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x09, 0x1d, 0x79, 0x24,
	0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// DymName queries a Dym-Name by its name.
	DymName(ctx context.Context, in *QueryDymNameRequest, opts ...grpc.CallOption) (*QueryDymNameResponse, error)
	// ResolveDymNameAddresses resolves multiple Dym-Name Addresses to account addresses.
	ResolveDymNameAddresses(ctx context.Context, in *QueryResolveDymNameAddressesRequest, opts ...grpc.CallOption) (*QueryResolveDymNameAddressesResponse, error)
	// DymNamesOwnedByAccount queries the Dym-Names owned by an account.
	DymNamesOwnedByAccount(ctx context.Context, in *QueryDymNamesOwnedByAccountRequest, opts ...grpc.CallOption) (*QueryDymNamesOwnedByAccountResponse, error)
	// SellOrder queries the active SO of a Dym-Name.
	SellOrder(ctx context.Context, in *QuerySellOrderRequest, opts ...grpc.CallOption) (*QuerySellOrderResponse, error)
	// HistoricalSellOrder queries the historical SOs of a Dym-Name.
	HistoricalSellOrder(ctx context.Context, in *QueryHistoricalSellOrderRequest, opts ...grpc.CallOption) (*QueryHistoricalSellOrderResponse, error)
	// EstimateRegisterName estimates the cost to register a Dym-Name.
	EstimateRegisterName(ctx context.Context, in *QueryEstimateRegisterNameRequest, opts ...grpc.CallOption) (*QueryEstimateRegisterNameResponse, error)
	// ReverseResolveAddress resolves multiple account addresses to Dym-Name Addresses.
	ReverseResolveAddress(ctx context.Context, in *QueryReverseResolveAddressRequest, opts ...grpc.CallOption) (*QueryReverseResolveAddressResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DymName(ctx context.Context, in *QueryDymNameRequest, opts ...grpc.CallOption) (*QueryDymNameResponse, error) {
	out := new(QueryDymNameResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/DymName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ResolveDymNameAddresses(ctx context.Context, in *QueryResolveDymNameAddressesRequest, opts ...grpc.CallOption) (*QueryResolveDymNameAddressesResponse, error) {
	out := new(QueryResolveDymNameAddressesResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/ResolveDymNameAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DymNamesOwnedByAccount(ctx context.Context, in *QueryDymNamesOwnedByAccountRequest, opts ...grpc.CallOption) (*QueryDymNamesOwnedByAccountResponse, error) {
	out := new(QueryDymNamesOwnedByAccountResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/DymNamesOwnedByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SellOrder(ctx context.Context, in *QuerySellOrderRequest, opts ...grpc.CallOption) (*QuerySellOrderResponse, error) {
	out := new(QuerySellOrderResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/SellOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HistoricalSellOrder(ctx context.Context, in *QueryHistoricalSellOrderRequest, opts ...grpc.CallOption) (*QueryHistoricalSellOrderResponse, error) {
	out := new(QueryHistoricalSellOrderResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/HistoricalSellOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateRegisterName(ctx context.Context, in *QueryEstimateRegisterNameRequest, opts ...grpc.CallOption) (*QueryEstimateRegisterNameResponse, error) {
	out := new(QueryEstimateRegisterNameResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/EstimateRegisterName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReverseResolveAddress(ctx context.Context, in *QueryReverseResolveAddressRequest, opts ...grpc.CallOption) (*QueryReverseResolveAddressResponse, error) {
	out := new(QueryReverseResolveAddressResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/ReverseResolveAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// DymName queries a Dym-Name by its name.
	DymName(context.Context, *QueryDymNameRequest) (*QueryDymNameResponse, error)
	// ResolveDymNameAddresses resolves multiple Dym-Name Addresses to account addresses.
	ResolveDymNameAddresses(context.Context, *QueryResolveDymNameAddressesRequest) (*QueryResolveDymNameAddressesResponse, error)
	// DymNamesOwnedByAccount queries the Dym-Names owned by an account.
	DymNamesOwnedByAccount(context.Context, *QueryDymNamesOwnedByAccountRequest) (*QueryDymNamesOwnedByAccountResponse, error)
	// SellOrder queries the active SO of a Dym-Name.
	SellOrder(context.Context, *QuerySellOrderRequest) (*QuerySellOrderResponse, error)
	// HistoricalSellOrder queries the historical SOs of a Dym-Name.
	HistoricalSellOrder(context.Context, *QueryHistoricalSellOrderRequest) (*QueryHistoricalSellOrderResponse, error)
	// EstimateRegisterName estimates the cost to register a Dym-Name.
	EstimateRegisterName(context.Context, *QueryEstimateRegisterNameRequest) (*QueryEstimateRegisterNameResponse, error)
	// ReverseResolveAddress resolves multiple account addresses to Dym-Name Addresses.
	ReverseResolveAddress(context.Context, *QueryReverseResolveAddressRequest) (*QueryReverseResolveAddressResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) DymName(ctx context.Context, req *QueryDymNameRequest) (*QueryDymNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DymName not implemented")
}
func (*UnimplementedQueryServer) ResolveDymNameAddresses(ctx context.Context, req *QueryResolveDymNameAddressesRequest) (*QueryResolveDymNameAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveDymNameAddresses not implemented")
}
func (*UnimplementedQueryServer) DymNamesOwnedByAccount(ctx context.Context, req *QueryDymNamesOwnedByAccountRequest) (*QueryDymNamesOwnedByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DymNamesOwnedByAccount not implemented")
}
func (*UnimplementedQueryServer) SellOrder(ctx context.Context, req *QuerySellOrderRequest) (*QuerySellOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellOrder not implemented")
}
func (*UnimplementedQueryServer) HistoricalSellOrder(ctx context.Context, req *QueryHistoricalSellOrderRequest) (*QueryHistoricalSellOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricalSellOrder not implemented")
}
func (*UnimplementedQueryServer) EstimateRegisterName(ctx context.Context, req *QueryEstimateRegisterNameRequest) (*QueryEstimateRegisterNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateRegisterName not implemented")
}
func (*UnimplementedQueryServer) ReverseResolveAddress(ctx context.Context, req *QueryReverseResolveAddressRequest) (*QueryReverseResolveAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReverseResolveAddress not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DymName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDymNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DymName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/DymName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DymName(ctx, req.(*QueryDymNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ResolveDymNameAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryResolveDymNameAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ResolveDymNameAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/ResolveDymNameAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ResolveDymNameAddresses(ctx, req.(*QueryResolveDymNameAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DymNamesOwnedByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDymNamesOwnedByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DymNamesOwnedByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/DymNamesOwnedByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DymNamesOwnedByAccount(ctx, req.(*QueryDymNamesOwnedByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SellOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySellOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SellOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/SellOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SellOrder(ctx, req.(*QuerySellOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HistoricalSellOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoricalSellOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HistoricalSellOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/HistoricalSellOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HistoricalSellOrder(ctx, req.(*QueryHistoricalSellOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateRegisterName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimateRegisterNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateRegisterName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/EstimateRegisterName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateRegisterName(ctx, req.(*QueryEstimateRegisterNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReverseResolveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReverseResolveAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReverseResolveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/ReverseResolveAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReverseResolveAddress(ctx, req.(*QueryReverseResolveAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dymensionxyz.dymension.dymns.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "DymName",
			Handler:    _Query_DymName_Handler,
		},
		{
			MethodName: "ResolveDymNameAddresses",
			Handler:    _Query_ResolveDymNameAddresses_Handler,
		},
		{
			MethodName: "DymNamesOwnedByAccount",
			Handler:    _Query_DymNamesOwnedByAccount_Handler,
		},
		{
			MethodName: "SellOrder",
			Handler:    _Query_SellOrder_Handler,
		},
		{
			MethodName: "HistoricalSellOrder",
			Handler:    _Query_HistoricalSellOrder_Handler,
		},
		{
			MethodName: "EstimateRegisterName",
			Handler:    _Query_EstimateRegisterName_Handler,
		},
		{
			MethodName: "ReverseResolveAddress",
			Handler:    _Query_ReverseResolveAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dymensionxyz/dymension/dymns/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDymNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDymNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDymNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DymName) > 0 {
		i -= len(m.DymName)
		copy(dAtA[i:], m.DymName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DymName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDymNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDymNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDymNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DymName != nil {
		{
			size, err := m.DymName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryResolveDymNameAddressesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResolveDymNameAddressesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResolveDymNameAddressesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResultDymNameAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultDymNameAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResultDymNameAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ResolvedAddress) > 0 {
		i -= len(m.ResolvedAddress)
		copy(dAtA[i:], m.ResolvedAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ResolvedAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryResolveDymNameAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResolveDymNameAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResolveDymNameAddressesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResolvedAddresses) > 0 {
		for iNdEx := len(m.ResolvedAddresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResolvedAddresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDymNamesOwnedByAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDymNamesOwnedByAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDymNamesOwnedByAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDymNamesOwnedByAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDymNamesOwnedByAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDymNamesOwnedByAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DymNames) > 0 {
		for iNdEx := len(m.DymNames) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DymNames[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySellOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySellOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySellOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DymName) > 0 {
		i -= len(m.DymName)
		copy(dAtA[i:], m.DymName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DymName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySellOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySellOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySellOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryHistoricalSellOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHistoricalSellOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHistoricalSellOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DymName) > 0 {
		i -= len(m.DymName)
		copy(dAtA[i:], m.DymName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DymName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHistoricalSellOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHistoricalSellOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHistoricalSellOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for iNdEx := len(m.Result) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Result[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateRegisterNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateRegisterNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateRegisterNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Duration != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateRegisterNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateRegisterNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateRegisterNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.ExtendPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.FirstYearPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryReverseResolveAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReverseResolveAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReverseResolveAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryReverseResolveAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReverseResolveAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReverseResolveAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for k := range m.Result {
			v := m.Result[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReverseResolveAddressResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReverseResolveAddressResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReverseResolveAddressResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Candidates) > 0 {
		for iNdEx := len(m.Candidates) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Candidates[iNdEx])
			copy(dAtA[i:], m.Candidates[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Candidates[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDymNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DymName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDymNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DymName != nil {
		l = m.DymName.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryResolveDymNameAddressesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ResultDymNameAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ResolvedAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryResolveDymNameAddressesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResolvedAddresses) > 0 {
		for _, e := range m.ResolvedAddresses {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDymNamesOwnedByAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDymNamesOwnedByAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DymNames) > 0 {
		for _, e := range m.DymNames {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySellOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DymName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySellOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Result.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryHistoricalSellOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DymName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHistoricalSellOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryEstimateRegisterNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovQuery(uint64(m.Duration))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEstimateRegisterNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FirstYearPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.ExtendPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryReverseResolveAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryReverseResolveAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Result) > 0 {
		for k, v := range m.Result {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + 1 + l + sovQuery(uint64(l))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ReverseResolveAddressResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Candidates) > 0 {
		for _, s := range m.Candidates {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDymNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDymNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDymNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DymName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DymName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDymNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDymNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDymNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DymName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DymName == nil {
				m.DymName = &DymName{}
			}
			if err := m.DymName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResolveDymNameAddressesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResolveDymNameAddressesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResolveDymNameAddressesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultDymNameAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultDymNameAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultDymNameAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResolvedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResolveDymNameAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResolveDymNameAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResolveDymNameAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResolvedAddresses = append(m.ResolvedAddresses, ResultDymNameAddress{})
			if err := m.ResolvedAddresses[len(m.ResolvedAddresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDymNamesOwnedByAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDymNamesOwnedByAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDymNamesOwnedByAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDymNamesOwnedByAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDymNamesOwnedByAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDymNamesOwnedByAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DymNames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DymNames = append(m.DymNames, DymName{})
			if err := m.DymNames[len(m.DymNames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySellOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySellOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySellOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DymName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DymName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySellOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySellOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySellOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHistoricalSellOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHistoricalSellOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHistoricalSellOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DymName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DymName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHistoricalSellOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHistoricalSellOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHistoricalSellOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, SellOrder{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateRegisterNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateRegisterNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateRegisterNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateRegisterNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateRegisterNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateRegisterNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstYearPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FirstYearPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExtendPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReverseResolveAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReverseResolveAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReverseResolveAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReverseResolveAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReverseResolveAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReverseResolveAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = make(map[string]ReverseResolveAddressResult)
			}
			var mapkey string
			mapvalue := &ReverseResolveAddressResult{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ReverseResolveAddressResult{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Result[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReverseResolveAddressResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReverseResolveAddressResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReverseResolveAddressResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidates = append(m.Candidates, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
