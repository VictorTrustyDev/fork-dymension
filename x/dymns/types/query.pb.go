// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/dymns/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryDymNameRequest is the request type for the Query/DymName RPC method.
type QueryDymNameRequest struct {
	// dym_name is the name of the Dym-Name to query.
	DymName string `protobuf:"bytes,1,opt,name=dym_name,json=dymName,proto3" json:"dym_name,omitempty"`
}

func (m *QueryDymNameRequest) Reset()         { *m = QueryDymNameRequest{} }
func (m *QueryDymNameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDymNameRequest) ProtoMessage()    {}
func (*QueryDymNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{2}
}
func (m *QueryDymNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDymNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDymNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDymNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDymNameRequest.Merge(m, src)
}
func (m *QueryDymNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDymNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDymNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDymNameRequest proto.InternalMessageInfo

func (m *QueryDymNameRequest) GetDymName() string {
	if m != nil {
		return m.DymName
	}
	return ""
}

// QueryDymNameResponse is the response type for the Query/DymName RPC method.
type QueryDymNameResponse struct {
	// dym_name is the Dym-Name queried for.
	DymName *DymName `protobuf:"bytes,1,opt,name=dym_name,json=dymName,proto3" json:"dym_name,omitempty"`
}

func (m *QueryDymNameResponse) Reset()         { *m = QueryDymNameResponse{} }
func (m *QueryDymNameResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDymNameResponse) ProtoMessage()    {}
func (*QueryDymNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{3}
}
func (m *QueryDymNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDymNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDymNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDymNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDymNameResponse.Merge(m, src)
}
func (m *QueryDymNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDymNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDymNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDymNameResponse proto.InternalMessageInfo

func (m *QueryDymNameResponse) GetDymName() *DymName {
	if m != nil {
		return m.DymName
	}
	return nil
}

// QueryAliasRequest is the request type for the Query/QueryAlias RPC method.
type QueryAliasRequest struct {
	// alias to query
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (m *QueryAliasRequest) Reset()         { *m = QueryAliasRequest{} }
func (m *QueryAliasRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAliasRequest) ProtoMessage()    {}
func (*QueryAliasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{4}
}
func (m *QueryAliasRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAliasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAliasRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAliasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAliasRequest.Merge(m, src)
}
func (m *QueryAliasRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAliasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAliasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAliasRequest proto.InternalMessageInfo

func (m *QueryAliasRequest) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

// QueryAliasResponse
type QueryAliasResponse struct {
	// chain_id associated with the alias
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// found_sell_order is true if any sell-order is found for the alias.
	FoundSellOrder bool `protobuf:"varint,2,opt,name=found_sell_order,json=foundSellOrder,proto3" json:"found_sell_order,omitempty"`
	// buy_offer_ids is the list of buy offer ids for the alias.
	BuyOfferIds []string `protobuf:"bytes,3,rep,name=buy_offer_ids,json=buyOfferIds,proto3" json:"buy_offer_ids,omitempty"`
}

func (m *QueryAliasResponse) Reset()         { *m = QueryAliasResponse{} }
func (m *QueryAliasResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAliasResponse) ProtoMessage()    {}
func (*QueryAliasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{5}
}
func (m *QueryAliasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAliasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAliasResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAliasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAliasResponse.Merge(m, src)
}
func (m *QueryAliasResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAliasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAliasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAliasResponse proto.InternalMessageInfo

func (m *QueryAliasResponse) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueryAliasResponse) GetFoundSellOrder() bool {
	if m != nil {
		return m.FoundSellOrder
	}
	return false
}

func (m *QueryAliasResponse) GetBuyOfferIds() []string {
	if m != nil {
		return m.BuyOfferIds
	}
	return nil
}

// ResolveDymNameAddressesRequest is the request type for the Query/ResolveDymNameAddresses RPC method.
type ResolveDymNameAddressesRequest struct {
	// addresses defines the Dym-Name addresses to resolve.
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *ResolveDymNameAddressesRequest) Reset()         { *m = ResolveDymNameAddressesRequest{} }
func (m *ResolveDymNameAddressesRequest) String() string { return proto.CompactTextString(m) }
func (*ResolveDymNameAddressesRequest) ProtoMessage()    {}
func (*ResolveDymNameAddressesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{6}
}
func (m *ResolveDymNameAddressesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveDymNameAddressesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveDymNameAddressesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveDymNameAddressesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveDymNameAddressesRequest.Merge(m, src)
}
func (m *ResolveDymNameAddressesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResolveDymNameAddressesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveDymNameAddressesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveDymNameAddressesRequest proto.InternalMessageInfo

func (m *ResolveDymNameAddressesRequest) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// ResultDymNameAddress defines the result of a single Dym-Name address resolution.
type ResultDymNameAddress struct {
	// address is the input Dym-Name address to resolve.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// resolved_address is the resolved account address.
	ResolvedAddress string `protobuf:"bytes,2,opt,name=resolved_address,json=resolvedAddress,proto3" json:"resolved_address,omitempty"`
	// error is the error that occurred during the resolution.
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ResultDymNameAddress) Reset()         { *m = ResultDymNameAddress{} }
func (m *ResultDymNameAddress) String() string { return proto.CompactTextString(m) }
func (*ResultDymNameAddress) ProtoMessage()    {}
func (*ResultDymNameAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{7}
}
func (m *ResultDymNameAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResultDymNameAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResultDymNameAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResultDymNameAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultDymNameAddress.Merge(m, src)
}
func (m *ResultDymNameAddress) XXX_Size() int {
	return m.Size()
}
func (m *ResultDymNameAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultDymNameAddress.DiscardUnknown(m)
}

var xxx_messageInfo_ResultDymNameAddress proto.InternalMessageInfo

func (m *ResultDymNameAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ResultDymNameAddress) GetResolvedAddress() string {
	if m != nil {
		return m.ResolvedAddress
	}
	return ""
}

func (m *ResultDymNameAddress) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// ResolveDymNameAddressesResponse is the response type for the Query/ResolveDymNameAddresses RPC method.
type ResolveDymNameAddressesResponse struct {
	// resolved_addresses defines the resolved addresses for each input Dym-Name address.
	ResolvedAddresses []ResultDymNameAddress `protobuf:"bytes,1,rep,name=resolved_addresses,json=resolvedAddresses,proto3" json:"resolved_addresses"`
}

func (m *ResolveDymNameAddressesResponse) Reset()         { *m = ResolveDymNameAddressesResponse{} }
func (m *ResolveDymNameAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*ResolveDymNameAddressesResponse) ProtoMessage()    {}
func (*ResolveDymNameAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{8}
}
func (m *ResolveDymNameAddressesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveDymNameAddressesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveDymNameAddressesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveDymNameAddressesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveDymNameAddressesResponse.Merge(m, src)
}
func (m *ResolveDymNameAddressesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ResolveDymNameAddressesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveDymNameAddressesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveDymNameAddressesResponse proto.InternalMessageInfo

func (m *ResolveDymNameAddressesResponse) GetResolvedAddresses() []ResultDymNameAddress {
	if m != nil {
		return m.ResolvedAddresses
	}
	return nil
}

// QueryDymNamesOwnedByAccountRequest is the request type for the Query/DymNamesOwnedByAccount RPC method.
type QueryDymNamesOwnedByAccountRequest struct {
	// owner defines the address of the owner of the Dym-Names to query for.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryDymNamesOwnedByAccountRequest) Reset()         { *m = QueryDymNamesOwnedByAccountRequest{} }
func (m *QueryDymNamesOwnedByAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDymNamesOwnedByAccountRequest) ProtoMessage()    {}
func (*QueryDymNamesOwnedByAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{9}
}
func (m *QueryDymNamesOwnedByAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDymNamesOwnedByAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDymNamesOwnedByAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDymNamesOwnedByAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDymNamesOwnedByAccountRequest.Merge(m, src)
}
func (m *QueryDymNamesOwnedByAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDymNamesOwnedByAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDymNamesOwnedByAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDymNamesOwnedByAccountRequest proto.InternalMessageInfo

func (m *QueryDymNamesOwnedByAccountRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// QueryDymNamesOwnedByAccountResponse is the response type for the Query/DymNamesOwnedByAccount RPC method.
type QueryDymNamesOwnedByAccountResponse struct {
	// dym_names defines the Dym-Names owned by the input account.
	DymNames []DymName `protobuf:"bytes,1,rep,name=dym_names,json=dymNames,proto3" json:"dym_names"`
}

func (m *QueryDymNamesOwnedByAccountResponse) Reset()         { *m = QueryDymNamesOwnedByAccountResponse{} }
func (m *QueryDymNamesOwnedByAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDymNamesOwnedByAccountResponse) ProtoMessage()    {}
func (*QueryDymNamesOwnedByAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{10}
}
func (m *QueryDymNamesOwnedByAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDymNamesOwnedByAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDymNamesOwnedByAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDymNamesOwnedByAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDymNamesOwnedByAccountResponse.Merge(m, src)
}
func (m *QueryDymNamesOwnedByAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDymNamesOwnedByAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDymNamesOwnedByAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDymNamesOwnedByAccountResponse proto.InternalMessageInfo

func (m *QueryDymNamesOwnedByAccountResponse) GetDymNames() []DymName {
	if m != nil {
		return m.DymNames
	}
	return nil
}

// QuerySellOrderRequest is the request type for the Query/SellOrder RPC method.
type QuerySellOrderRequest struct {
	// goods_id is the Dym-Name/Alias to query the active Sell-Order for.
	GoodsId string `protobuf:"bytes,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	// order_type can be either "Dym-Name" or "Alias".
	OrderType string `protobuf:"bytes,2,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
}

func (m *QuerySellOrderRequest) Reset()         { *m = QuerySellOrderRequest{} }
func (m *QuerySellOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySellOrderRequest) ProtoMessage()    {}
func (*QuerySellOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{11}
}
func (m *QuerySellOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySellOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySellOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySellOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySellOrderRequest.Merge(m, src)
}
func (m *QuerySellOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySellOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySellOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySellOrderRequest proto.InternalMessageInfo

func (m *QuerySellOrderRequest) GetGoodsId() string {
	if m != nil {
		return m.GoodsId
	}
	return ""
}

func (m *QuerySellOrderRequest) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

// QuerySellOrderResponse is the response type for the Query/SellOrder RPC method.
type QuerySellOrderResponse struct {
	// result is the active Sell-Order for the Dym-Name/Alias.
	Result SellOrder `protobuf:"bytes,1,opt,name=result,proto3" json:"result"`
}

func (m *QuerySellOrderResponse) Reset()         { *m = QuerySellOrderResponse{} }
func (m *QuerySellOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySellOrderResponse) ProtoMessage()    {}
func (*QuerySellOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{12}
}
func (m *QuerySellOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySellOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySellOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySellOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySellOrderResponse.Merge(m, src)
}
func (m *QuerySellOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySellOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySellOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySellOrderResponse proto.InternalMessageInfo

func (m *QuerySellOrderResponse) GetResult() SellOrder {
	if m != nil {
		return m.Result
	}
	return SellOrder{}
}

// QueryHistoricalSellOrderOfDymNameRequest is the request type for the Query/HistoricalSellOrder RPC method.
type QueryHistoricalSellOrderOfDymNameRequest struct {
	// dym_name is the Dym-Name to query the historical Sell-Orders for.
	DymName string `protobuf:"bytes,1,opt,name=dym_name,json=dymName,proto3" json:"dym_name,omitempty"`
}

func (m *QueryHistoricalSellOrderOfDymNameRequest) Reset() {
	*m = QueryHistoricalSellOrderOfDymNameRequest{}
}
func (m *QueryHistoricalSellOrderOfDymNameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHistoricalSellOrderOfDymNameRequest) ProtoMessage()    {}
func (*QueryHistoricalSellOrderOfDymNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{13}
}
func (m *QueryHistoricalSellOrderOfDymNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHistoricalSellOrderOfDymNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHistoricalSellOrderOfDymNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHistoricalSellOrderOfDymNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHistoricalSellOrderOfDymNameRequest.Merge(m, src)
}
func (m *QueryHistoricalSellOrderOfDymNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHistoricalSellOrderOfDymNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHistoricalSellOrderOfDymNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHistoricalSellOrderOfDymNameRequest proto.InternalMessageInfo

func (m *QueryHistoricalSellOrderOfDymNameRequest) GetDymName() string {
	if m != nil {
		return m.DymName
	}
	return ""
}

// QueryHistoricalSellOrderOfDymNameResponse is the response type for the Query/HistoricalSellOrder RPC method.
type QueryHistoricalSellOrderOfDymNameResponse struct {
	// result defines the historical Sell-Orders of the Dym-Name queried.
	Result []SellOrder `protobuf:"bytes,1,rep,name=result,proto3" json:"result"`
}

func (m *QueryHistoricalSellOrderOfDymNameResponse) Reset() {
	*m = QueryHistoricalSellOrderOfDymNameResponse{}
}
func (m *QueryHistoricalSellOrderOfDymNameResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryHistoricalSellOrderOfDymNameResponse) ProtoMessage() {}
func (*QueryHistoricalSellOrderOfDymNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{14}
}
func (m *QueryHistoricalSellOrderOfDymNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHistoricalSellOrderOfDymNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHistoricalSellOrderOfDymNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHistoricalSellOrderOfDymNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHistoricalSellOrderOfDymNameResponse.Merge(m, src)
}
func (m *QueryHistoricalSellOrderOfDymNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHistoricalSellOrderOfDymNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHistoricalSellOrderOfDymNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHistoricalSellOrderOfDymNameResponse proto.InternalMessageInfo

func (m *QueryHistoricalSellOrderOfDymNameResponse) GetResult() []SellOrder {
	if m != nil {
		return m.Result
	}
	return nil
}

// EstimateRegisterNameRequest is the request type for the Query/EstimateRegisterName RPC method.
type EstimateRegisterNameRequest struct {
	// name is the Dym-Name to be registered.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// duration is the number of years the Dym-Name will be registered for.
	Duration int64 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	// owner is the bech32-encoded address of the account which owns the order.
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *EstimateRegisterNameRequest) Reset()         { *m = EstimateRegisterNameRequest{} }
func (m *EstimateRegisterNameRequest) String() string { return proto.CompactTextString(m) }
func (*EstimateRegisterNameRequest) ProtoMessage()    {}
func (*EstimateRegisterNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{15}
}
func (m *EstimateRegisterNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateRegisterNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateRegisterNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateRegisterNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateRegisterNameRequest.Merge(m, src)
}
func (m *EstimateRegisterNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *EstimateRegisterNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateRegisterNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateRegisterNameRequest proto.InternalMessageInfo

func (m *EstimateRegisterNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EstimateRegisterNameRequest) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *EstimateRegisterNameRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// EstimateRegisterNameResponse is the response type for the Query/EstimateRegisterName RPC method.
type EstimateRegisterNameResponse struct {
	// first_year_price is the price to register the Dym-Name for the first year.
	FirstYearPrice types.Coin `protobuf:"bytes,1,opt,name=first_year_price,json=firstYearPrice,proto3" json:"first_year_price"`
	// extend_price is the price to extend the Dym-Name registration for another year.
	ExtendPrice types.Coin `protobuf:"bytes,2,opt,name=extend_price,json=extendPrice,proto3" json:"extend_price"`
	// total_price is the total price to register the Dym-Name for the specified duration.
	TotalPrice types.Coin `protobuf:"bytes,3,opt,name=total_price,json=totalPrice,proto3" json:"total_price"`
}

func (m *EstimateRegisterNameResponse) Reset()         { *m = EstimateRegisterNameResponse{} }
func (m *EstimateRegisterNameResponse) String() string { return proto.CompactTextString(m) }
func (*EstimateRegisterNameResponse) ProtoMessage()    {}
func (*EstimateRegisterNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{16}
}
func (m *EstimateRegisterNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateRegisterNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateRegisterNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateRegisterNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateRegisterNameResponse.Merge(m, src)
}
func (m *EstimateRegisterNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *EstimateRegisterNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateRegisterNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateRegisterNameResponse proto.InternalMessageInfo

func (m *EstimateRegisterNameResponse) GetFirstYearPrice() types.Coin {
	if m != nil {
		return m.FirstYearPrice
	}
	return types.Coin{}
}

func (m *EstimateRegisterNameResponse) GetExtendPrice() types.Coin {
	if m != nil {
		return m.ExtendPrice
	}
	return types.Coin{}
}

func (m *EstimateRegisterNameResponse) GetTotalPrice() types.Coin {
	if m != nil {
		return m.TotalPrice
	}
	return types.Coin{}
}

// ReverseResolveAddressRequest is the request type for the Query/ReverseResolveAddress RPC method.
type ReverseResolveAddressRequest struct {
	// addresses defines the addresses to reverse resolve. Can be both bech32 and hex addresses.
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// working_chain_id defines the chain id to use for the reverse resolution.
	// Leave empty to use the host chain id.
	WorkingChainId string `protobuf:"bytes,2,opt,name=working_chain_id,json=workingChainId,proto3" json:"working_chain_id,omitempty"`
}

func (m *ReverseResolveAddressRequest) Reset()         { *m = ReverseResolveAddressRequest{} }
func (m *ReverseResolveAddressRequest) String() string { return proto.CompactTextString(m) }
func (*ReverseResolveAddressRequest) ProtoMessage()    {}
func (*ReverseResolveAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{17}
}
func (m *ReverseResolveAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReverseResolveAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReverseResolveAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReverseResolveAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReverseResolveAddressRequest.Merge(m, src)
}
func (m *ReverseResolveAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReverseResolveAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReverseResolveAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReverseResolveAddressRequest proto.InternalMessageInfo

func (m *ReverseResolveAddressRequest) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *ReverseResolveAddressRequest) GetWorkingChainId() string {
	if m != nil {
		return m.WorkingChainId
	}
	return ""
}

// ReverseResolveAddressResponse is the response type for the Query/ReverseResolveAddress RPC method.
type ReverseResolveAddressResponse struct {
	// result defines the reverse resolution result for each input address.
	Result map[string]ReverseResolveAddressResult `protobuf:"bytes,1,rep,name=result,proto3" json:"result" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// working_chain_id is the chain id used for the reverse resolution.
	WorkingChainId string `protobuf:"bytes,2,opt,name=working_chain_id,json=workingChainId,proto3" json:"working_chain_id,omitempty"`
}

func (m *ReverseResolveAddressResponse) Reset()         { *m = ReverseResolveAddressResponse{} }
func (m *ReverseResolveAddressResponse) String() string { return proto.CompactTextString(m) }
func (*ReverseResolveAddressResponse) ProtoMessage()    {}
func (*ReverseResolveAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{18}
}
func (m *ReverseResolveAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReverseResolveAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReverseResolveAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReverseResolveAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReverseResolveAddressResponse.Merge(m, src)
}
func (m *ReverseResolveAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReverseResolveAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReverseResolveAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReverseResolveAddressResponse proto.InternalMessageInfo

func (m *ReverseResolveAddressResponse) GetResult() map[string]ReverseResolveAddressResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReverseResolveAddressResponse) GetWorkingChainId() string {
	if m != nil {
		return m.WorkingChainId
	}
	return ""
}

type ReverseResolveAddressResult struct {
	// candidates are the Dym-Name addresses that the input address resolves to. Take one of them.
	Candidates []string `protobuf:"bytes,1,rep,name=candidates,proto3" json:"candidates,omitempty"`
	// error is the error that occurred during the resolution.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReverseResolveAddressResult) Reset()         { *m = ReverseResolveAddressResult{} }
func (m *ReverseResolveAddressResult) String() string { return proto.CompactTextString(m) }
func (*ReverseResolveAddressResult) ProtoMessage()    {}
func (*ReverseResolveAddressResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{19}
}
func (m *ReverseResolveAddressResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReverseResolveAddressResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReverseResolveAddressResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReverseResolveAddressResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReverseResolveAddressResult.Merge(m, src)
}
func (m *ReverseResolveAddressResult) XXX_Size() int {
	return m.Size()
}
func (m *ReverseResolveAddressResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ReverseResolveAddressResult.DiscardUnknown(m)
}

var xxx_messageInfo_ReverseResolveAddressResult proto.InternalMessageInfo

func (m *ReverseResolveAddressResult) GetCandidates() []string {
	if m != nil {
		return m.Candidates
	}
	return nil
}

func (m *ReverseResolveAddressResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// QueryTranslateAliasOrChainIdToChainIdRequest is the request type for the Query/TranslateAliasOrChainIdToChainId RPC method.
type QueryTranslateAliasOrChainIdToChainIdRequest struct {
	// alias_or_chain_id is the alias or chain id to translate.
	AliasOrChainId string `protobuf:"bytes,1,opt,name=alias_or_chain_id,json=aliasOrChainId,proto3" json:"alias_or_chain_id,omitempty"`
}

func (m *QueryTranslateAliasOrChainIdToChainIdRequest) Reset() {
	*m = QueryTranslateAliasOrChainIdToChainIdRequest{}
}
func (m *QueryTranslateAliasOrChainIdToChainIdRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTranslateAliasOrChainIdToChainIdRequest) ProtoMessage() {}
func (*QueryTranslateAliasOrChainIdToChainIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{20}
}
func (m *QueryTranslateAliasOrChainIdToChainIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTranslateAliasOrChainIdToChainIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTranslateAliasOrChainIdToChainIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTranslateAliasOrChainIdToChainIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTranslateAliasOrChainIdToChainIdRequest.Merge(m, src)
}
func (m *QueryTranslateAliasOrChainIdToChainIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTranslateAliasOrChainIdToChainIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTranslateAliasOrChainIdToChainIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTranslateAliasOrChainIdToChainIdRequest proto.InternalMessageInfo

func (m *QueryTranslateAliasOrChainIdToChainIdRequest) GetAliasOrChainId() string {
	if m != nil {
		return m.AliasOrChainId
	}
	return ""
}

// QueryTranslateAliasOrChainIdToChainIdResponse is the response type for the Query/TranslateAliasOrChainIdToChainId RPC method.
type QueryTranslateAliasOrChainIdToChainIdResponse struct {
	// chain_id is the chain id that the alias or chain id translates to.
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryTranslateAliasOrChainIdToChainIdResponse) Reset() {
	*m = QueryTranslateAliasOrChainIdToChainIdResponse{}
}
func (m *QueryTranslateAliasOrChainIdToChainIdResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTranslateAliasOrChainIdToChainIdResponse) ProtoMessage() {}
func (*QueryTranslateAliasOrChainIdToChainIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{21}
}
func (m *QueryTranslateAliasOrChainIdToChainIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTranslateAliasOrChainIdToChainIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTranslateAliasOrChainIdToChainIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTranslateAliasOrChainIdToChainIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTranslateAliasOrChainIdToChainIdResponse.Merge(m, src)
}
func (m *QueryTranslateAliasOrChainIdToChainIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTranslateAliasOrChainIdToChainIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTranslateAliasOrChainIdToChainIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTranslateAliasOrChainIdToChainIdResponse proto.InternalMessageInfo

func (m *QueryTranslateAliasOrChainIdToChainIdResponse) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// QueryBuyOfferByIdRequest is the request type for the Query/BuyOfferById RPC method.
type QueryBuyOfferByIdRequest struct {
	// id of buy offer to query.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryBuyOfferByIdRequest) Reset()         { *m = QueryBuyOfferByIdRequest{} }
func (m *QueryBuyOfferByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBuyOfferByIdRequest) ProtoMessage()    {}
func (*QueryBuyOfferByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{22}
}
func (m *QueryBuyOfferByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuyOfferByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuyOfferByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuyOfferByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuyOfferByIdRequest.Merge(m, src)
}
func (m *QueryBuyOfferByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuyOfferByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuyOfferByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuyOfferByIdRequest proto.InternalMessageInfo

func (m *QueryBuyOfferByIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryBuyOfferByIdResponse is the response type for the Query/BuyOfferById RPC method.
type QueryBuyOfferByIdResponse struct {
	// offer is the result.
	Offer BuyOffer `protobuf:"bytes,1,opt,name=offer,proto3" json:"offer"`
}

func (m *QueryBuyOfferByIdResponse) Reset()         { *m = QueryBuyOfferByIdResponse{} }
func (m *QueryBuyOfferByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBuyOfferByIdResponse) ProtoMessage()    {}
func (*QueryBuyOfferByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{23}
}
func (m *QueryBuyOfferByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuyOfferByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuyOfferByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuyOfferByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuyOfferByIdResponse.Merge(m, src)
}
func (m *QueryBuyOfferByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuyOfferByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuyOfferByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuyOfferByIdResponse proto.InternalMessageInfo

func (m *QueryBuyOfferByIdResponse) GetOffer() BuyOffer {
	if m != nil {
		return m.Offer
	}
	return BuyOffer{}
}

// QueryBuyOffersByAccountRequest is the request type for the Query/BuyOffersPlacedByAccount RPC method.
type QueryBuyOffersPlacedByAccountRequest struct {
	// account is the account address to query the placed buy offers.
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *QueryBuyOffersPlacedByAccountRequest) Reset()         { *m = QueryBuyOffersPlacedByAccountRequest{} }
func (m *QueryBuyOffersPlacedByAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBuyOffersPlacedByAccountRequest) ProtoMessage()    {}
func (*QueryBuyOffersPlacedByAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{24}
}
func (m *QueryBuyOffersPlacedByAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuyOffersPlacedByAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuyOffersPlacedByAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuyOffersPlacedByAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuyOffersPlacedByAccountRequest.Merge(m, src)
}
func (m *QueryBuyOffersPlacedByAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuyOffersPlacedByAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuyOffersPlacedByAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuyOffersPlacedByAccountRequest proto.InternalMessageInfo

func (m *QueryBuyOffersPlacedByAccountRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

// QueryBuyOffersByAccountResponse is the response type for the Query/BuyOffersPlacedByAccount RPC method.
type QueryBuyOffersPlacedByAccountResponse struct {
	// offers are the Buy-Offers placed by the account.
	Offers []BuyOffer `protobuf:"bytes,1,rep,name=offers,proto3" json:"offers"`
}

func (m *QueryBuyOffersPlacedByAccountResponse) Reset()         { *m = QueryBuyOffersPlacedByAccountResponse{} }
func (m *QueryBuyOffersPlacedByAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBuyOffersPlacedByAccountResponse) ProtoMessage()    {}
func (*QueryBuyOffersPlacedByAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{25}
}
func (m *QueryBuyOffersPlacedByAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuyOffersPlacedByAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuyOffersPlacedByAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuyOffersPlacedByAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuyOffersPlacedByAccountResponse.Merge(m, src)
}
func (m *QueryBuyOffersPlacedByAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuyOffersPlacedByAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuyOffersPlacedByAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuyOffersPlacedByAccountResponse proto.InternalMessageInfo

func (m *QueryBuyOffersPlacedByAccountResponse) GetOffers() []BuyOffer {
	if m != nil {
		return m.Offers
	}
	return nil
}

// QueryBuyOffersByDymNameRequest is the request type for the Query/BuyOffersByDymName RPC method.
type QueryBuyOffersByDymNameRequest struct {
	// name is the Dym-Name to query the buy offers placed for it.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryBuyOffersByDymNameRequest) Reset()         { *m = QueryBuyOffersByDymNameRequest{} }
func (m *QueryBuyOffersByDymNameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBuyOffersByDymNameRequest) ProtoMessage()    {}
func (*QueryBuyOffersByDymNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{26}
}
func (m *QueryBuyOffersByDymNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuyOffersByDymNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuyOffersByDymNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuyOffersByDymNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuyOffersByDymNameRequest.Merge(m, src)
}
func (m *QueryBuyOffersByDymNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuyOffersByDymNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuyOffersByDymNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuyOffersByDymNameRequest proto.InternalMessageInfo

func (m *QueryBuyOffersByDymNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// QueryBuyOffersByDymNameResponse is the response type for the Query/BuyOffersByDymName RPC method.
type QueryBuyOffersByDymNameResponse struct {
	// offers are the buy offers of the Dym-Name.
	Offers []BuyOffer `protobuf:"bytes,1,rep,name=offers,proto3" json:"offers"`
}

func (m *QueryBuyOffersByDymNameResponse) Reset()         { *m = QueryBuyOffersByDymNameResponse{} }
func (m *QueryBuyOffersByDymNameResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBuyOffersByDymNameResponse) ProtoMessage()    {}
func (*QueryBuyOffersByDymNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{27}
}
func (m *QueryBuyOffersByDymNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuyOffersByDymNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuyOffersByDymNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuyOffersByDymNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuyOffersByDymNameResponse.Merge(m, src)
}
func (m *QueryBuyOffersByDymNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuyOffersByDymNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuyOffersByDymNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuyOffersByDymNameResponse proto.InternalMessageInfo

func (m *QueryBuyOffersByDymNameResponse) GetOffers() []BuyOffer {
	if m != nil {
		return m.Offers
	}
	return nil
}

// QueryBuyOffersOfDymNamesOwnedByAccountRequest is the request type for the Query/BuyOffersOfDymNamesOwnedByAccount RPC method.
type QueryBuyOffersOfDymNamesOwnedByAccountRequest struct {
	// account is the account address to query all the buy offers of the Dym-Names owned by it.
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *QueryBuyOffersOfDymNamesOwnedByAccountRequest) Reset() {
	*m = QueryBuyOffersOfDymNamesOwnedByAccountRequest{}
}
func (m *QueryBuyOffersOfDymNamesOwnedByAccountRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryBuyOffersOfDymNamesOwnedByAccountRequest) ProtoMessage() {}
func (*QueryBuyOffersOfDymNamesOwnedByAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{28}
}
func (m *QueryBuyOffersOfDymNamesOwnedByAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuyOffersOfDymNamesOwnedByAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuyOffersOfDymNamesOwnedByAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuyOffersOfDymNamesOwnedByAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuyOffersOfDymNamesOwnedByAccountRequest.Merge(m, src)
}
func (m *QueryBuyOffersOfDymNamesOwnedByAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuyOffersOfDymNamesOwnedByAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuyOffersOfDymNamesOwnedByAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuyOffersOfDymNamesOwnedByAccountRequest proto.InternalMessageInfo

func (m *QueryBuyOffersOfDymNamesOwnedByAccountRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

// QueryBuyOffersOfDymNamesOwnedByAccountResponse is the response type for the Query/BuyOffersOfDymNamesOwnedByAccount RPC method.
type QueryBuyOffersOfDymNamesOwnedByAccountResponse struct {
	// offers are all the buy offers of the Dym-Names owned by the input account.
	Offers []BuyOffer `protobuf:"bytes,1,rep,name=offers,proto3" json:"offers"`
}

func (m *QueryBuyOffersOfDymNamesOwnedByAccountResponse) Reset() {
	*m = QueryBuyOffersOfDymNamesOwnedByAccountResponse{}
}
func (m *QueryBuyOffersOfDymNamesOwnedByAccountResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryBuyOffersOfDymNamesOwnedByAccountResponse) ProtoMessage() {}
func (*QueryBuyOffersOfDymNamesOwnedByAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{29}
}
func (m *QueryBuyOffersOfDymNamesOwnedByAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuyOffersOfDymNamesOwnedByAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuyOffersOfDymNamesOwnedByAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuyOffersOfDymNamesOwnedByAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuyOffersOfDymNamesOwnedByAccountResponse.Merge(m, src)
}
func (m *QueryBuyOffersOfDymNamesOwnedByAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuyOffersOfDymNamesOwnedByAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuyOffersOfDymNamesOwnedByAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuyOffersOfDymNamesOwnedByAccountResponse proto.InternalMessageInfo

func (m *QueryBuyOffersOfDymNamesOwnedByAccountResponse) GetOffers() []BuyOffer {
	if m != nil {
		return m.Offers
	}
	return nil
}

// QueryBuyOffersByAliasRequest is the request type for the Query/BuyOffersByAlias RPC method.
type QueryBuyOffersByAliasRequest struct {
	// alias is the alias to query the buy offers placed for it.
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (m *QueryBuyOffersByAliasRequest) Reset()         { *m = QueryBuyOffersByAliasRequest{} }
func (m *QueryBuyOffersByAliasRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBuyOffersByAliasRequest) ProtoMessage()    {}
func (*QueryBuyOffersByAliasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{30}
}
func (m *QueryBuyOffersByAliasRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuyOffersByAliasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuyOffersByAliasRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuyOffersByAliasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuyOffersByAliasRequest.Merge(m, src)
}
func (m *QueryBuyOffersByAliasRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuyOffersByAliasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuyOffersByAliasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuyOffersByAliasRequest proto.InternalMessageInfo

func (m *QueryBuyOffersByAliasRequest) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

// QueryBuyOffersByAliasResponse is the response type for the Query/BuyOffersByAlias RPC method.
type QueryBuyOffersByAliasResponse struct {
	// offers are the buy offers of the Dym-Name.
	Offers []BuyOffer `protobuf:"bytes,1,rep,name=offers,proto3" json:"offers"`
}

func (m *QueryBuyOffersByAliasResponse) Reset()         { *m = QueryBuyOffersByAliasResponse{} }
func (m *QueryBuyOffersByAliasResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBuyOffersByAliasResponse) ProtoMessage()    {}
func (*QueryBuyOffersByAliasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{31}
}
func (m *QueryBuyOffersByAliasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuyOffersByAliasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuyOffersByAliasResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuyOffersByAliasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuyOffersByAliasResponse.Merge(m, src)
}
func (m *QueryBuyOffersByAliasResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuyOffersByAliasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuyOffersByAliasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuyOffersByAliasResponse proto.InternalMessageInfo

func (m *QueryBuyOffersByAliasResponse) GetOffers() []BuyOffer {
	if m != nil {
		return m.Offers
	}
	return nil
}

// QueryBuyOffersOfAliasesLinkedToRollAppRequest is the request type for the Query/BuyOffersOfAliasesLinkedToRollApp RPC method.
type QueryBuyOffersOfAliasesLinkedToRollAppRequest struct {
	// rollapp_id is the rollapp to query all the buy offers of the aliases linked to it
	RollappId string `protobuf:"bytes,1,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
}

func (m *QueryBuyOffersOfAliasesLinkedToRollAppRequest) Reset() {
	*m = QueryBuyOffersOfAliasesLinkedToRollAppRequest{}
}
func (m *QueryBuyOffersOfAliasesLinkedToRollAppRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryBuyOffersOfAliasesLinkedToRollAppRequest) ProtoMessage() {}
func (*QueryBuyOffersOfAliasesLinkedToRollAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{32}
}
func (m *QueryBuyOffersOfAliasesLinkedToRollAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuyOffersOfAliasesLinkedToRollAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuyOffersOfAliasesLinkedToRollAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuyOffersOfAliasesLinkedToRollAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuyOffersOfAliasesLinkedToRollAppRequest.Merge(m, src)
}
func (m *QueryBuyOffersOfAliasesLinkedToRollAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuyOffersOfAliasesLinkedToRollAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuyOffersOfAliasesLinkedToRollAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuyOffersOfAliasesLinkedToRollAppRequest proto.InternalMessageInfo

func (m *QueryBuyOffersOfAliasesLinkedToRollAppRequest) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

// QueryBuyOffersOfAliasesLinkedToRollAppResponse is the response type for the Query/BuyOffersOfAliasesLinkedToRollApp RPC method.
type QueryBuyOffersOfAliasesLinkedToRollAppResponse struct {
	// offers are all the buy offers of the aliases linked to the input rollapp.
	Offers []BuyOffer `protobuf:"bytes,1,rep,name=offers,proto3" json:"offers"`
}

func (m *QueryBuyOffersOfAliasesLinkedToRollAppResponse) Reset() {
	*m = QueryBuyOffersOfAliasesLinkedToRollAppResponse{}
}
func (m *QueryBuyOffersOfAliasesLinkedToRollAppResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryBuyOffersOfAliasesLinkedToRollAppResponse) ProtoMessage() {}
func (*QueryBuyOffersOfAliasesLinkedToRollAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fbab881fb7aa6c, []int{33}
}
func (m *QueryBuyOffersOfAliasesLinkedToRollAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuyOffersOfAliasesLinkedToRollAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuyOffersOfAliasesLinkedToRollAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuyOffersOfAliasesLinkedToRollAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuyOffersOfAliasesLinkedToRollAppResponse.Merge(m, src)
}
func (m *QueryBuyOffersOfAliasesLinkedToRollAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuyOffersOfAliasesLinkedToRollAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuyOffersOfAliasesLinkedToRollAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuyOffersOfAliasesLinkedToRollAppResponse proto.InternalMessageInfo

func (m *QueryBuyOffersOfAliasesLinkedToRollAppResponse) GetOffers() []BuyOffer {
	if m != nil {
		return m.Offers
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "dymensionxyz.dymension.dymns.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "dymensionxyz.dymension.dymns.QueryParamsResponse")
	proto.RegisterType((*QueryDymNameRequest)(nil), "dymensionxyz.dymension.dymns.QueryDymNameRequest")
	proto.RegisterType((*QueryDymNameResponse)(nil), "dymensionxyz.dymension.dymns.QueryDymNameResponse")
	proto.RegisterType((*QueryAliasRequest)(nil), "dymensionxyz.dymension.dymns.QueryAliasRequest")
	proto.RegisterType((*QueryAliasResponse)(nil), "dymensionxyz.dymension.dymns.QueryAliasResponse")
	proto.RegisterType((*ResolveDymNameAddressesRequest)(nil), "dymensionxyz.dymension.dymns.ResolveDymNameAddressesRequest")
	proto.RegisterType((*ResultDymNameAddress)(nil), "dymensionxyz.dymension.dymns.ResultDymNameAddress")
	proto.RegisterType((*ResolveDymNameAddressesResponse)(nil), "dymensionxyz.dymension.dymns.ResolveDymNameAddressesResponse")
	proto.RegisterType((*QueryDymNamesOwnedByAccountRequest)(nil), "dymensionxyz.dymension.dymns.QueryDymNamesOwnedByAccountRequest")
	proto.RegisterType((*QueryDymNamesOwnedByAccountResponse)(nil), "dymensionxyz.dymension.dymns.QueryDymNamesOwnedByAccountResponse")
	proto.RegisterType((*QuerySellOrderRequest)(nil), "dymensionxyz.dymension.dymns.QuerySellOrderRequest")
	proto.RegisterType((*QuerySellOrderResponse)(nil), "dymensionxyz.dymension.dymns.QuerySellOrderResponse")
	proto.RegisterType((*QueryHistoricalSellOrderOfDymNameRequest)(nil), "dymensionxyz.dymension.dymns.QueryHistoricalSellOrderOfDymNameRequest")
	proto.RegisterType((*QueryHistoricalSellOrderOfDymNameResponse)(nil), "dymensionxyz.dymension.dymns.QueryHistoricalSellOrderOfDymNameResponse")
	proto.RegisterType((*EstimateRegisterNameRequest)(nil), "dymensionxyz.dymension.dymns.EstimateRegisterNameRequest")
	proto.RegisterType((*EstimateRegisterNameResponse)(nil), "dymensionxyz.dymension.dymns.EstimateRegisterNameResponse")
	proto.RegisterType((*ReverseResolveAddressRequest)(nil), "dymensionxyz.dymension.dymns.ReverseResolveAddressRequest")
	proto.RegisterType((*ReverseResolveAddressResponse)(nil), "dymensionxyz.dymension.dymns.ReverseResolveAddressResponse")
	proto.RegisterMapType((map[string]ReverseResolveAddressResult)(nil), "dymensionxyz.dymension.dymns.ReverseResolveAddressResponse.ResultEntry")
	proto.RegisterType((*ReverseResolveAddressResult)(nil), "dymensionxyz.dymension.dymns.ReverseResolveAddressResult")
	proto.RegisterType((*QueryTranslateAliasOrChainIdToChainIdRequest)(nil), "dymensionxyz.dymension.dymns.QueryTranslateAliasOrChainIdToChainIdRequest")
	proto.RegisterType((*QueryTranslateAliasOrChainIdToChainIdResponse)(nil), "dymensionxyz.dymension.dymns.QueryTranslateAliasOrChainIdToChainIdResponse")
	proto.RegisterType((*QueryBuyOfferByIdRequest)(nil), "dymensionxyz.dymension.dymns.QueryBuyOfferByIdRequest")
	proto.RegisterType((*QueryBuyOfferByIdResponse)(nil), "dymensionxyz.dymension.dymns.QueryBuyOfferByIdResponse")
	proto.RegisterType((*QueryBuyOffersPlacedByAccountRequest)(nil), "dymensionxyz.dymension.dymns.QueryBuyOffersPlacedByAccountRequest")
	proto.RegisterType((*QueryBuyOffersPlacedByAccountResponse)(nil), "dymensionxyz.dymension.dymns.QueryBuyOffersPlacedByAccountResponse")
	proto.RegisterType((*QueryBuyOffersByDymNameRequest)(nil), "dymensionxyz.dymension.dymns.QueryBuyOffersByDymNameRequest")
	proto.RegisterType((*QueryBuyOffersByDymNameResponse)(nil), "dymensionxyz.dymension.dymns.QueryBuyOffersByDymNameResponse")
	proto.RegisterType((*QueryBuyOffersOfDymNamesOwnedByAccountRequest)(nil), "dymensionxyz.dymension.dymns.QueryBuyOffersOfDymNamesOwnedByAccountRequest")
	proto.RegisterType((*QueryBuyOffersOfDymNamesOwnedByAccountResponse)(nil), "dymensionxyz.dymension.dymns.QueryBuyOffersOfDymNamesOwnedByAccountResponse")
	proto.RegisterType((*QueryBuyOffersByAliasRequest)(nil), "dymensionxyz.dymension.dymns.QueryBuyOffersByAliasRequest")
	proto.RegisterType((*QueryBuyOffersByAliasResponse)(nil), "dymensionxyz.dymension.dymns.QueryBuyOffersByAliasResponse")
	proto.RegisterType((*QueryBuyOffersOfAliasesLinkedToRollAppRequest)(nil), "dymensionxyz.dymension.dymns.QueryBuyOffersOfAliasesLinkedToRollAppRequest")
	proto.RegisterType((*QueryBuyOffersOfAliasesLinkedToRollAppResponse)(nil), "dymensionxyz.dymension.dymns.QueryBuyOffersOfAliasesLinkedToRollAppResponse")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/dymns/query.proto", fileDescriptor_c9fbab881fb7aa6c)
}

var fileDescriptor_c9fbab881fb7aa6c = []byte{
	// 1781 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0x4b, 0x6f, 0xdb, 0xc6,
	0x16, 0x36, 0xa5, 0xd8, 0xb1, 0x8f, 0x73, 0x7d, 0x9d, 0xb9, 0x4e, 0xae, 0xcc, 0xd8, 0xb2, 0x2f,
	0x6f, 0x1e, 0x76, 0x13, 0x8b, 0xb1, 0x9d, 0xa4, 0x8d, 0x93, 0x06, 0xb6, 0xec, 0x3c, 0x94, 0x04,
	0x71, 0xaa, 0x38, 0x48, 0xd3, 0xa2, 0x20, 0x28, 0x71, 0xac, 0x10, 0xa6, 0x38, 0x0a, 0x49, 0x39,
	0x61, 0x05, 0x01, 0x45, 0x17, 0x5d, 0x74, 0x55, 0xa0, 0xcb, 0xa0, 0x8f, 0x55, 0x37, 0x5d, 0x16,
	0xfd, 0x09, 0x45, 0xb3, 0x4c, 0x51, 0x14, 0x68, 0x17, 0x2d, 0x8a, 0xa4, 0x8b, 0xee, 0xba, 0xe9,
	0x0f, 0x28, 0x34, 0x3c, 0xa4, 0x1e, 0x96, 0x28, 0xca, 0xf6, 0x2a, 0x9c, 0xd1, 0x9c, 0x6f, 0xbe,
	0xef, 0xcc, 0x99, 0x73, 0xe6, 0x38, 0x30, 0xa3, 0xb9, 0x45, 0x6a, 0xda, 0x3a, 0x33, 0x9f, 0xba,
	0xef, 0xcb, 0xc1, 0xa0, 0xf6, 0x65, 0xda, 0xf2, 0xe3, 0x32, 0xb5, 0xdc, 0x54, 0xc9, 0x62, 0x0e,
	0x23, 0x13, 0x8d, 0x2b, 0x53, 0xc1, 0x20, 0xc5, 0x57, 0x8a, 0x63, 0x05, 0x56, 0x60, 0x7c, 0xa1,
	0x5c, 0xfb, 0xf2, 0x6c, 0xc4, 0x89, 0x02, 0x63, 0x05, 0x83, 0xca, 0x6a, 0x49, 0x97, 0x55, 0xd3,
	0x64, 0x8e, 0xea, 0xe8, 0xcc, 0xb4, 0xf1, 0xd7, 0x64, 0x9e, 0xd9, 0x45, 0x66, 0xcb, 0x39, 0xd5,
	0xa6, 0xf2, 0xf6, 0x7c, 0x8e, 0x3a, 0xea, 0xbc, 0x9c, 0x67, 0xba, 0x89, 0xbf, 0xcf, 0x86, 0x72,
	0x2b, 0xa9, 0x96, 0x5a, 0xf4, 0xa1, 0x4e, 0x87, 0x2e, 0xd5, 0xdc, 0xa2, 0x62, 0xaa, 0x45, 0x1a,
	0x09, 0xb7, 0xa8, 0x5a, 0x5b, 0xd4, 0xf1, 0x96, 0x4a, 0x63, 0x40, 0xde, 0xaa, 0xf9, 0xe0, 0x2e,
	0xdf, 0x2c, 0x4b, 0x1f, 0x97, 0xa9, 0xed, 0x48, 0x0f, 0xe1, 0x3f, 0x4d, 0xb3, 0x76, 0x89, 0x99,
	0x36, 0x25, 0x69, 0x18, 0xf0, 0x48, 0x25, 0x84, 0x69, 0x61, 0x66, 0x78, 0xe1, 0x78, 0x2a, 0xcc,
	0x65, 0x29, 0xcf, 0x3a, 0x7d, 0xe0, 0xf9, 0x6f, 0x53, 0x7d, 0x59, 0xb4, 0x94, 0x2e, 0x20, 0xf4,
	0x9a, 0x5b, 0xbc, 0xa3, 0x16, 0x29, 0xee, 0x48, 0xc6, 0x61, 0xd0, 0x17, 0xc1, 0xc1, 0x87, 0xb2,
	0x07, 0x35, 0x6f, 0xc5, 0xd2, 0x81, 0x3f, 0xbf, 0x9c, 0xea, 0x93, 0xde, 0x86, 0xb1, 0x66, 0x3b,
	0xe4, 0xb4, 0xdc, 0x62, 0x38, 0xbc, 0x70, 0x22, 0x9c, 0x95, 0x0f, 0xe0, 0xe3, 0x4b, 0x32, 0x1c,
	0xe6, 0xc8, 0x2b, 0x86, 0xae, 0xfa, 0x1e, 0x20, 0x63, 0xd0, 0xaf, 0xd6, 0xc6, 0x48, 0xc6, 0x1b,
	0x20, 0x95, 0x2a, 0xfa, 0x0c, 0x0d, 0x90, 0xc8, 0x38, 0x0c, 0xe6, 0x1f, 0xa9, 0xba, 0xa9, 0xe8,
	0x9a, 0xaf, 0x80, 0x8f, 0x33, 0x1a, 0x99, 0x81, 0xd1, 0x4d, 0x56, 0x36, 0x35, 0xc5, 0xa6, 0x86,
	0xa1, 0x30, 0x4b, 0xa3, 0x56, 0x22, 0x36, 0x2d, 0xcc, 0x0c, 0x66, 0x47, 0xf8, 0xfc, 0x3d, 0x6a,
	0x18, 0xeb, 0xb5, 0x59, 0x22, 0xc1, 0xbf, 0x72, 0x65, 0x57, 0x61, 0x9b, 0x9b, 0xd4, 0x52, 0x74,
	0xcd, 0x4e, 0xc4, 0xa7, 0xe3, 0x33, 0x43, 0xd9, 0xe1, 0x5c, 0xd9, 0x5d, 0xaf, 0xcd, 0x65, 0x34,
	0x5b, 0x5a, 0x83, 0x64, 0x96, 0xda, 0xcc, 0xd8, 0xa6, 0x28, 0x65, 0x45, 0xd3, 0x2c, 0x6a, 0xdb,
	0x34, 0x20, 0x3f, 0x01, 0x43, 0xaa, 0x3f, 0x97, 0x10, 0x38, 0x42, 0x7d, 0x02, 0x45, 0x3c, 0x86,
	0xb1, 0x2c, 0xb5, 0xcb, 0x86, 0xd3, 0x0c, 0x42, 0x12, 0x70, 0x10, 0x97, 0xfa, 0x2a, 0x70, 0x48,
	0x66, 0x61, 0xd4, 0xf2, 0xf6, 0xd5, 0x14, 0x7f, 0x49, 0x8c, 0x2f, 0xf9, 0xb7, 0x3f, 0xef, 0x83,
	0x8c, 0x41, 0x3f, 0xb5, 0x2c, 0x66, 0x25, 0xe2, 0x9e, 0xf7, 0xf8, 0x40, 0xfa, 0x58, 0x80, 0xa9,
	0x8e, 0xcc, 0xd1, 0x8b, 0x05, 0x20, 0xad, 0x9b, 0xa0, 0x86, 0xe1, 0x85, 0x85, 0xf0, 0x83, 0x6d,
	0x27, 0x07, 0x83, 0xef, 0x70, 0x0b, 0x41, 0x6a, 0x4b, 0xcb, 0x20, 0x35, 0xc6, 0x93, 0xbd, 0xfe,
	0xc4, 0xa4, 0x5a, 0xda, 0x5d, 0xc9, 0xe7, 0x59, 0xd9, 0x74, 0x1a, 0xc2, 0x80, 0x3d, 0x31, 0xa9,
	0xe5, 0x87, 0x01, 0x1f, 0xa0, 0x07, 0x19, 0xfc, 0x3f, 0x14, 0x01, 0x15, 0xdd, 0x80, 0x21, 0x3f,
	0x40, 0x7d, 0x21, 0xd1, 0x22, 0x14, 0xb9, 0x0f, 0x62, 0x9c, 0xda, 0xd2, 0x03, 0x38, 0xc2, 0x37,
	0x0c, 0xc2, 0xa5, 0xe1, 0xf2, 0x14, 0x18, 0xd3, 0xec, 0x86, 0xd0, 0xe3, 0xe3, 0x8c, 0x46, 0x26,
	0x01, 0x78, 0xbc, 0x29, 0x8e, 0x5b, 0xa2, 0x78, 0x5c, 0x43, 0x7c, 0x66, 0xc3, 0x2d, 0xf9, 0x77,
	0x4b, 0x81, 0xa3, 0xad, 0xc0, 0x48, 0xfe, 0x2a, 0x0c, 0x58, 0xdc, 0xad, 0x78, 0xb7, 0x4e, 0x85,
	0x33, 0x0f, 0x00, 0xfc, 0x4b, 0xef, 0x19, 0x4b, 0xb7, 0x60, 0x86, 0x6f, 0x70, 0x43, 0xb7, 0x1d,
	0x66, 0xe9, 0x79, 0xd5, 0x08, 0x56, 0xae, 0x6f, 0xf6, 0x9a, 0x09, 0x2c, 0x98, 0x8d, 0x00, 0xd6,
	0x46, 0x40, 0x7c, 0xf7, 0x02, 0x74, 0x38, 0x76, 0xd5, 0x76, 0xf4, 0xa2, 0xea, 0xd0, 0x2c, 0x2d,
	0xe8, 0xb6, 0x43, 0xad, 0x46, 0xce, 0x04, 0x0e, 0x34, 0xf0, 0xe5, 0xdf, 0x44, 0x84, 0x41, 0xad,
	0x6c, 0xf1, 0x7a, 0xc0, 0xfd, 0x1e, 0xcf, 0x06, 0xe3, 0x7a, 0x58, 0xc5, 0x77, 0x86, 0xd5, 0x5f,
	0x02, 0x4c, 0xb4, 0xdf, 0x0b, 0x25, 0x65, 0x60, 0x74, 0x53, 0xb7, 0x6c, 0x47, 0x71, 0xa9, 0x6a,
	0x29, 0x25, 0x4b, 0xcf, 0xfb, 0x99, 0x6f, 0x3c, 0xe5, 0x15, 0x9c, 0x54, 0xad, 0xe0, 0xa4, 0xb0,
	0xe0, 0xa4, 0x56, 0x99, 0x6e, 0xa2, 0x9c, 0x11, 0x6e, 0xf8, 0x90, 0xaa, 0xd6, 0xdd, 0x9a, 0x19,
	0x49, 0xc3, 0x21, 0xfa, 0xd4, 0xa1, 0xa6, 0x86, 0x30, 0xb1, 0x68, 0x30, 0xc3, 0x9e, 0x91, 0x87,
	0xb1, 0x0c, 0xc3, 0x0e, 0x73, 0x54, 0x03, 0x21, 0xe2, 0xd1, 0x20, 0x80, 0xdb, 0x70, 0x04, 0x69,
	0x13, 0x26, 0xb2, 0x74, 0x9b, 0x5a, 0x36, 0xc5, 0xec, 0x80, 0xb7, 0x34, 0x52, 0x3a, 0xab, 0x25,
	0xd7, 0x27, 0xcc, 0xda, 0xd2, 0xcd, 0x82, 0x12, 0xe4, 0x5f, 0x2f, 0xce, 0x47, 0x70, 0x7e, 0xd5,
	0x4b, 0xc3, 0xd2, 0x57, 0x31, 0x98, 0xec, 0xb0, 0x11, 0xba, 0x96, 0xb6, 0x44, 0xcb, 0xf5, 0x6e,
	0x19, 0x27, 0x04, 0x0c, 0xf3, 0xd1, 0x55, 0xd3, 0xb1, 0xdc, 0xe6, 0x68, 0x8a, 0x4e, 0x59, 0x74,
	0x60, 0xb8, 0x01, 0x86, 0x8c, 0x42, 0x7c, 0x8b, 0xba, 0x18, 0x66, 0xb5, 0x4f, 0xb2, 0x0e, 0xfd,
	0xdb, 0xaa, 0x51, 0xf6, 0x8f, 0xee, 0xe2, 0xee, 0x08, 0x97, 0x0d, 0x27, 0xeb, 0xe1, 0x2c, 0xc5,
	0xde, 0x10, 0xa4, 0x7b, 0x70, 0x2c, 0x64, 0x25, 0x49, 0x02, 0xe4, 0x55, 0x53, 0xd3, 0x35, 0xd5,
	0x09, 0x0e, 0xa4, 0x61, 0xa6, 0x9e, 0xfd, 0x63, 0x8d, 0xd9, 0xff, 0x21, 0x9c, 0xe1, 0xd7, 0x76,
	0xc3, 0x52, 0x4d, 0xdb, 0x50, 0x1d, 0xca, 0xcb, 0xe7, 0xba, 0x85, 0x52, 0x37, 0x18, 0x7e, 0xf8,
	0xa7, 0x3e, 0x0b, 0x87, 0x79, 0xd1, 0x55, 0x98, 0xa5, 0xb4, 0x14, 0xd6, 0x11, 0xb5, 0xc9, 0x54,
	0xba, 0x09, 0x73, 0x11, 0xa1, 0xbb, 0xd6, 0x6a, 0xe9, 0x35, 0x48, 0x70, 0xac, 0x34, 0x56, 0xdc,
	0xb4, 0x5b, 0xa7, 0x34, 0x02, 0xb1, 0xc0, 0x20, 0xa6, 0x6b, 0x92, 0x02, 0xe3, 0x6d, 0xd6, 0x06,
	0x8f, 0xa5, 0x7e, 0x5e, 0xc6, 0xf1, 0x6e, 0x9e, 0x0c, 0x3f, 0x99, 0x00, 0xc2, 0x8b, 0x14, 0xcf,
	0x54, 0x5a, 0x86, 0xe3, 0x4d, 0x1b, 0xd8, 0x77, 0x0d, 0x35, 0xdf, 0xa6, 0x4c, 0xd5, 0x8a, 0xb6,
	0x37, 0x13, 0x14, 0x6d, 0x6f, 0x28, 0x15, 0xe1, 0x44, 0x17, 0x04, 0xa4, 0xbb, 0x06, 0x03, 0x7c,
	0x4f, 0xbf, 0x46, 0xf5, 0xc6, 0x17, 0x6d, 0xa5, 0x73, 0x90, 0x6c, 0xde, 0x2e, 0xdd, 0xfa, 0xd0,
	0x6b, 0x93, 0x2a, 0xa5, 0x02, 0x4c, 0x75, 0xb4, 0xda, 0x57, 0x7a, 0x19, 0x0c, 0x94, 0x60, 0xa3,
	0xa0, 0x60, 0x74, 0xa8, 0xff, 0x9d, 0x1d, 0xbb, 0x0d, 0xa9, 0xa8, 0x50, 0xfb, 0xec, 0xe1, 0x89,
	0x56, 0x5f, 0x75, 0x7f, 0xb8, 0x4a, 0x14, 0x26, 0x3b, 0x58, 0xed, 0x2b, 0xb9, 0x3b, 0x3b, 0xfd,
	0xcb, 0xb7, 0xa1, 0xf6, 0x6d, 0xdd, 0xdc, 0xa2, 0xda, 0x06, 0xcb, 0x32, 0xc3, 0x58, 0x29, 0x95,
	0x7c, 0xb6, 0x93, 0x00, 0x16, 0x33, 0x0c, 0xb5, 0x54, 0xaa, 0x5f, 0xc5, 0x21, 0x9c, 0xc9, 0x68,
	0xed, 0x9c, 0xdc, 0x09, 0x6f, 0x3f, 0x75, 0x2c, 0x7c, 0x7e, 0x0c, 0xfa, 0xf9, 0xc6, 0xe4, 0x99,
	0x00, 0x03, 0x5e, 0x1f, 0x43, 0xce, 0x86, 0x43, 0xed, 0x6c, 0xa3, 0xc4, 0xf9, 0x1e, 0x2c, 0x3c,
	0xfe, 0xd2, 0x99, 0x0f, 0x7f, 0xfc, 0xe3, 0xd3, 0xd8, 0x49, 0x72, 0x5c, 0x8e, 0xd0, 0x1b, 0x92,
	0xaf, 0x05, 0x38, 0x88, 0x51, 0x47, 0xa2, 0x6c, 0xd6, 0x7c, 0x17, 0xc5, 0x85, 0x5e, 0x4c, 0x90,
	0xe0, 0x45, 0x4e, 0x70, 0x91, 0xcc, 0xcb, 0x91, 0x3a, 0x52, 0xb9, 0xe2, 0x7f, 0x55, 0xc9, 0x17,
	0x02, 0xf4, 0xf3, 0xe3, 0x23, 0x72, 0x84, 0x8d, 0x1b, 0xa3, 0x5a, 0x3c, 0x1b, 0xdd, 0x00, 0x79,
	0x2e, 0x72, 0x9e, 0x73, 0xe4, 0x74, 0x38, 0x4f, 0x7e, 0x3d, 0xe4, 0x0a, 0xff, 0xa7, 0x4a, 0xbe,
	0x13, 0xe0, 0xbf, 0x1d, 0x3a, 0x14, 0x72, 0xb9, 0x6b, 0xf7, 0x11, 0xd2, 0x92, 0x89, 0x6f, 0xee,
	0xd2, 0x1a, 0xd5, 0xcc, 0x71, 0x35, 0xa7, 0xc8, 0x89, 0x70, 0x35, 0xd8, 0xe6, 0x90, 0x9f, 0x04,
	0x38, 0xda, 0x3e, 0x1b, 0x91, 0xe5, 0xe8, 0x67, 0xde, 0x3e, 0x27, 0x8a, 0x2b, 0x7b, 0x40, 0x40,
	0x39, 0x17, 0xb8, 0x9c, 0xb3, 0x24, 0x15, 0x2e, 0xa7, 0xf6, 0x2c, 0xd6, 0x94, 0x9c, 0x2b, 0x57,
	0xf8, 0x03, 0xb9, 0x4a, 0xbe, 0x11, 0x60, 0xa8, 0xde, 0x2c, 0x2f, 0x46, 0x20, 0xd2, 0xda, 0x2b,
	0x89, 0xe7, 0x7a, 0x33, 0x42, 0xc2, 0x97, 0x38, 0xe1, 0xf3, 0x64, 0x31, 0x9c, 0x70, 0xbd, 0xbf,
	0x97, 0x2b, 0x7e, 0x47, 0x56, 0x25, 0x1f, 0xc4, 0x60, 0x22, 0xac, 0x59, 0x21, 0xd7, 0x22, 0x70,
	0x8a, 0xd0, 0x3a, 0x89, 0xd7, 0xf7, 0x8c, 0x83, 0x72, 0xd7, 0xb9, 0xdc, 0x0c, 0xb9, 0x1e, 0x2e,
	0xf7, 0x51, 0x80, 0xd5, 0xf0, 0x97, 0x8d, 0xb6, 0x57, 0xff, 0x57, 0x01, 0xc6, 0xda, 0x35, 0x35,
	0xa4, 0xcb, 0x83, 0x35, 0xa4, 0xe9, 0x12, 0x97, 0x76, 0x63, 0x8a, 0x02, 0xef, 0x70, 0x81, 0x37,
	0xc8, 0xb5, 0x70, 0x81, 0x14, 0x31, 0x14, 0x0b, 0x41, 0x50, 0x18, 0x17, 0x25, 0x57, 0xfc, 0x7e,
	0xae, 0x4a, 0xbe, 0x17, 0xe0, 0x48, 0xdb, 0x27, 0x33, 0x59, 0xda, 0xd5, 0x8b, 0xdc, 0x53, 0x78,
	0x69, 0x0f, 0xed, 0x87, 0x74, 0x9e, 0x4b, 0x94, 0xc9, 0x5c, 0xb7, 0x94, 0xc1, 0x41, 0x14, 0x3f,
	0x75, 0x7c, 0x14, 0x83, 0xe9, 0x6e, 0xef, 0x68, 0x72, 0x33, 0x42, 0xa0, 0x45, 0x7c, 0xe7, 0x8b,
	0xb7, 0xf6, 0x05, 0x0b, 0x45, 0x67, 0xb8, 0xe8, 0x55, 0xb2, 0x12, 0x2e, 0xda, 0xf1, 0xf1, 0x94,
	0xc6, 0xfc, 0xdf, 0xd8, 0x69, 0x54, 0xc9, 0xb7, 0x02, 0x1c, 0x6a, 0x7c, 0xd8, 0x93, 0x0b, 0x11,
	0x88, 0xb6, 0xe9, 0x1a, 0xc4, 0xd7, 0x7b, 0xb6, 0x43, 0x31, 0xe7, 0xb8, 0x98, 0x14, 0x39, 0x13,
	0x2e, 0x26, 0xf8, 0x83, 0xa1, 0x5c, 0xa9, 0xf1, 0xfe, 0x5b, 0x80, 0x44, 0xa7, 0xd7, 0x3e, 0x49,
	0xf7, 0xc0, 0xa5, 0x43, 0xb3, 0x21, 0xae, 0xee, 0x09, 0xa3, 0xb7, 0x0c, 0xe3, 0xbd, 0xc7, 0x14,
	0x87, 0x29, 0x35, 0x95, 0x25, 0x0e, 0xa6, 0xe4, 0x5c, 0x05, 0x5f, 0xe1, 0x72, 0x05, 0x3f, 0xaa,
	0xe4, 0x17, 0x01, 0xc8, 0xce, 0xfe, 0xa1, 0x5b, 0xd5, 0x0e, 0x6f, 0x56, 0xba, 0x55, 0xed, 0x2e,
	0x4d, 0x8b, 0x74, 0x8d, 0x8b, 0x5c, 0x26, 0x57, 0x7a, 0x11, 0x99, 0x73, 0x95, 0x7a, 0x06, 0xf5,
	0xb2, 0xe7, 0xb3, 0x18, 0xfc, 0xaf, 0x6b, 0x9f, 0x41, 0x6e, 0xf5, 0x42, 0xb6, 0x4b, 0xe3, 0x23,
	0xde, 0xde, 0x1f, 0x30, 0x74, 0xc4, 0xbb, 0xdc, 0x11, 0xf7, 0xc9, 0xbd, 0x5e, 0x1c, 0xc1, 0x36,
	0x03, 0x47, 0xd8, 0x8a, 0xff, 0x14, 0x68, 0x73, 0xf2, 0x3f, 0x08, 0x30, 0xda, 0xda, 0xd7, 0x74,
	0x4b, 0xbb, 0x61, 0x2d, 0x54, 0xb7, 0xb4, 0x1b, 0xda, 0x48, 0x49, 0x6b, 0x5c, 0xea, 0x15, 0x72,
	0xb9, 0xc7, 0x33, 0x6f, 0x7e, 0x88, 0x7e, 0xd6, 0x7c, 0xe2, 0xed, 0x9b, 0x9e, 0x5e, 0x4f, 0x3c,
	0xb4, 0x15, 0xeb, 0xf5, 0xc4, 0xc3, 0xfb, 0x30, 0xe9, 0x3d, 0xee, 0x86, 0x07, 0xe4, 0x7e, 0x8f,
	0x27, 0xae, 0x7a, 0xb0, 0x8a, 0xc1, 0x71, 0x6b, 0x3f, 0x60, 0x37, 0x28, 0x57, 0xea, 0x8d, 0x62,
	0x35, 0x7d, 0xfb, 0xf9, 0xcb, 0xa4, 0xf0, 0xe2, 0x65, 0x52, 0xf8, 0xfd, 0x65, 0x52, 0xf8, 0xe4,
	0x55, 0xb2, 0xef, 0xc5, 0xab, 0x64, 0xdf, 0xcf, 0xaf, 0x92, 0x7d, 0xef, 0x2c, 0x14, 0x74, 0xe7,
	0x51, 0x39, 0x97, 0xca, 0xb3, 0x62, 0xa7, 0xad, 0xb7, 0x17, 0xe5, 0xa7, 0x7e, 0x21, 0x70, 0x4b,
	0xd4, 0xce, 0x0d, 0xf0, 0xff, 0x0b, 0x5b, 0xfc, 0x27, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xbf, 0x12,
	0xce, 0x2c, 0x1c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// DymName queries a Dym-Name by its name.
	DymName(ctx context.Context, in *QueryDymNameRequest, opts ...grpc.CallOption) (*QueryDymNameResponse, error)
	// Alias queries the chain_id associated as well as the sell order and buy offer ids relates to the alias.
	Alias(ctx context.Context, in *QueryAliasRequest, opts ...grpc.CallOption) (*QueryAliasResponse, error)
	// ResolveDymNameAddresses resolves multiple Dym-Name Addresses to account address of each pointing to.
	//
	// For example:
	//   - "my-name@dym" => "dym1a..."
	//   - "another.my-name@dym" => "dym1b..."
	//   - "my-name@nim" => "nim1..."
	//   - (extra format) "0x1234...6789@nim" => "nim1..."
	//   - (extra format) "dym1a...@nim" => "nim1..."
	ResolveDymNameAddresses(ctx context.Context, in *ResolveDymNameAddressesRequest, opts ...grpc.CallOption) (*ResolveDymNameAddressesResponse, error)
	// DymNamesOwnedByAccount queries the Dym-Names owned by an account.
	DymNamesOwnedByAccount(ctx context.Context, in *QueryDymNamesOwnedByAccountRequest, opts ...grpc.CallOption) (*QueryDymNamesOwnedByAccountResponse, error)
	// SellOrder queries the active SO of a Dym-Name/Alias.
	SellOrder(ctx context.Context, in *QuerySellOrderRequest, opts ...grpc.CallOption) (*QuerySellOrderResponse, error)
	// HistoricalSellOrderOfDymName queries the historical SOs of a Dym-Name.
	HistoricalSellOrderOfDymName(ctx context.Context, in *QueryHistoricalSellOrderOfDymNameRequest, opts ...grpc.CallOption) (*QueryHistoricalSellOrderOfDymNameResponse, error)
	// EstimateRegisterName estimates the cost to register a Dym-Name.
	EstimateRegisterName(ctx context.Context, in *EstimateRegisterNameRequest, opts ...grpc.CallOption) (*EstimateRegisterNameResponse, error)
	// ReverseResolveAddress resolves multiple account addresses to Dym-Name Addresses which point to each.
	// This function may return multiple possible Dym-Name-Addresses those point to each of the input address.
	//
	// For example: when we have "my-name@dym" resolves to "dym1a..."
	// so reverse resolve will return "my-name@dym" when input is "dym1a..."
	ReverseResolveAddress(ctx context.Context, in *ReverseResolveAddressRequest, opts ...grpc.CallOption) (*ReverseResolveAddressResponse, error)
	// TranslateAliasOrChainIdToChainId tries to translate an alias/handle to a chain id.
	// If an alias/handle can not be translated to chain-id, it is treated as a chain-id and returns.
	TranslateAliasOrChainIdToChainId(ctx context.Context, in *QueryTranslateAliasOrChainIdToChainIdRequest, opts ...grpc.CallOption) (*QueryTranslateAliasOrChainIdToChainIdResponse, error)
	// BuyOfferById queries a buy offer by its id.
	BuyOfferById(ctx context.Context, in *QueryBuyOfferByIdRequest, opts ...grpc.CallOption) (*QueryBuyOfferByIdResponse, error)
	// BuyOffersPlacedByAccount queries the all the buy offers placed by an account.
	BuyOffersPlacedByAccount(ctx context.Context, in *QueryBuyOffersPlacedByAccountRequest, opts ...grpc.CallOption) (*QueryBuyOffersPlacedByAccountResponse, error)
	// BuyOffersByDymName queries all the buy offers of a Dym-Name.
	BuyOffersByDymName(ctx context.Context, in *QueryBuyOffersByDymNameRequest, opts ...grpc.CallOption) (*QueryBuyOffersByDymNameResponse, error)
	// BuyOffersOfDymNamesOwnedByAccount queries all the buy offers of all Dym-Names owned by an account.
	BuyOffersOfDymNamesOwnedByAccount(ctx context.Context, in *QueryBuyOffersOfDymNamesOwnedByAccountRequest, opts ...grpc.CallOption) (*QueryBuyOffersOfDymNamesOwnedByAccountResponse, error)
	// BuyOffersByAlias queries all the buy offers of an Alias.
	BuyOffersByAlias(ctx context.Context, in *QueryBuyOffersByAliasRequest, opts ...grpc.CallOption) (*QueryBuyOffersByAliasResponse, error)
	// BuyOffersOfAliasesLinkedToRollApp queries all the buy offers of all Aliases linked to a RollApp.
	BuyOffersOfAliasesLinkedToRollApp(ctx context.Context, in *QueryBuyOffersOfAliasesLinkedToRollAppRequest, opts ...grpc.CallOption) (*QueryBuyOffersOfAliasesLinkedToRollAppResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DymName(ctx context.Context, in *QueryDymNameRequest, opts ...grpc.CallOption) (*QueryDymNameResponse, error) {
	out := new(QueryDymNameResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/DymName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Alias(ctx context.Context, in *QueryAliasRequest, opts ...grpc.CallOption) (*QueryAliasResponse, error) {
	out := new(QueryAliasResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/Alias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ResolveDymNameAddresses(ctx context.Context, in *ResolveDymNameAddressesRequest, opts ...grpc.CallOption) (*ResolveDymNameAddressesResponse, error) {
	out := new(ResolveDymNameAddressesResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/ResolveDymNameAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DymNamesOwnedByAccount(ctx context.Context, in *QueryDymNamesOwnedByAccountRequest, opts ...grpc.CallOption) (*QueryDymNamesOwnedByAccountResponse, error) {
	out := new(QueryDymNamesOwnedByAccountResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/DymNamesOwnedByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SellOrder(ctx context.Context, in *QuerySellOrderRequest, opts ...grpc.CallOption) (*QuerySellOrderResponse, error) {
	out := new(QuerySellOrderResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/SellOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HistoricalSellOrderOfDymName(ctx context.Context, in *QueryHistoricalSellOrderOfDymNameRequest, opts ...grpc.CallOption) (*QueryHistoricalSellOrderOfDymNameResponse, error) {
	out := new(QueryHistoricalSellOrderOfDymNameResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/HistoricalSellOrderOfDymName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateRegisterName(ctx context.Context, in *EstimateRegisterNameRequest, opts ...grpc.CallOption) (*EstimateRegisterNameResponse, error) {
	out := new(EstimateRegisterNameResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/EstimateRegisterName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReverseResolveAddress(ctx context.Context, in *ReverseResolveAddressRequest, opts ...grpc.CallOption) (*ReverseResolveAddressResponse, error) {
	out := new(ReverseResolveAddressResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/ReverseResolveAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TranslateAliasOrChainIdToChainId(ctx context.Context, in *QueryTranslateAliasOrChainIdToChainIdRequest, opts ...grpc.CallOption) (*QueryTranslateAliasOrChainIdToChainIdResponse, error) {
	out := new(QueryTranslateAliasOrChainIdToChainIdResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/TranslateAliasOrChainIdToChainId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuyOfferById(ctx context.Context, in *QueryBuyOfferByIdRequest, opts ...grpc.CallOption) (*QueryBuyOfferByIdResponse, error) {
	out := new(QueryBuyOfferByIdResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/BuyOfferById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuyOffersPlacedByAccount(ctx context.Context, in *QueryBuyOffersPlacedByAccountRequest, opts ...grpc.CallOption) (*QueryBuyOffersPlacedByAccountResponse, error) {
	out := new(QueryBuyOffersPlacedByAccountResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/BuyOffersPlacedByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuyOffersByDymName(ctx context.Context, in *QueryBuyOffersByDymNameRequest, opts ...grpc.CallOption) (*QueryBuyOffersByDymNameResponse, error) {
	out := new(QueryBuyOffersByDymNameResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/BuyOffersByDymName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuyOffersOfDymNamesOwnedByAccount(ctx context.Context, in *QueryBuyOffersOfDymNamesOwnedByAccountRequest, opts ...grpc.CallOption) (*QueryBuyOffersOfDymNamesOwnedByAccountResponse, error) {
	out := new(QueryBuyOffersOfDymNamesOwnedByAccountResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/BuyOffersOfDymNamesOwnedByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuyOffersByAlias(ctx context.Context, in *QueryBuyOffersByAliasRequest, opts ...grpc.CallOption) (*QueryBuyOffersByAliasResponse, error) {
	out := new(QueryBuyOffersByAliasResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/BuyOffersByAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuyOffersOfAliasesLinkedToRollApp(ctx context.Context, in *QueryBuyOffersOfAliasesLinkedToRollAppRequest, opts ...grpc.CallOption) (*QueryBuyOffersOfAliasesLinkedToRollAppResponse, error) {
	out := new(QueryBuyOffersOfAliasesLinkedToRollAppResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.dymns.Query/BuyOffersOfAliasesLinkedToRollApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// DymName queries a Dym-Name by its name.
	DymName(context.Context, *QueryDymNameRequest) (*QueryDymNameResponse, error)
	// Alias queries the chain_id associated as well as the sell order and buy offer ids relates to the alias.
	Alias(context.Context, *QueryAliasRequest) (*QueryAliasResponse, error)
	// ResolveDymNameAddresses resolves multiple Dym-Name Addresses to account address of each pointing to.
	//
	// For example:
	//   - "my-name@dym" => "dym1a..."
	//   - "another.my-name@dym" => "dym1b..."
	//   - "my-name@nim" => "nim1..."
	//   - (extra format) "0x1234...6789@nim" => "nim1..."
	//   - (extra format) "dym1a...@nim" => "nim1..."
	ResolveDymNameAddresses(context.Context, *ResolveDymNameAddressesRequest) (*ResolveDymNameAddressesResponse, error)
	// DymNamesOwnedByAccount queries the Dym-Names owned by an account.
	DymNamesOwnedByAccount(context.Context, *QueryDymNamesOwnedByAccountRequest) (*QueryDymNamesOwnedByAccountResponse, error)
	// SellOrder queries the active SO of a Dym-Name/Alias.
	SellOrder(context.Context, *QuerySellOrderRequest) (*QuerySellOrderResponse, error)
	// HistoricalSellOrderOfDymName queries the historical SOs of a Dym-Name.
	HistoricalSellOrderOfDymName(context.Context, *QueryHistoricalSellOrderOfDymNameRequest) (*QueryHistoricalSellOrderOfDymNameResponse, error)
	// EstimateRegisterName estimates the cost to register a Dym-Name.
	EstimateRegisterName(context.Context, *EstimateRegisterNameRequest) (*EstimateRegisterNameResponse, error)
	// ReverseResolveAddress resolves multiple account addresses to Dym-Name Addresses which point to each.
	// This function may return multiple possible Dym-Name-Addresses those point to each of the input address.
	//
	// For example: when we have "my-name@dym" resolves to "dym1a..."
	// so reverse resolve will return "my-name@dym" when input is "dym1a..."
	ReverseResolveAddress(context.Context, *ReverseResolveAddressRequest) (*ReverseResolveAddressResponse, error)
	// TranslateAliasOrChainIdToChainId tries to translate an alias/handle to a chain id.
	// If an alias/handle can not be translated to chain-id, it is treated as a chain-id and returns.
	TranslateAliasOrChainIdToChainId(context.Context, *QueryTranslateAliasOrChainIdToChainIdRequest) (*QueryTranslateAliasOrChainIdToChainIdResponse, error)
	// BuyOfferById queries a buy offer by its id.
	BuyOfferById(context.Context, *QueryBuyOfferByIdRequest) (*QueryBuyOfferByIdResponse, error)
	// BuyOffersPlacedByAccount queries the all the buy offers placed by an account.
	BuyOffersPlacedByAccount(context.Context, *QueryBuyOffersPlacedByAccountRequest) (*QueryBuyOffersPlacedByAccountResponse, error)
	// BuyOffersByDymName queries all the buy offers of a Dym-Name.
	BuyOffersByDymName(context.Context, *QueryBuyOffersByDymNameRequest) (*QueryBuyOffersByDymNameResponse, error)
	// BuyOffersOfDymNamesOwnedByAccount queries all the buy offers of all Dym-Names owned by an account.
	BuyOffersOfDymNamesOwnedByAccount(context.Context, *QueryBuyOffersOfDymNamesOwnedByAccountRequest) (*QueryBuyOffersOfDymNamesOwnedByAccountResponse, error)
	// BuyOffersByAlias queries all the buy offers of an Alias.
	BuyOffersByAlias(context.Context, *QueryBuyOffersByAliasRequest) (*QueryBuyOffersByAliasResponse, error)
	// BuyOffersOfAliasesLinkedToRollApp queries all the buy offers of all Aliases linked to a RollApp.
	BuyOffersOfAliasesLinkedToRollApp(context.Context, *QueryBuyOffersOfAliasesLinkedToRollAppRequest) (*QueryBuyOffersOfAliasesLinkedToRollAppResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) DymName(ctx context.Context, req *QueryDymNameRequest) (*QueryDymNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DymName not implemented")
}
func (*UnimplementedQueryServer) Alias(ctx context.Context, req *QueryAliasRequest) (*QueryAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alias not implemented")
}
func (*UnimplementedQueryServer) ResolveDymNameAddresses(ctx context.Context, req *ResolveDymNameAddressesRequest) (*ResolveDymNameAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveDymNameAddresses not implemented")
}
func (*UnimplementedQueryServer) DymNamesOwnedByAccount(ctx context.Context, req *QueryDymNamesOwnedByAccountRequest) (*QueryDymNamesOwnedByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DymNamesOwnedByAccount not implemented")
}
func (*UnimplementedQueryServer) SellOrder(ctx context.Context, req *QuerySellOrderRequest) (*QuerySellOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellOrder not implemented")
}
func (*UnimplementedQueryServer) HistoricalSellOrderOfDymName(ctx context.Context, req *QueryHistoricalSellOrderOfDymNameRequest) (*QueryHistoricalSellOrderOfDymNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricalSellOrderOfDymName not implemented")
}
func (*UnimplementedQueryServer) EstimateRegisterName(ctx context.Context, req *EstimateRegisterNameRequest) (*EstimateRegisterNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateRegisterName not implemented")
}
func (*UnimplementedQueryServer) ReverseResolveAddress(ctx context.Context, req *ReverseResolveAddressRequest) (*ReverseResolveAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReverseResolveAddress not implemented")
}
func (*UnimplementedQueryServer) TranslateAliasOrChainIdToChainId(ctx context.Context, req *QueryTranslateAliasOrChainIdToChainIdRequest) (*QueryTranslateAliasOrChainIdToChainIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateAliasOrChainIdToChainId not implemented")
}
func (*UnimplementedQueryServer) BuyOfferById(ctx context.Context, req *QueryBuyOfferByIdRequest) (*QueryBuyOfferByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyOfferById not implemented")
}
func (*UnimplementedQueryServer) BuyOffersPlacedByAccount(ctx context.Context, req *QueryBuyOffersPlacedByAccountRequest) (*QueryBuyOffersPlacedByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyOffersPlacedByAccount not implemented")
}
func (*UnimplementedQueryServer) BuyOffersByDymName(ctx context.Context, req *QueryBuyOffersByDymNameRequest) (*QueryBuyOffersByDymNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyOffersByDymName not implemented")
}
func (*UnimplementedQueryServer) BuyOffersOfDymNamesOwnedByAccount(ctx context.Context, req *QueryBuyOffersOfDymNamesOwnedByAccountRequest) (*QueryBuyOffersOfDymNamesOwnedByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyOffersOfDymNamesOwnedByAccount not implemented")
}
func (*UnimplementedQueryServer) BuyOffersByAlias(ctx context.Context, req *QueryBuyOffersByAliasRequest) (*QueryBuyOffersByAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyOffersByAlias not implemented")
}
func (*UnimplementedQueryServer) BuyOffersOfAliasesLinkedToRollApp(ctx context.Context, req *QueryBuyOffersOfAliasesLinkedToRollAppRequest) (*QueryBuyOffersOfAliasesLinkedToRollAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyOffersOfAliasesLinkedToRollApp not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DymName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDymNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DymName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/DymName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DymName(ctx, req.(*QueryDymNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Alias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Alias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/Alias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Alias(ctx, req.(*QueryAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ResolveDymNameAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveDymNameAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ResolveDymNameAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/ResolveDymNameAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ResolveDymNameAddresses(ctx, req.(*ResolveDymNameAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DymNamesOwnedByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDymNamesOwnedByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DymNamesOwnedByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/DymNamesOwnedByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DymNamesOwnedByAccount(ctx, req.(*QueryDymNamesOwnedByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SellOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySellOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SellOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/SellOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SellOrder(ctx, req.(*QuerySellOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HistoricalSellOrderOfDymName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoricalSellOrderOfDymNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HistoricalSellOrderOfDymName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/HistoricalSellOrderOfDymName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HistoricalSellOrderOfDymName(ctx, req.(*QueryHistoricalSellOrderOfDymNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateRegisterName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateRegisterNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateRegisterName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/EstimateRegisterName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateRegisterName(ctx, req.(*EstimateRegisterNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReverseResolveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReverseResolveAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReverseResolveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/ReverseResolveAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReverseResolveAddress(ctx, req.(*ReverseResolveAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TranslateAliasOrChainIdToChainId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTranslateAliasOrChainIdToChainIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TranslateAliasOrChainIdToChainId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/TranslateAliasOrChainIdToChainId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TranslateAliasOrChainIdToChainId(ctx, req.(*QueryTranslateAliasOrChainIdToChainIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuyOfferById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBuyOfferByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuyOfferById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/BuyOfferById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuyOfferById(ctx, req.(*QueryBuyOfferByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuyOffersPlacedByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBuyOffersPlacedByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuyOffersPlacedByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/BuyOffersPlacedByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuyOffersPlacedByAccount(ctx, req.(*QueryBuyOffersPlacedByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuyOffersByDymName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBuyOffersByDymNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuyOffersByDymName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/BuyOffersByDymName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuyOffersByDymName(ctx, req.(*QueryBuyOffersByDymNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuyOffersOfDymNamesOwnedByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBuyOffersOfDymNamesOwnedByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuyOffersOfDymNamesOwnedByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/BuyOffersOfDymNamesOwnedByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuyOffersOfDymNamesOwnedByAccount(ctx, req.(*QueryBuyOffersOfDymNamesOwnedByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuyOffersByAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBuyOffersByAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuyOffersByAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/BuyOffersByAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuyOffersByAlias(ctx, req.(*QueryBuyOffersByAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuyOffersOfAliasesLinkedToRollApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBuyOffersOfAliasesLinkedToRollAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuyOffersOfAliasesLinkedToRollApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.dymns.Query/BuyOffersOfAliasesLinkedToRollApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuyOffersOfAliasesLinkedToRollApp(ctx, req.(*QueryBuyOffersOfAliasesLinkedToRollAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dymensionxyz.dymension.dymns.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "DymName",
			Handler:    _Query_DymName_Handler,
		},
		{
			MethodName: "Alias",
			Handler:    _Query_Alias_Handler,
		},
		{
			MethodName: "ResolveDymNameAddresses",
			Handler:    _Query_ResolveDymNameAddresses_Handler,
		},
		{
			MethodName: "DymNamesOwnedByAccount",
			Handler:    _Query_DymNamesOwnedByAccount_Handler,
		},
		{
			MethodName: "SellOrder",
			Handler:    _Query_SellOrder_Handler,
		},
		{
			MethodName: "HistoricalSellOrderOfDymName",
			Handler:    _Query_HistoricalSellOrderOfDymName_Handler,
		},
		{
			MethodName: "EstimateRegisterName",
			Handler:    _Query_EstimateRegisterName_Handler,
		},
		{
			MethodName: "ReverseResolveAddress",
			Handler:    _Query_ReverseResolveAddress_Handler,
		},
		{
			MethodName: "TranslateAliasOrChainIdToChainId",
			Handler:    _Query_TranslateAliasOrChainIdToChainId_Handler,
		},
		{
			MethodName: "BuyOfferById",
			Handler:    _Query_BuyOfferById_Handler,
		},
		{
			MethodName: "BuyOffersPlacedByAccount",
			Handler:    _Query_BuyOffersPlacedByAccount_Handler,
		},
		{
			MethodName: "BuyOffersByDymName",
			Handler:    _Query_BuyOffersByDymName_Handler,
		},
		{
			MethodName: "BuyOffersOfDymNamesOwnedByAccount",
			Handler:    _Query_BuyOffersOfDymNamesOwnedByAccount_Handler,
		},
		{
			MethodName: "BuyOffersByAlias",
			Handler:    _Query_BuyOffersByAlias_Handler,
		},
		{
			MethodName: "BuyOffersOfAliasesLinkedToRollApp",
			Handler:    _Query_BuyOffersOfAliasesLinkedToRollApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dymensionxyz/dymension/dymns/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDymNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDymNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDymNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DymName) > 0 {
		i -= len(m.DymName)
		copy(dAtA[i:], m.DymName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DymName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDymNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDymNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDymNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DymName != nil {
		{
			size, err := m.DymName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAliasRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAliasRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAliasRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAliasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAliasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAliasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuyOfferIds) > 0 {
		for iNdEx := len(m.BuyOfferIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BuyOfferIds[iNdEx])
			copy(dAtA[i:], m.BuyOfferIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.BuyOfferIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.FoundSellOrder {
		i--
		if m.FoundSellOrder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResolveDymNameAddressesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveDymNameAddressesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveDymNameAddressesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResultDymNameAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultDymNameAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResultDymNameAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ResolvedAddress) > 0 {
		i -= len(m.ResolvedAddress)
		copy(dAtA[i:], m.ResolvedAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ResolvedAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResolveDymNameAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveDymNameAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveDymNameAddressesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResolvedAddresses) > 0 {
		for iNdEx := len(m.ResolvedAddresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResolvedAddresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDymNamesOwnedByAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDymNamesOwnedByAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDymNamesOwnedByAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDymNamesOwnedByAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDymNamesOwnedByAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDymNamesOwnedByAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DymNames) > 0 {
		for iNdEx := len(m.DymNames) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DymNames[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySellOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySellOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySellOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderType) > 0 {
		i -= len(m.OrderType)
		copy(dAtA[i:], m.OrderType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GoodsId) > 0 {
		i -= len(m.GoodsId)
		copy(dAtA[i:], m.GoodsId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GoodsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySellOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySellOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySellOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryHistoricalSellOrderOfDymNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHistoricalSellOrderOfDymNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHistoricalSellOrderOfDymNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DymName) > 0 {
		i -= len(m.DymName)
		copy(dAtA[i:], m.DymName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DymName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHistoricalSellOrderOfDymNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHistoricalSellOrderOfDymNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHistoricalSellOrderOfDymNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for iNdEx := len(m.Result) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Result[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EstimateRegisterNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateRegisterNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateRegisterNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Duration != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EstimateRegisterNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateRegisterNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateRegisterNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.ExtendPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.FirstYearPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ReverseResolveAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReverseResolveAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReverseResolveAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkingChainId) > 0 {
		i -= len(m.WorkingChainId)
		copy(dAtA[i:], m.WorkingChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WorkingChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReverseResolveAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReverseResolveAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReverseResolveAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkingChainId) > 0 {
		i -= len(m.WorkingChainId)
		copy(dAtA[i:], m.WorkingChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WorkingChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Result) > 0 {
		for k := range m.Result {
			v := m.Result[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReverseResolveAddressResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReverseResolveAddressResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReverseResolveAddressResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Candidates) > 0 {
		for iNdEx := len(m.Candidates) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Candidates[iNdEx])
			copy(dAtA[i:], m.Candidates[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Candidates[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTranslateAliasOrChainIdToChainIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTranslateAliasOrChainIdToChainIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTranslateAliasOrChainIdToChainIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AliasOrChainId) > 0 {
		i -= len(m.AliasOrChainId)
		copy(dAtA[i:], m.AliasOrChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AliasOrChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTranslateAliasOrChainIdToChainIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTranslateAliasOrChainIdToChainIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTranslateAliasOrChainIdToChainIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBuyOfferByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuyOfferByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuyOfferByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBuyOfferByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuyOfferByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuyOfferByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Offer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBuyOffersPlacedByAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuyOffersPlacedByAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuyOffersPlacedByAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBuyOffersPlacedByAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuyOffersPlacedByAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuyOffersPlacedByAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Offers) > 0 {
		for iNdEx := len(m.Offers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Offers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBuyOffersByDymNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuyOffersByDymNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuyOffersByDymNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBuyOffersByDymNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuyOffersByDymNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuyOffersByDymNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Offers) > 0 {
		for iNdEx := len(m.Offers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Offers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBuyOffersOfDymNamesOwnedByAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuyOffersOfDymNamesOwnedByAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuyOffersOfDymNamesOwnedByAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBuyOffersOfDymNamesOwnedByAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuyOffersOfDymNamesOwnedByAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuyOffersOfDymNamesOwnedByAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Offers) > 0 {
		for iNdEx := len(m.Offers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Offers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBuyOffersByAliasRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuyOffersByAliasRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuyOffersByAliasRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBuyOffersByAliasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuyOffersByAliasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuyOffersByAliasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Offers) > 0 {
		for iNdEx := len(m.Offers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Offers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBuyOffersOfAliasesLinkedToRollAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuyOffersOfAliasesLinkedToRollAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuyOffersOfAliasesLinkedToRollAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBuyOffersOfAliasesLinkedToRollAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuyOffersOfAliasesLinkedToRollAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuyOffersOfAliasesLinkedToRollAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Offers) > 0 {
		for iNdEx := len(m.Offers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Offers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDymNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DymName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDymNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DymName != nil {
		l = m.DymName.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAliasRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAliasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FoundSellOrder {
		n += 2
	}
	if len(m.BuyOfferIds) > 0 {
		for _, s := range m.BuyOfferIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ResolveDymNameAddressesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ResultDymNameAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ResolvedAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ResolveDymNameAddressesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResolvedAddresses) > 0 {
		for _, e := range m.ResolvedAddresses {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDymNamesOwnedByAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDymNamesOwnedByAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DymNames) > 0 {
		for _, e := range m.DymNames {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySellOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GoodsId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OrderType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySellOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Result.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryHistoricalSellOrderOfDymNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DymName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHistoricalSellOrderOfDymNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *EstimateRegisterNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovQuery(uint64(m.Duration))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *EstimateRegisterNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FirstYearPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.ExtendPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *ReverseResolveAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.WorkingChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ReverseResolveAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Result) > 0 {
		for k, v := range m.Result {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + 1 + l + sovQuery(uint64(l))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	l = len(m.WorkingChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ReverseResolveAddressResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Candidates) > 0 {
		for _, s := range m.Candidates {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTranslateAliasOrChainIdToChainIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AliasOrChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTranslateAliasOrChainIdToChainIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBuyOfferByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBuyOfferByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Offer.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBuyOffersPlacedByAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBuyOffersPlacedByAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Offers) > 0 {
		for _, e := range m.Offers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBuyOffersByDymNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBuyOffersByDymNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Offers) > 0 {
		for _, e := range m.Offers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBuyOffersOfDymNamesOwnedByAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBuyOffersOfDymNamesOwnedByAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Offers) > 0 {
		for _, e := range m.Offers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBuyOffersByAliasRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBuyOffersByAliasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Offers) > 0 {
		for _, e := range m.Offers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBuyOffersOfAliasesLinkedToRollAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBuyOffersOfAliasesLinkedToRollAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Offers) > 0 {
		for _, e := range m.Offers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDymNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDymNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDymNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DymName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DymName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDymNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDymNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDymNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DymName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DymName == nil {
				m.DymName = &DymName{}
			}
			if err := m.DymName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAliasRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAliasRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAliasRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAliasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAliasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAliasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoundSellOrder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FoundSellOrder = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyOfferIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyOfferIds = append(m.BuyOfferIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveDymNameAddressesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveDymNameAddressesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveDymNameAddressesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultDymNameAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultDymNameAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultDymNameAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResolvedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveDymNameAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveDymNameAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveDymNameAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResolvedAddresses = append(m.ResolvedAddresses, ResultDymNameAddress{})
			if err := m.ResolvedAddresses[len(m.ResolvedAddresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDymNamesOwnedByAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDymNamesOwnedByAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDymNamesOwnedByAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDymNamesOwnedByAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDymNamesOwnedByAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDymNamesOwnedByAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DymNames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DymNames = append(m.DymNames, DymName{})
			if err := m.DymNames[len(m.DymNames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySellOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySellOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySellOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySellOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySellOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySellOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHistoricalSellOrderOfDymNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHistoricalSellOrderOfDymNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHistoricalSellOrderOfDymNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DymName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DymName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHistoricalSellOrderOfDymNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHistoricalSellOrderOfDymNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHistoricalSellOrderOfDymNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, SellOrder{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateRegisterNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateRegisterNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateRegisterNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateRegisterNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateRegisterNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateRegisterNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstYearPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FirstYearPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExtendPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReverseResolveAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReverseResolveAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReverseResolveAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkingChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkingChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReverseResolveAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReverseResolveAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReverseResolveAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = make(map[string]ReverseResolveAddressResult)
			}
			var mapkey string
			mapvalue := &ReverseResolveAddressResult{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ReverseResolveAddressResult{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Result[mapkey] = *mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkingChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkingChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReverseResolveAddressResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReverseResolveAddressResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReverseResolveAddressResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidates = append(m.Candidates, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTranslateAliasOrChainIdToChainIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTranslateAliasOrChainIdToChainIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTranslateAliasOrChainIdToChainIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasOrChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliasOrChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTranslateAliasOrChainIdToChainIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTranslateAliasOrChainIdToChainIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTranslateAliasOrChainIdToChainIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuyOfferByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuyOfferByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuyOfferByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuyOfferByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuyOfferByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuyOfferByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Offer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuyOffersPlacedByAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuyOffersPlacedByAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuyOffersPlacedByAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuyOffersPlacedByAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuyOffersPlacedByAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuyOffersPlacedByAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offers = append(m.Offers, BuyOffer{})
			if err := m.Offers[len(m.Offers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuyOffersByDymNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuyOffersByDymNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuyOffersByDymNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuyOffersByDymNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuyOffersByDymNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuyOffersByDymNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offers = append(m.Offers, BuyOffer{})
			if err := m.Offers[len(m.Offers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuyOffersOfDymNamesOwnedByAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuyOffersOfDymNamesOwnedByAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuyOffersOfDymNamesOwnedByAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuyOffersOfDymNamesOwnedByAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuyOffersOfDymNamesOwnedByAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuyOffersOfDymNamesOwnedByAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offers = append(m.Offers, BuyOffer{})
			if err := m.Offers[len(m.Offers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuyOffersByAliasRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuyOffersByAliasRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuyOffersByAliasRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuyOffersByAliasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuyOffersByAliasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuyOffersByAliasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offers = append(m.Offers, BuyOffer{})
			if err := m.Offers[len(m.Offers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuyOffersOfAliasesLinkedToRollAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuyOffersOfAliasesLinkedToRollAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuyOffersOfAliasesLinkedToRollAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuyOffersOfAliasesLinkedToRollAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuyOffersOfAliasesLinkedToRollAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuyOffersOfAliasesLinkedToRollAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offers = append(m.Offers, BuyOffer{})
			if err := m.Offers[len(m.Offers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
