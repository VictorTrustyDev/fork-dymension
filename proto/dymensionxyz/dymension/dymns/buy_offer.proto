syntax = "proto3";
package dymensionxyz.dymension.dymns;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "dymensionxyz/dymension/dymns/market.proto";

option go_package = "github.com/dymensionxyz/dymension/v3/x/dymns/types";

// BuyOffer defines an offer to buy a Dym-Name/Alias, placed by buyer.
// Buyer will need to deposit the offer amount to the module account.
// When the owner of the Dym-Name/Alias accepts the offer, deposited amount will be transferred to the owner.
// When the buyer cancels the offer, deposited amount will be refunded to the buyer.
message BuyOffer {
  // id is the unique identifier of the offer. Generated by the module.
  string id = 1;

  // goods_id of the Dym-Name/Alias willing to buy.
  string goods_id = 2;

  // type of the order, is Dym-Name or Alias
  MarketOrderType type = 3;

  // buyer is bech32 address of the account which placed the offer.
  string buyer = 4;

  // offer_price is the amount of coins that buyer willing to pay for the goods.
  // This amount is deposited to the module account upon placing the offer.
  cosmos.base.v1beta1.Coin offer_price = 5 [(gogoproto.nullable) = false];

  // counterparty_offer_price is the price that the Dym-Name/Alias owner is willing to sell for.
  // This is used for counterparty price negotiation and for information only.
  // The transaction can only be executed when the owner accepts the offer with exact offer_price.
  cosmos.base.v1beta1.Coin counterparty_offer_price = 6;
}

// ReverseLookupOfferIds contains a list of offer-ids for reverse lookup.
message ReverseLookupOfferIds {
  // offer_ids is a list of offer-ids of the Buy-Offers linked to the reverse-lookup record.
  repeated string offer_ids = 1;
}