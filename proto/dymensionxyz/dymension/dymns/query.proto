syntax = "proto3";
package dymensionxyz.dymension.dymns;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "dymensionxyz/dymension/dymns/params.proto";
import "dymensionxyz/dymension/dymns/dym_name.proto";
import "dymensionxyz/dymension/dymns/sell_order.proto";
import "dymensionxyz/dymension/dymns/buy_offer.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/dymensionxyz/dymension/v3/x/dymns/types";

// Query defines the gRPC querier service.
service Query {
  // Params queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/dymns/params";
  }

  // DymName queries a Dym-Name by its name.
  rpc DymName(QueryDymNameRequest) returns (QueryDymNameResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/dymns/dym_name/{dym_name}";
  }

  // ResolveDymNameAddresses resolves multiple Dym-Name Addresses to account address of each pointing to.
  //
  // For example:
  //   - "my-name@dym" => "dym1a..."
  //   - "another.my-name@dym" => "dym1b..."
  //   - "my-name@nim" => "nim1..."
  //   - (extra format) "0x1234...6789@nim" => "nim1..."
  //   - (extra format) "dym1a...@nim" => "nim1..."
  rpc ResolveDymNameAddresses(QueryResolveDymNameAddressesRequest) returns (QueryResolveDymNameAddressesResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/dymns/resolve";
  }

  // DymNamesOwnedByAccount queries the Dym-Names owned by an account.
  rpc DymNamesOwnedByAccount(QueryDymNamesOwnedByAccountRequest) returns (QueryDymNamesOwnedByAccountResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/dymns/owned_by/{owner}";
  }

  // SellOrderOfDymName queries the active SO of a Dym-Name.
  rpc SellOrderOfDymName(QuerySellOrderOfDymNameRequest) returns (QuerySellOrderOfDymNameResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/dymns/sell_order/dym_name/{dym_name}";
  }

  // HistoricalSellOrderOfDymName queries the historical SOs of a Dym-Name.
  rpc HistoricalSellOrderOfDymName(QueryHistoricalSellOrderOfDymNameRequest) returns (QueryHistoricalSellOrderOfDymNameResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/dymns/historical_sell_order/dym_name/{dym_name}";
  }

  // EstimateRegisterName estimates the cost to register a Dym-Name.
  rpc EstimateRegisterName(QueryEstimateRegisterNameRequest) returns (QueryEstimateRegisterNameResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/dymns/estimate_register_name/{name}/{duration}";
  }

  // ReverseResolveAddress resolves multiple account addresses to Dym-Name Addresses which point to each.
  // This function may return multiple possible Dym-Name-Addresses those point to each of the input address.
  //
  // For example: when we have "my-name@dym" resolves to "dym1a..."
  // so reverse resolve will return "my-name@dym" when input is "dym1a..."
  rpc ReverseResolveAddress(QueryReverseResolveAddressRequest) returns (QueryReverseResolveAddressResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/dymns/reverse_resolve";
  }

  // TranslateAliasOrChainIdToChainId tries to translate an alias/handle to a chain id.
  // If an alias/handle can not be translated to chain-id, it is treated as a chain-id and returns.
  rpc TranslateAliasOrChainIdToChainId(QueryTranslateAliasOrChainIdToChainIdRequest) returns (QueryTranslateAliasOrChainIdToChainIdResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/dymns/translate_alias/{alias_or_chain_id}";
  }

  // BuyOfferById queries a buy offer by its id.
  rpc BuyOfferById(QueryBuyOfferByIdRequest) returns (QueryBuyOfferByIdResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/dymns/buy_offer/{id}";
  }

  // BuyOffersPlacedByAccount queries the all the buy offers placed by an account.
  rpc BuyOffersPlacedByAccount(QueryBuyOffersPlacedByAccountRequest) returns (QueryBuyOffersPlacedByAccountResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/dymns/offers_to_buy_placed_by_account/{account}";
  }

  // BuyOffersByDymName queries all the buy offers of a Dym-Name.
  rpc BuyOffersByDymName(QueryBuyOffersByDymNameRequest) returns (QueryBuyOffersByDymNameResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/dymns/offers_to_buy_by_dym_name/{name}";
  }

  // BuyOffersOfDymNamesOwnedByAccount queries all the buy offers of all Dym-Names owned by an account.
  rpc BuyOffersOfDymNamesOwnedByAccount(QueryBuyOffersOfDymNamesOwnedByAccountRequest) returns (QueryBuyOffersOfDymNamesOwnedByAccountResponse) {
    option (google.api.http).get = "/dymensionxyz/dymension/dymns/offers_to_buy_of_dym_names_owned_by_account/{account}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryDymNameRequest is the request type for the Query/DymName RPC method.
message QueryDymNameRequest {
  option (gogoproto.equal)           = false;

  // dym_name is the name of the Dym-Name to query.
  string dym_name = 1;
}

// QueryDymNameResponse is the response type for the Query/DymName RPC method.
message QueryDymNameResponse {
  // dym_name is the Dym-Name queried for.
  DymName dym_name = 1;
}

// QueryResolveDymNameAddressesRequest is the request type for the Query/ResolveDymNameAddresses RPC method.
message QueryResolveDymNameAddressesRequest {
  option (gogoproto.equal)           = false;

  // addresses defines the Dym-Name addresses to resolve.
  repeated string addresses = 1;
}

// ResultDymNameAddress defines the result of a single Dym-Name address resolution.
message ResultDymNameAddress {
  // address is the input Dym-Name address to resolve.
  string address = 1;

  // resolved_address is the resolved account address.
  string resolved_address = 2;

  // error is the error that occurred during the resolution.
  string error = 3;
}

// QueryResolveDymNameAddressesResponse is the response type for the Query/ResolveDymNameAddresses RPC method.
message QueryResolveDymNameAddressesResponse {
  // resolved_addresses defines the resolved addresses for each input Dym-Name address.
  repeated ResultDymNameAddress resolved_addresses = 1 [(gogoproto.nullable) = false];
}

// QueryDymNamesOwnedByAccountRequest is the request type for the Query/DymNamesOwnedByAccount RPC method.
message QueryDymNamesOwnedByAccountRequest {
  option (gogoproto.equal)           = false;

  // owner defines the address of the owner of the Dym-Names to query for.
  string owner = 1;
}

//  QueryDymNamesOwnedByAccountResponse is the response type for the Query/DymNamesOwnedByAccount RPC method.
message QueryDymNamesOwnedByAccountResponse {
  // dym_names defines the Dym-Names owned by the input account.
  repeated DymName dym_names = 1 [(gogoproto.nullable) = false];
}

// QuerySellOrderOfDymNameRequest is the request type for the Query/SellOrder RPC method.
message QuerySellOrderOfDymNameRequest {
  option (gogoproto.equal)           = false;

  // dym_name is the Dym-Name to query the active Sell-Order for.
  string dym_name = 1;
}

// QuerySellOrderOfDymNameResponse is the response type for the Query/SellOrder RPC method.
message QuerySellOrderOfDymNameResponse {
  // result is the active Sell-Order for the Dym-Name.
  SellOrder result = 1 [(gogoproto.nullable) = false];
}

// QueryHistoricalSellOrderOfDymNameRequest is the request type for the Query/HistoricalSellOrder RPC method.
message QueryHistoricalSellOrderOfDymNameRequest {
  option (gogoproto.equal)           = false;

  // dym_name is the Dym-Name to query the historical Sell-Orders for.
  string dym_name = 1;
}

// QueryHistoricalSellOrderOfDymNameResponse is the response type for the Query/HistoricalSellOrder RPC method.
message QueryHistoricalSellOrderOfDymNameResponse {
  // result defines the historical Sell-Orders of the Dym-Name queried.
  repeated SellOrder result = 1 [(gogoproto.nullable) = false];
}

// QueryEstimateRegisterNameRequest is the request type for the Query/EstimateRegisterName RPC method.
message QueryEstimateRegisterNameRequest {
  option (gogoproto.equal)           = false;

  // name is the Dym-Name to be registered.
  string name = 1;

  // duration is the number of years the Dym-Name will be registered for.
  int64 duration = 2;

  // owner is the bech32-encoded address of the account which owns the order.
  string owner = 3;
}

// QueryEstimateRegisterNameResponse is the response type for the Query/EstimateRegisterName RPC method.
message QueryEstimateRegisterNameResponse {
  // first_year_price is the price to register the Dym-Name for the first year.
  cosmos.base.v1beta1.Coin first_year_price = 1 [(gogoproto.nullable) = false];

  // extend_price is the price to extend the Dym-Name registration for another year.
  cosmos.base.v1beta1.Coin extend_price = 2 [(gogoproto.nullable) = false];

  // total_price is the total price to register the Dym-Name for the specified duration.
  cosmos.base.v1beta1.Coin total_price = 3 [(gogoproto.nullable) = false];
}

// QueryReverseResolveAddressRequest is the request type for the Query/ReverseResolveAddress RPC method.
message QueryReverseResolveAddressRequest {
  // addresses defines the addresses to reverse resolve. Can be both bech32 and hex addresses.
  repeated string addresses = 1;

  // working_chain_id defines the chain id to use for the reverse resolution.
  // Leave empty to use the host chain id.
  string working_chain_id = 2;
}

// QueryReverseResolveAddressResponse is the response type for the Query/ReverseResolveAddress RPC method.
message QueryReverseResolveAddressResponse {
  // result defines the reverse resolution result for each input address.
  map<string, ReverseResolveAddressResult> result = 1 [(gogoproto.nullable) = false];

  // working_chain_id is the chain id used for the reverse resolution.
  string working_chain_id = 2;
}

message ReverseResolveAddressResult {
  // candidates are the Dym-Name addresses that the input address resolves to. Take one of them.
  repeated string candidates = 1;

  // error is the error that occurred during the resolution.
  string error = 2;
}

// QueryTranslateAliasOrChainIdToChainIdRequest is the request type for the Query/TranslateAliasOrChainIdToChainId RPC method.
message QueryTranslateAliasOrChainIdToChainIdRequest {
  // alias_or_chain_id is the alias or chain id to translate.
  string alias_or_chain_id = 1;
}

// QueryTranslateAliasOrChainIdToChainIdResponse is the response type for the Query/TranslateAliasOrChainIdToChainId RPC method.
message QueryTranslateAliasOrChainIdToChainIdResponse {
  // chain_id is the chain id that the alias or chain id translates to.
  string chain_id = 1;
}

// QueryBuyOfferByIdRequest is the request type for the Query/BuyOfferById RPC method.
message QueryBuyOfferByIdRequest {
  // id of buy offer to query.
  string id = 1;
}

// QueryBuyOfferByIdResponse is the response type for the Query/BuyOfferById RPC method.
message QueryBuyOfferByIdResponse {
  // offer is the result.
  BuyOffer offer = 1 [(gogoproto.nullable) = false];
}

// QueryBuyOffersByAccountRequest is the request type for the Query/BuyOffersPlacedByAccount RPC method.
message QueryBuyOffersPlacedByAccountRequest {
  // account is the account address to query the placed buy offers.
  string account = 1;
}

// QueryBuyOffersByAccountResponse is the response type for the Query/BuyOffersPlacedByAccount RPC method.
message QueryBuyOffersPlacedByAccountResponse {
  // offers are the Buy-Offers placed by the account.
  repeated BuyOffer offers = 1 [(gogoproto.nullable) = false];
}

// QueryBuyOffersByDymNameRequest is the request type for the Query/BuyOffersByDymName RPC method.
message QueryBuyOffersByDymNameRequest {
  // name is the Dym-Name to query the buy offers placed for it.
  string name = 1;
}

// QueryBuyOffersByDymNameResponse is the response type for the Query/BuyOffersByDymName RPC method.
message QueryBuyOffersByDymNameResponse {
  // offers are the buy offers of the Dym-Name.
  repeated BuyOffer offers = 1 [(gogoproto.nullable) = false];
}

// QueryBuyOffersOfDymNamesOwnedByAccountRequest is the request type for the Query/BuyOffersOfDymNamesOwnedByAccount RPC method.
message QueryBuyOffersOfDymNamesOwnedByAccountRequest {
  // account is the account address to query all the buy offers of the Dym-Names owned by it.
  string account = 1;
}

// QueryBuyOffersOfDymNamesOwnedByAccountResponse is the response type for the Query/BuyOffersOfDymNamesOwnedByAccount RPC method.
message QueryBuyOffersOfDymNamesOwnedByAccountResponse {
  // offers are all the buy offers of the Dym-Names owned by the input account.
  repeated BuyOffer offers = 1 [(gogoproto.nullable) = false];
}
