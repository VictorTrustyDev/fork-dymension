syntax = "proto3";
package dymensionxyz.dymension.dymns;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/dymensionxyz/dymension/v3/x/dymns/types";

// SellOrder defines a sell order, placed by owner, to sell a Dym-Name/Alias.
// Sell-Order has an expiry date.
// After expiry date, if no one has placed a bid, this Sell-Order will be closed, no change.
// If there is a bid, the highest bid will win, and the Dym-Name/Alias ownership will be transferred to the winner.
// If the bid matches the sell price, the Dym-Name/Alias ownership will be transferred to the bidder immediately.
// SO will be moved to historical records after completion/expiry.
message SellOrder {
  // goods_id is the Dym-Name/Alias being opened to be sold.
  string goods_id = 1;

  // type of the order, is Dym-Name or Alias.
  OrderType type = 2;

  // expire_at is the last effective date of this SO
  int64 expire_at = 3;

  // min_price is the minimum price that the owner is willing to accept for the goods.
  cosmos.base.v1beta1.Coin min_price = 4 [(gogoproto.nullable) = false];

  // sell_price is the price that the owner is willing to sell the Dym-Name/Alias for,
  // the SO will be closed when the price is met.
  // If the sell price is zero, the SO will be closed when the expire_at is reached and the highest bidder wins.
  cosmos.base.v1beta1.Coin sell_price = 5;

  // highest_bid is the highest bid on the SO, if any. Price must be greater than or equal to the min_price.
  SellOrderBid highest_bid = 6;
}

// ActiveSellOrdersExpiration contains list of active SOs, store expiration date mapped by goods identity.
// Used by hook to find out expired SO instead of iterating through all records.
message ActiveSellOrdersExpiration {
  repeated ActiveSellOrdersExpirationRecord records = 1 [(gogoproto.nullable) = false];
}

// ActiveSellOrdersExpirationRecord contains the expiration date of an active Sell-Order.
message ActiveSellOrdersExpirationRecord {
  // goods_id is the Dym-Name/Alias being opened to be sold.
  string goods_id = 1;

  // expire_at is the last effective date of this Sell-Order.
  int64 expire_at = 2;
}

// SellOrderBid defines a bid placed by an account on a Sell-Order.
message SellOrderBid {
  // bidder is the account address of the account which placed the bid.
  string bidder = 1;

  // price is the amount of coin offered by the bidder.
  cosmos.base.v1beta1.Coin price = 2 [(gogoproto.nullable) = false];

  // params is the list of parameters of the bid.
  // It is empty for order type Dym-Name.
  // It has one element for order type Alias, which is the rollapp_id to assigned for.
  repeated string params = 3;
}

// HistoricalSellOrders contains list of closed Sell-Orders of the same goods.
message HistoricalSellOrders {
  // sell_orders is list of closed Sell-Orders of the same goods.
  repeated SellOrder sell_orders = 1 [(gogoproto.nullable) = false];
}

// BuyOffer defines an offer to buy a Dym-Name/Alias, placed by buyer.
// Buyer will need to deposit the offer amount to the module account.
// When the owner of the Dym-Name/Alias accepts the offer, deposited amount will be transferred to the owner.
// When the buyer cancels the offer, deposited amount will be refunded to the buyer.
message BuyOffer {
  // id is the unique identifier of the offer. Generated by the module.
  string id = 1;

  // goods_id of the Dym-Name/Alias willing to buy.
  string goods_id = 2;

  // type of the order, is Dym-Name or Alias
  OrderType type = 3;

  // params is the list of parameters of the offer.
  // It is empty for order type Dym-Name.
  // It has one element for order type Alias, which is the rollapp_id to assigned for.
  repeated string params = 4;

  // buyer is bech32 address of the account which placed the offer.
  string buyer = 5;

  // offer_price is the amount of coins that buyer willing to pay for the goods.
  // This amount is deposited to the module account upon placing the offer.
  cosmos.base.v1beta1.Coin offer_price = 6 [(gogoproto.nullable) = false];

  // counterparty_offer_price is the price that the Dym-Name/Alias owner is willing to sell for.
  // This is used for counterparty price negotiation and for information only.
  // The transaction can only be executed when the owner accepts the offer with exact offer_price.
  cosmos.base.v1beta1.Coin counterparty_offer_price = 7;
}

// ReverseLookupOfferIds contains a list of offer-ids for reverse lookup.
message ReverseLookupOfferIds {
  // offer_ids is a list of offer-ids of the Buy-Offers linked to the reverse-lookup record.
  repeated string offer_ids = 1;
}

// OrderType present type of the Buy/Sell order.
enum OrderType {
  OT_UNKNOWN = 0;
  OT_DYM_NAME = 1;
  OT_ALIAS = 2;
}
